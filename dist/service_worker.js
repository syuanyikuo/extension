(()=>{let e,t,n,r,a,s,i,o;function l(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var u,h,p,d,c,f,m,g,y,b,x,v,k,w,I,S,N,T,C,$,E,A=globalThis;function R(e,t){return Object.keys(t).forEach(function(n){"default"===n||"__esModule"===n||Object.prototype.hasOwnProperty.call(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})}),e}var F={},D={},_=A.parcelRequiredbf7;null==_&&((_=function(e){if(e in F)return F[e].exports;if(e in D){var t=D[e];delete D[e];var n={id:e,exports:{}};return F[e]=n,t.call(n.exports,n,n.exports),n.exports}var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}).register=function(e,t){D[e]=t},A.parcelRequiredbf7=_);var O=_.register;O("foUwZ",function(e,t){}),O("gj6Et",function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=0xefc8249d,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));t=r>>>0,r-=t,r*=t,t=r>>>0,r-=t,t+=0x100000000*r}return(t>>>0)*23283064365386963e-26});n.next=function(){var e=2091639*n.s0+23283064365386963e-26*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1)}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function s(e,t){var n=new r(e),s=t&&t.state,i=n.next;return i.int32=function(){return 0x100000000*n.next()|0},i.double=function(){return i()+(2097152*i()|0)*11102230246251565e-32},i.quick=i,s&&("object"==typeof s&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.alea=s}(0,e,"function"==typeof define&&define)}),O("4gDjz",function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function s(e,t){var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/0x100000000};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/0x100000000,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.xor128=s}(0,e,"function"==typeof define&&define)}),O("HLBv4",function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^(e^e<<1))|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/0x100000000};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/0x100000000,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.xorwow=s}(0,e,"function"==typeof define&&define)}),O("ktaoY",function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],e^=e>>>7,n=e^e<<24^((e=r[a+1&7])^e>>>10)^((e=r[a+3&7])^e>>>3)^((e=r[a+4&7])^e<<7),e=r[a+7&7],e^=e<<13,n^=e^e<<9,r[a]=n,t.i=a+1&7,n};var n,r=e,a=[];if(r===(0|r))a[0]=r;else for(n=0,r=""+r;n<r.length;++n)a[7&n]=a[7&n]<<15^r.charCodeAt(n)+a[n+1&7]<<13;for(;a.length<8;)a.push(0);for(n=0;n<8&&0===a[n];++n);for(8==n?a[7]=-1:a[n],t.x=a,t.i=0,n=256;n>0;--n)t.next()}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/0x100000000};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/0x100000000,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&(s.x&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.xorshift7=s}(0,e,"function"==typeof define&&define)}),O("gBs5C",function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+0x61c88647|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},!function(e,t){var n,r,a,s,i,o=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),a=0,s=-32;s<l;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(i=i+0x61c88647|0,a=0==(n=o[127&s]^=r+i)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=o[a+34&127],n=o[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[a]=r^n;e.w=i,e.X=o,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/0x100000000};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/0x100000000,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&(s.X&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.xor4096=s}(0,e,"function"==typeof define&&define)}),O("ktLSh",function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-0x61c88647,t.d=0x517cc1b7,e===Math.floor(e)?(t.a=e/0x100000000|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/0x100000000};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/0x100000000,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.tychei=s}(0,e,"function"==typeof define&&define)});class M{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class L{refCount(e){return z("refCount")}incRef(e){return z("incRef")}timerAvailable(){return!0}time(e){return z("time")}read(e){return z("read")}readSync(e){return z("readSync")}readToGPU(e,t){return z("readToGPU")}numDataIds(){return z("numDataIds")}disposeData(e,t){return z("disposeData")}write(e,t,n){return z("write")}move(e,t,n,r,a){return z("move")}memory(){return z("memory")}floatPrecision(){return z("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return z("dispose")}}function z(e){throw Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var P={};function B(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,G(e,--t,n)}function W(e,t){if(e.length!==t.length)throw Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,G(e,--n,r),G(t,n,r)}function U(e,t,n){return Math.max(e,Math.min(t,n))}function V(e){return e%2==0?e:e+1}function G(e,t,n){let r=e[t];e[t]=e[n],e[n]=r}function H(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function q(e,t){let n=Math.random();return t*n+(1-n)*e}function j(e,t){let n=0;for(let r=0;r<e.length;r++){let a=Number(e[r])-Number(t[r]);n+=a*a}return n}function K(e,t){if(!e)throw Error("string"==typeof t?t:t())}function X(e,t,n=""){K(ee(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function Y(e){K(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function Z(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||em(e)&&!n)for(let r=0;r<e.length;++r)Z(e[r],t,n);else t.push(e);return t}function J(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function Q(e){return 0===e.length}function ee(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function et(e){return e%1==0}function en(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;{if(e===-1/0)return -1;let t=Math.exp(2*e);return(t-1)/(t+1)}}function er(e){let t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function ea(e){let t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return B(t),t}function es(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function ei(e,t=e=>0,n,r=setTimeout){return new Promise((a,s)=>{let i=0,o=()=>{if(e())return void a();let l=t(++i);if(null!=n&&i>=n)return void s();r(o,l)};o()})}function eo(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);let a=e.slice();return a[r]=t/n,a}function el(e,t){let n=t.length;return K((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`),K(e.every(e=>et(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?n+e:e)}function eu(e,t){let n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:el(t,e).sort(),i=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[i]===t&&1!==e[t])throw Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[i]||s[i]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function eh(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else throw Error(`Unknown data type ${e}`);return n}function ep(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else if("string"===e)n=Array(t);else throw Error(`Unknown data type ${e}`);return n}function ed(e,t){for(let n=0;n<e.length;n++){let r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function ec(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function ef(e,t){return"complex64"!==t&&("float32"!==t||"complex64"===e)&&("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)}function em(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function eg(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw Error(`Unknown dtype ${e}`)}function ey(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function eb(e){return"string"==typeof e||e instanceof String}function ex(e){return"boolean"==typeof e}function ev(e){return"number"==typeof e}function ek(e){if(Array.isArray(e))return ek(e[0]);if(e instanceof Float32Array);else if(e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray)return"int32";else if(ev(e));else if(eb(e))return"string";else if(ex(e))return"bool";return"float32"}function ew(e){return!!(e&&e.constructor&&e.call&&e.apply)}function eI(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function eS(e){let t=e.length;if(t<2)return[];let n=Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function eN(e,t,n=!1){if(0===e.length)return t[0];let r=e.reduce((e,t)=>e*t)*(n?2:1);if(0===r)return[];if(r!==t.length)throw Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return function e(t,n,r,a=!1){let s=[];if(1===n.length){let e=n[0]*(a?2:1);for(let n=0;n<e;n++)s[n]=r[t+n]}else{let i=n[0],o=n.slice(1),l=o.reduce((e,t)=>e*t)*(a?2:1);for(let n=0;n<i;n++)s[n]=e(t+n*l,o,r,a)}return s}(0,e,t,n)}function eT(e,t){let n=eC(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function eC(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw Error(`Unknown data type ${t}`)}function e$(e,t){let n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return eN(e,new Float32Array(n));if("int32"===t)return eN(e,new Int32Array(n));if("bool"===t)return eN(e,new Uint8Array(n));throw Error(`Unknown data type ${t}`)}function eE(e){e.forEach(t=>{K(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function eA(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function eR(e,t,n){if(0===t)return[];if(1===t)return[e];let r=Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function eF(e){return e&&e.then&&"function"==typeof e.then}l(P,"shuffle",()=>B),l(P,"swap",()=>G),l(P,"shuffleCombo",()=>W),l(P,"clamp",()=>U),l(P,"nearestLargerEven",()=>V),l(P,"sum",()=>H),l(P,"randUniform",()=>q),l(P,"distSquared",()=>j),l(P,"assert",()=>K),l(P,"assertShapesMatch",()=>X),l(P,"arraysEqual",()=>ee),l(P,"assertNonNull",()=>Y),l(P,"flatten",()=>Z),l(P,"isTypedArray",()=>em),l(P,"sizeFromShape",()=>J),l(P,"isScalarShape",()=>Q),l(P,"isInt",()=>et),l(P,"tanh",()=>en),l(P,"sizeToSquarishShape",()=>er),l(P,"createShuffledIndices",()=>ea),l(P,"rightPad",()=>es),l(P,"repeatedTry",()=>ei),l(P,"inferFromImplicitShape",()=>eo),l(P,"parseAxisParam",()=>el),l(P,"squeezeShape",()=>eu),l(P,"getTypedArrayFromDType",()=>eh),l(P,"getArrayFromDType",()=>ep),l(P,"checkConversionForErrors",()=>ed),l(P,"isValidDtype",()=>ec),l(P,"hasEncodingLoss",()=>ef),l(P,"bytesPerElement",()=>eg),l(P,"bytesFromStringArray",()=>ey),l(P,"isString",()=>eb),l(P,"isBoolean",()=>ex),l(P,"isNumber",()=>ev),l(P,"inferDtype",()=>ek),l(P,"isFunction",()=>ew),l(P,"nearestDivisor",()=>eI),l(P,"computeStrides",()=>eS),l(P,"toNestedArray",()=>eN),l(P,"makeOnesTypedArray",()=>eT),l(P,"makeZerosTypedArray",()=>eC),l(P,"makeZerosNestedTypedArray",()=>e$),l(P,"assertNonNegativeIntegerDimensions",()=>eE),l(P,"locToIndex",()=>eA),l(P,"indexToLoc",()=>eR),l(P,"isPromise",()=>eF);let eD="tfjsflags";class e_{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=eO,this.populateURLFlags()}setPlatform(e,t){null==this.platform||eM.getBool("IS_TEST")||eM.getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){let t=this.urlFlags[e];eM.getBool("IS_TEST")||eM.getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];let t=this.evaluateFlag(e);if(eF(t))throw Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;let e=this.getQueryParams(this.global.location.search);eD in e&&e[eD].split(",").forEach(e=>{let[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(`${+t}`===t)return+t;throw Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}function eO(e){let t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>{var r,a,s;return r=t,a=n[0],s=n[1],r[decodeURIComponent(a)]=decodeURIComponent(s||""),n.join("=")}),t}let eM=null;var eL={},ez=eL={};function eP(){throw Error("setTimeout has not been defined")}function eB(){throw Error("clearTimeout has not been defined")}try{u="function"==typeof setTimeout?setTimeout:eP}catch(e){u=eP}try{h="function"==typeof clearTimeout?clearTimeout:eB}catch(e){h=eB}function eW(e){if(u===setTimeout)return setTimeout(e,0);if((u===eP||!u)&&setTimeout)return u=setTimeout,setTimeout(e,0);try{return u(e,0)}catch(t){try{return u.call(null,e,0)}catch(t){return u.call(this,e,0)}}}var eU=[],eV=!1,eG=-1;function eH(){eV&&p&&(eV=!1,p.length?eU=p.concat(eU):eG=-1,eU.length&&eq())}function eq(){if(!eV){var e=eW(eH);eV=!0;for(var t=eU.length;t;){for(p=eU,eU=[];++eG<t;)p&&p[eG].run();eG=-1,t=eU.length}p=null,eV=!1,function(e){if(h===clearTimeout)return clearTimeout(e);if((h===eB||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(e);try{h(e)}catch(t){try{return h.call(null,e)}catch(t){return h.call(this,e)}}}(e)}}function ej(e,t){this.fun=e,this.array=t}function eK(){}function eX(){if(null==e){let t;if("undefined"!=typeof window)t=window;else if(void 0!==A)t=A;else if(void 0!==eL)t=eL;else if("undefined"!=typeof self)t=self;else throw Error("Could not find a global object");e=t}return e}function eY(e,t){let n=function(){let e=eX();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{let r=t();return n.set(e,r),n.get(e)}}ez.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];eU.push(new ej(e,t)),1!==eU.length||eV||eW(eq)},ej.prototype.run=function(){this.fun.apply(null,this.array)},ez.title="browser",ez.browser=!0,ez.env={},ez.argv=[],ez.version="",ez.versions={},ez.on=eK,ez.addListener=eK,ez.once=eK,ez.off=eK,ez.removeListener=eK,ez.removeAllListeners=eK,ez.emit=eK,ez.prependListener=eK,ez.prependOnceListener=eK,ez.listeners=function(e){return[]},ez.binding=function(e){throw Error("process.binding is not supported")},ez.cwd=function(){return"/"},ez.chdir=function(e){throw Error("process.chdir is not supported")},ez.umask=function(){return 0};let eZ="Acos",eJ="Acosh",eQ="AddN",e0="ArgMax",e1="ArgMin",e2="Asin",e3="Asinh",e4="Atan",e6="Atanh",e5="Atan2",e8="AvgPool",e7="AvgPoolGrad",e9="AvgPool3D",te="AvgPool3DGrad",tt="BatchMatMul",tn="BatchToSpaceND",tr="Bincount",ta="BroadcastArgs",ts="Cast",ti="Ceil",to="ClipByValue",tl="Complex",tu="ComplexAbs",th="Concat",tp="Conv2D",td="Conv2DBackpropFilter",tc="Conv2DBackpropInput",tf="Conv3D",tm="Conv3DBackpropFilterV2",tg="Conv3DBackpropInputV2",ty="Cosh",tb="Cumprod",tx="Cumsum",tv="CropAndResize",tk="DenseBincount",tw="DepthToSpace",tI="DepthwiseConv2dNative",tS="DepthwiseConv2dNativeBackpropFilter",tN="DepthwiseConv2dNativeBackpropInput",tT="Diag",tC="Dilation2D",t$="Dilation2DBackpropInput",tE="Dilation2DBackpropFilter",tA="RealDiv",tR="Einsum",tF="EluGrad",tD="Equal",t_="ExpandDims",tO="Expm1",tM="Fill",tL="FlipLeftRight",tz="Floor",tP="FloorDiv",tB="FusedBatchNorm",tW="GatherV2",tU="GatherNd",tV="Greater",tG="GreaterEqual",tH="Identity",tq="IFFT",tj="Imag",tK="IsFinite",tX="IsInf",tY="IsNan",tZ="LeakyRelu",tJ="Less",tQ="LessEqual",t0="LinSpace",t1="Log1p",t2="LogicalAnd",t3="LogicalNot",t4="LogicalOr",t6="LRNGrad",t5="Maximum",t8="MaxPool",t7="MaxPoolGrad",t9="MaxPool3D",ne="MaxPool3DGrad",nt="MaxPoolWithArgmax",nn="Mean",nr="Minimum",na="MirrorPad",ns="Multinomial",ni="Multiply",no="NotEqual",nl="NonMaxSuppressionV3",nu="NonMaxSuppressionV4",nh="NonMaxSuppressionV5",np="OnesLike",nd="OneHot",nc="Pack",nf="PadV2",nm="Prelu",ng="Prod",ny="RaggedGather",nb="RaggedTensorToTensor",nx="Range",nv="Real",nk="Reciprocal",nw="Relu",nI="Reshape",nS="ResizeNearestNeighbor",nN="ResizeNearestNeighborGrad",nT="ResizeBilinear",nC="ResizeBilinearGrad",n$="Relu6",nE="Reverse",nA="Round",nR="Rsqrt",nF="ScatterNd",nD="SearchSorted",n_="Select",nO="Selu",nM="Slice",nL="Sinh",nz="Sign",nP="Sigmoid",nB="Softplus",nW="Sqrt",nU="SpaceToBatchND",nV="SplitV",nG="Softmax",nH="SparseFillEmptyRows",nq="SparseReshape",nj="SparseSegmentMean",nK="SparseSegmentSum",nX="SparseToDense",nY="SquaredDifference",nZ="Square",nJ="StridedSlice",nQ="StringNGrams",n0="StringSplit",n1="StringToHashBucketFast",n2="Tanh",n3="Tile",n4="TopK",n6="Transform",n5="Transpose",n8="Unique",n7="Unpack",n9="UnsortedSegmentSum",re="ZerosLike",rt="Step",rn="FromPixels",rr="RotateWithOffset",ra="_FusedMatMul",rs="FusedConv2D",ri="FusedDepthwiseConv2D";var ro={};function rl(...e){eM.getBool("IS_TEST")||eM.getBool("PROD")||console.warn(...e)}function ru(...e){eM.getBool("IS_TEST")||eM.getBool("PROD")||console.log(...e)}l(ro,"warn",()=>rl),l(ro,"log",()=>ru);let rh=eY("kernelRegistry",()=>new Map),rp=eY("gradRegistry",()=>new Map);function rd(e,t){let n=function(e,t){return`${t}_${e}`}(e,t);return rh.get(n)}function rc(e){let t=rh.entries(),n=[];for(;;){let{done:r,value:a}=t.next();if(r)break;let[s,i]=a,[o]=s.split("_");o===e&&n.push(i)}return n}function rf(e){let{kernelName:t,backendName:n}=e,r=function(e,t){return`${t}_${e}`}(t,n);rh.has(r)&&rl(`The kernel '${t}' for backend '${n}' is already registered`),rh.set(r,e)}function rm(e,t){return`${t}_${e}`}var rg={};l(rg,"createScalarValue",()=>r1),l(rg,"encodeString",()=>r6),l(rg,"toTypedArray",()=>r2),l(rg,"now",()=>r3),l(rg,"fetch",()=>r4),l(rg,"decodeString",()=>r5);var ry={};l(ry,"hexToLong",()=>rG),l(ry,"fingerPrint64",()=>r0);var rb={};rb=rv;var rx=null;try{rx=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function rv(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function rk(e){return!0===(e&&e.__isLong__)}rv.prototype.__isLong__,Object.defineProperty(rv.prototype,"__isLong__",{value:!0}),rv.isLong=rk;var rw={},rI={};function rS(e,t){var n,r,a;if(t)return(e>>>=0,(a=0<=e&&e<256)&&(r=rI[e]))?r:(n=rT(e,(0|e)<0?-1:0,!0),a&&(rI[e]=n),n);return(e|=0,(a=-128<=e&&e<128)&&(r=rw[e]))?r:(n=rT(e,e<0?-1:0,!1),a&&(rw[e]=n),n)}function rN(e,t){if(isNaN(e))return t?rO:r_;if(t){if(e<0)return rO;if(e>=rR)return rB}else{if(e<=-rF)return rW;if(e+1>=rF)return rP}return e<0?rN(-e,t).neg():rT(e%rA|0,e/rA|0,t)}function rT(e,t,n){return new rv(e,t,n)}rv.fromInt=rS,rv.fromNumber=rN,rv.fromBits=rT;var rC=Math.pow;function r$(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return r_;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return r$(e.substring(1),t,n).neg();for(var r,a=rN(rC(n,8)),s=r_,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=rN(rC(n,o));s=s.mul(u).add(rN(l))}else s=(s=s.mul(a)).add(rN(l))}return s.unsigned=t,s}function rE(e,t){return"number"==typeof e?rN(e,t):"string"==typeof e?r$(e,t):rT(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}rv.fromString=r$,rv.fromValue=rE;var rA=0x100000000,rR=0xffffffffffffffff,rF=0x8000000000000000,rD=rS(0x1000000),r_=rS(0);rv.ZERO=r_;var rO=rS(0,!0);rv.UZERO=rO;var rM=rS(1);rv.ONE=rM;var rL=rS(1,!0);rv.UONE=rL;var rz=rS(-1);rv.NEG_ONE=rz;var rP=rT(-1,0x7fffffff,!1);rv.MAX_VALUE=rP;var rB=rT(-1,-1,!0);rv.MAX_UNSIGNED_VALUE=rB;var rW=rT(0,-0x80000000,!1);rv.MIN_VALUE=rW;var rU=rv.prototype;rU.toInt=function(){return this.unsigned?this.low>>>0:this.low},rU.toNumber=function(){return this.unsigned?(this.high>>>0)*rA+(this.low>>>0):this.high*rA+(this.low>>>0)},rU.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(!this.eq(rW))return"-"+this.neg().toString(e);else{var t=rN(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}for(var a=rN(rC(e,6),this.unsigned),s=this,i="";;){var o=s.div(a),l=(s.sub(o.mul(a)).toInt()>>>0).toString(e);if((s=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},rU.getHighBits=function(){return this.high},rU.getHighBitsUnsigned=function(){return this.high>>>0},rU.getLowBits=function(){return this.low},rU.getLowBitsUnsigned=function(){return this.low>>>0},rU.getNumBitsAbs=function(){if(this.isNegative())return this.eq(rW)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return 0!=this.high?t+33:t+1},rU.isZero=function(){return 0===this.high&&0===this.low},rU.eqz=rU.isZero,rU.isNegative=function(){return!this.unsigned&&this.high<0},rU.isPositive=function(){return this.unsigned||this.high>=0},rU.isOdd=function(){return(1&this.low)==1},rU.isEven=function(){return(1&this.low)==0},rU.equals=function(e){return rk(e)||(e=rE(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},rU.eq=rU.equals,rU.notEquals=function(e){return!this.eq(e)},rU.neq=rU.notEquals,rU.ne=rU.notEquals,rU.lessThan=function(e){return 0>this.comp(e)},rU.lt=rU.lessThan,rU.lessThanOrEqual=function(e){return 0>=this.comp(e)},rU.lte=rU.lessThanOrEqual,rU.le=rU.lessThanOrEqual,rU.greaterThan=function(e){return this.comp(e)>0},rU.gt=rU.greaterThan,rU.greaterThanOrEqual=function(e){return this.comp(e)>=0},rU.gte=rU.greaterThanOrEqual,rU.ge=rU.greaterThanOrEqual,rU.compare=function(e){if(rk(e)||(e=rE(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},rU.comp=rU.compare,rU.negate=function(){return!this.unsigned&&this.eq(rW)?rW:this.not().add(rM)},rU.neg=rU.negate,rU.add=function(e){rk(e)||(e=rE(e));var t,n,r=this.high>>>16,a=65535&this.high,s=this.low>>>16,i=65535&this.low,o=e.high>>>16,l=65535&e.high,u=e.low>>>16,h=65535&e.low,p=0,d=0;return t=0+((n=0+(i+h))>>>16),n&=65535,t+=s+u,d+=t>>>16,t&=65535,d+=a+l,p+=d>>>16,d&=65535,p+=r+o,rT(t<<16|n,(p&=65535)<<16|d,this.unsigned)},rU.subtract=function(e){return rk(e)||(e=rE(e)),this.add(e.neg())},rU.sub=rU.subtract,rU.multiply=function(e){if(this.isZero())return r_;if(rk(e)||(e=rE(e)),rx)return rT(rx.mul(this.low,this.high,e.low,e.high),rx.get_high(),this.unsigned);if(e.isZero())return r_;if(this.eq(rW))return e.isOdd()?rW:r_;if(e.eq(rW))return this.isOdd()?rW:r_;if(this.isNegative())if(e.isNegative())return this.neg().mul(e.neg());else return this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(rD)&&e.lt(rD))return rN(this.toNumber()*e.toNumber(),this.unsigned);var t,n,r=this.high>>>16,a=65535&this.high,s=this.low>>>16,i=65535&this.low,o=e.high>>>16,l=65535&e.high,u=e.low>>>16,h=65535&e.low,p=0,d=0;return t=0+((n=0+i*h)>>>16),n&=65535,t+=s*h,d+=t>>>16,t&=65535,t+=i*u,d+=t>>>16,t&=65535,d+=a*h,p+=d>>>16,d&=65535,d+=s*u,p+=d>>>16,d&=65535,d+=i*l,p+=d>>>16,d&=65535,p+=r*h+a*u+s*l+i*o,rT(t<<16|n,(p&=65535)<<16|d,this.unsigned)},rU.mul=rU.multiply,rU.divide=function(e){if(rk(e)||(e=rE(e)),e.isZero())throw Error("division by zero");if(rx){var t,n,r;return this.unsigned||-0x80000000!==this.high||-1!==e.low||-1!==e.high?rT((this.unsigned?rx.div_u:rx.div_s)(this.low,this.high,e.low,e.high),rx.get_high(),this.unsigned):this}if(this.isZero())return this.unsigned?rO:r_;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return rO;if(e.gt(this.shru(1)))return rL;r=rO}else{if(this.eq(rW))if(e.eq(rM)||e.eq(rz))return rW;else return e.eq(rW)?rM:(t=this.shr(1).div(e).shl(1)).eq(r_)?e.isNegative()?rM:rz:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(rW))return this.unsigned?rO:r_;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=r_}for(n=this;n.gte(e);){for(var a=Math.ceil(Math.log(t=Math.max(1,Math.floor(n.toNumber()/e.toNumber())))/Math.LN2),s=a<=48?1:rC(2,a-48),i=rN(t),o=i.mul(e);o.isNegative()||o.gt(n);)t-=s,o=(i=rN(t,this.unsigned)).mul(e);i.isZero()&&(i=rM),r=r.add(i),n=n.sub(o)}return r},rU.div=rU.divide,rU.modulo=function(e){return(rk(e)||(e=rE(e)),rx)?rT((this.unsigned?rx.rem_u:rx.rem_s)(this.low,this.high,e.low,e.high),rx.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},rU.mod=rU.modulo,rU.rem=rU.modulo,rU.not=function(){return rT(~this.low,~this.high,this.unsigned)},rU.and=function(e){return rk(e)||(e=rE(e)),rT(this.low&e.low,this.high&e.high,this.unsigned)},rU.or=function(e){return rk(e)||(e=rE(e)),rT(this.low|e.low,this.high|e.high,this.unsigned)},rU.xor=function(e){return rk(e)||(e=rE(e)),rT(this.low^e.low,this.high^e.high,this.unsigned)},rU.shiftLeft=function(e){return(rk(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?rT(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):rT(0,this.low<<e-32,this.unsigned)},rU.shl=rU.shiftLeft,rU.shiftRight=function(e){return(rk(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?rT(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):rT(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},rU.shr=rU.shiftRight,rU.shiftRightUnsigned=function(e){if(rk(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?rT(this.low>>>e|t<<32-e,t>>>e,this.unsigned):32===e?rT(t,0,this.unsigned):rT(t>>>e-32,0,this.unsigned)},rU.shru=rU.shiftRightUnsigned,rU.shr_u=rU.shiftRightUnsigned,rU.toSigned=function(){return this.unsigned?rT(this.low,this.high,!1):this},rU.toUnsigned=function(){return this.unsigned?this:rT(this.low,this.high,!0)},rU.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},rU.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},rU.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},rv.fromBytes=function(e,t,n){return n?rv.fromBytesLE(e,t):rv.fromBytesBE(e,t)},rv.fromBytesLE=function(e,t){return new rv(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},rv.fromBytesBE=function(e,t){return new rv(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};let rV=rb.default||rb;function rG(e){return rV.fromString(e,!0,16)}let rH=rG("c3a5c85c97cb3127"),rq=rG("b492b66fbe98f273"),rj=rG("9ae16a3b2f90404f");function rK(e){return e.xor(e.shru(47))}function rX(e,t,n){let r=e.slice(t,t+n);return rV.fromBytes(Array.from(r),!0,!0)}function rY(e,t){return rX(e,t,8)}function rZ(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function rJ(e,t,n=rG("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return(a=a.xor(a.shru(47))).mul(n)}function rQ(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=rZ(s.add(a).add(r),21);let i=a;return a=(a=a.add(t)).add(n),s=s.add(rZ(a,44)),[a.add(r),s.add(i)]}(rY(e,t),rY(e,t+8),rY(e,t+16),rY(e,t+24),n,r)}function r0(e,t=e.length){let n=rV.fromNumber(81,!0);if(t<=32)if(t<=16)return function(e,t=e.length){if(t>=8){let n=rj.add(2*t),r=rY(e,0).add(rj),a=rY(e,t-8);return rJ(rZ(a,37).mul(n).add(r),rZ(r,25).add(a).mul(n),n)}if(t>=4){let n=rj.add(2*t);return rJ(rX(e,0,4).shl(3).add(t),rX(e,t-4,4),n)}if(t>0){let n=e[0],r=e[t>>1],a=e[t-1];return rK(rj.mul(n+(r<<8)).xor(rH.mul(t+(a<<2)))).mul(rj)}return rj}(e,t);else return function(e,t=e.length){let n=rj.add(2*t),r=rY(e,0).mul(rq),a=rY(e,8),s=rY(e,t-8).mul(n),i=rY(e,t-16).mul(rj);return rJ(rZ(r.add(a),43).add(rZ(s,30)).add(i),r.add(rZ(a.add(rj),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){let n=rj.add(2*t),r=rY(e,0).mul(rj),a=rY(e,8),s=rY(e,t-8).mul(n),i=rY(e,t-16).mul(rj),o=rZ(r.add(a),43).add(rZ(s,30)).add(i),l=rJ(o,r.add(rZ(a.add(rj),18)).add(s),n),u=rY(e,16).mul(n),h=rY(e,24),p=o.add(rY(e,t-32)).mul(n),d=l.add(rY(e,t-24)).mul(n);return rJ(rZ(u.add(h),43).add(rZ(p,30)).add(d),u.add(rZ(h.add(r),18)).add(p),n)}(e,t);let r=n,a=n.mul(rq).add(113),s=rK(a.mul(rj).add(113)).mul(rj),i=[rV.UZERO,rV.UZERO],o=[rV.UZERO,rV.UZERO];r=r.mul(rj).add(rY(e,0));let l=0,u=(t-1>>6)*64,h=u+(t-1&63)-63;do r=rZ(r.add(a).add(i[0]).add(rY(e,l+8)),37).mul(rq),a=rZ(a.add(i[1]).add(rY(e,l+48)),42).mul(rq),r=r.xor(o[1]),a=a.add(i[0]).add(rY(e,l+40)),s=rZ(s.add(o[0]),33).mul(rq),i=rQ(e,l,i[1].mul(rq),r.add(o[0])),o=rQ(e,l+32,s.add(o[1]),a.add(rY(e,l+16))),[s,r]=[r,s],l+=64;while(l!==u)let p=rq.add(s.and(255).shl(1));return l=h,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),r=rZ(r.add(a).add(i[0]).add(rY(e,l+8)),37).mul(p),a=rZ(a.add(i[1]).add(rY(e,l+48)),42).mul(p),r=r.xor(o[1].mul(9)),a=a.add(i[0].mul(9).add(rY(e,l+40))),s=rZ(s.add(o[0]),33).mul(p),i=rQ(e,l,i[1].mul(p),r.add(o[0])),o=rQ(e,l+32,s.add(o[1]),a.add(rY(e,l+16))),[s,r]=[r,s],rJ(rJ(i[0],o[0],p).add(rK(a).mul(rH)).add(s),rJ(i[1],o[1],p).add(r),p)}function r1(e,t){return"string"===t?r6(e):r2([e],t)}function r2(e,t){var n;if("string"===t)throw Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Z(e)),eM.getBool("DEBUG")&&ed(e,t),(n=e)instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t)return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){let t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw Error(`Unknown data type ${t}`)}function r3(){return eM.platform.now()}function r4(e,t){return eM.platform.fetch(e,t)}function r6(e,t="utf-8"){return t=t||"utf-8",eM.platform.encode(e,t)}function r5(e,t="utf-8"){return t=t||"utf-8",eM.platform.decode(e,t)}R(rg,P),R(rg,ry);class r8{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new r7)}profileKernel(e,t,n){let r,a,s=()=>{r=n()},i=r3();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{for(let e of(s(),r))e.dataSync();a=Promise.resolve({kernelMs:r3()-i})}if(eM.getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){let n=r[t];n.data().then(t=>{!function(e,t,n){if("float32"===t)for(let t=0;t<e.length;t++){let r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(t,n.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){let{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach(e=>{Promise.all([e.data(),r,s]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])})})}}class r7{logKernelProfile(e,t,n,r,a,s){let i="number"==typeof r?es(`${r}ms`,9):r.error,o=es(e,25),l=t.rank,u=t.size,h=es(t.shape.toString(),14),p="";for(let e in a){let n=a[e];if(null!=n){let r=n.shape||t.shape,a=r.length;p+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${o}	%c${i}	%c${l}D ${h}	%c${u}	%c${p}	%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function r9(e,t,n){let r;return es(Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:eb(e)?`'${e}'`:"bool"===n?ae(e):parseFloat(e.toFixed(7)).toString(),t)}function ae(e){return 0===e?"false":"true"}function at(e){let t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class an{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=J(e),null!=n){let e=n.length;K(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||ep(t,this.size),this.strides=eS(e)}set(e,...t){0===t.length&&(t=[0]),K(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);let n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(let n of e){if(n<0||n>=this.shape[t])throw Error(`Requested out of range element at ${e}.   Buffer shape=${this.shape}`);t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];let t=Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return ar().makeTensor(this.values,this.shape,this.dtype)}}let ar=null,aa=null;class as{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=J(e),this.strides=eS(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let e=await this.data();return aa.buffer(this.shape,this.dtype,e)}bufferSync(){return aa.buffer(this.shape,this.dtype,this.dataSync())}async array(){let e=await this.data();return eN(this.shape,e,"complex64"===this.dtype)}arraySync(){return eN(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();let e=ar().read(this.dataId);if("string"===this.dtype){let t=await e;try{return t.map(e=>r5(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),ar().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();let e=ar().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>r5(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();let e=await ar().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(ar().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw Error("Tensor is disposed.")}print(e=!1){return aa.print(this,e)}clone(){return this.throwIfDisposed(),aa.clone(this)}toString(e=!1){return function(e,t,n,r){let a=eS(t),s=function(e,t,n,r){let a=J(t),s=r[r.length-1],i=Array(s).fill(0),o=t.length,l="complex64"===n?at(e):e;if(o>1)for(let e=0;e<a/s;e++){let t=e*s;for(let e=0;e<s;e++)i[e]=Math.max(i[e],r9(l[t+e],0,n).length)}return i}(e,t,n,a),i=t.length,o=function e(t,n,r,a,s,i=!0){let o="complex64"===r?2:1,l=n[0],u=n.length;if(0===u)return"complex64"===r?[r9(at(t)[0],0,r)]:"bool"===r?[ae(t[0])]:[t[0].toString()];if(1===u){if(l>20){let e=Array.from(t.slice(0,3*o)),n=Array.from(t.slice((l-3)*o,l*o));return"complex64"===r&&(e=at(e),n=at(n)),["["+e.map((e,t)=>r9(e,s[t],r)).join(", ")+", ..., "+n.map((e,t)=>r9(e,s[l-3+t],r)).join(", ")+"]"]}return["["+("complex64"===r?at(t):Array.from(t)).map((e,t)=>r9(e,s[t],r)).join(", ")+"]"]}let h=n.slice(1),p=a.slice(1),d=a[0]*o,c=[];if(l>20){for(let n=0;n<3;n++){let a=n*d,i=a+d;c.push(...e(t.slice(a,i),h,r,p,s,!1))}c.push("...");for(let n=l-3;n<l;n++){let a=n*d,i=a+d;c.push(...e(t.slice(a,i),h,r,p,s,n===l-1))}}else for(let n=0;n<l;n++){let a=n*d,i=a+d;c.push(...e(t.slice(a,i),h,r,p,s,n===l-1))}let f=2===u?",":"";c[0]="["+c[0]+f;for(let e=1;e<c.length-1;e++)c[e]=" "+c[e]+f;let m=",\n";for(let e=2;e<u;e++)m+="\n";return c[c.length-1]=" "+c[c.length-1]+"]"+(i?"":m),c}(e,t,n,a,s),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map(e=>"    "+e).join("\n")),l.join("\n")}(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),aa.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),ar().makeVariable(this,e,t,n)}}function ai(){return eY("Tensor",()=>as)}Object.defineProperty(as,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ai();class ao extends as{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!ee(e.shape,this.shape))throw Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);ar().disposeTensor(this),this.dataId=e.dataId,ar().incRef(this,null)}dispose(){ar().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(ao,Symbol.hasInstance,{value:e=>e instanceof as&&null!=e.assign&&e.assign instanceof Function});var al={};l(al,"makeTypesMatch",()=>ad),l(al,"assertTypesMatch",()=>ac),l(al,"isTensorInList",()=>af),l(al,"getTensorsInContainer",()=>am),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(d||(d={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(c||(c={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(f||(f={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(m||(m={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(g||(g={}));let au={float32:m,int32:c,bool:f,complex64:g};function ah(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw Error(`Can not upcast ${e} with ${t}`)}return au[e][t]}function ap(e){return ah(e,"int32")}function ad(e,t){if(e.dtype===t.dtype)return[e,t];let n=ah(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ac(e,t){K(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function af(e,t){return t.some(t=>t.id===e.id)}function am(e){let t=[];return function e(t,n,r){var a;if(null!=t){if(t instanceof as)return void n.push(t);if(Array.isArray(a=t)||"object"==typeof a)for(let a in t){let s=t[a];r.has(s)||(r.add(s),e(s,n,r))}}}(e,t,new Set),t}function ag(e){return null!=e.kernelName}class ay{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(let e in this.registeredVariables)this.registeredVariables[e].dispose()}}class ab{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ay}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){let{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry))if(!(e in this.registryFactory))return null;else{let{asyncInit:t}=this.initializeBackend(e);if(t)return null}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(rl(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;let{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new r8(this.backendInstance),!0}setupRegisteredKernels(){rc(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){rc(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){let t=this.registryFactory[e];if(null==t)throw Error(`Cannot initialize backend ${e}, no registration found.`);try{let n=t.factory();if(!n||n instanceof L||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{let t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0)).catch(n=>!(t<this.pendingBackendInitId)&&(this.pendingBackendInit=null,rl(`Initialization of backend ${e} failed`),rl(n.stack||n.message),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return rl(`Initialization of backend ${e} failed`),rl(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){let n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>((n=t())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{let e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return ab.nextTensorId++}nextVariableId(){return ab.nextVariableId++}clone(e){let t=av.runKernel(tH,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>av.runKernel(ts,{x:e},{dtype:"float32"})}),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==rd(e,this.backendName))throw Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){let r=this.backend.numDataIds(),a=0;n.forEach(e=>{a+="complex64"===e.dtype?3:1});let s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-t-a-s;if(i>0)throw Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n,r,a,s=[],i=this.isTapeOn(),o=this.state.numBytes,l=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;let u=ag(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(ag(e)){let{kernelName:t,inputs:a,attrs:o}=e;null==this.backendName&&this.backend;let l=rd(t,this.backendName);K(null!=l,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),n=()=>{let e=this.backend.numDataIds(),n=Array.isArray(r=l.kernelFunc({inputs:a,attrs:o,backend:this.backend}))?r:[r];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,n);let u=n.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(i){let e=this.getTensorsForGradient(t,a,u);s=this.saveTensorsForBackwardMode(e)}return u}}else{let{forwardFunc:t}=e,a=e=>{i&&(s=e.map(e=>this.keep(this.clone(e))))};n=()=>{let e=this.backend.numDataIds(),n=Array.isArray(r=this.tidy(()=>t(this.backend,a)))?r:[r];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}let{inputs:h,attrs:p}=e,d=ag(e)?null:e.backwardsFunc;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(a=this.profiler.profileKernel(u,h,()=>n()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(a),t=a.outputs):t=n()}),i&&this.addTapeNode(u,h,t,d,s,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-l,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(e=>null!=h[e]?h[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:a.timeMs,extraInfo:a.extraInfo}),Array.isArray(r)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){let r=rp.get(e);if(null!=r){let e,a=r.inputsToSave||[],s=r.outputsToSave||[];r.saveAllInputs?(K(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),e=Object.keys(t).map(e=>t[e])):e=a.map(e=>t[e]);let i=n.filter((e,t)=>s[t]);return e.concat(i)}return[]}makeTensor(e,t,n,r){if(null==e)throw Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&eb(e[0])&&(a=e.map(e=>r6(e)));let s=r.write(a,t,n),i=new as(t,n,s,this.nextTensorId());if(this.trackTensor(i,r),"string"===n){let e=this.state.tensorInfo.get(s),t=ey(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){let a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,r)}makeTensorFromTensorInfo(e,t){let{dataId:n,shape:r,dtype:a}=e,s=new as(r,a,n,this.nextTensorId());return this.trackTensor(s,t),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));let a=new ao(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*eg(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof ao||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;let t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){let t=e.size*eg(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(let e in this.state.registeredVariables){let t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){let e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;let t=this.state.numBytes,n=this.state.numTensors;for(let r of(this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile.kernels))r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){let i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},o=rp.get(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){let e=n[t],r=eC(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){let t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){let t=am(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){let t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}let r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(K(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);let a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));K(a instanceof as,()=>"The result y returned by f() must be a tensor.");let s=function(e,t,n){let r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){let s=e[n],i=s.inputs;for(let e in i){let n=i[e],o=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach(e=>r[e.id]=!0),o=!0,a[s.id]=!0;break}if(o)break}}let s={};s[n.id]=!0;let i={};for(let t=e.length-1;t>=0;t--){let n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(let e in r)s[r[e].id]=!0,i[n.id]=!0;break}}let o=[];for(let t=0;t<e.length;t++){let n=e[t];if(a[n.id]&&i[n.id]){let e={};for(let t in n.inputs){let a=n.inputs[t];r[a.id]&&(e[t]=a)}let t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let e={};e[a.id]=null==n?function(e){let t=eT(J(e),"float32");return av.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){let s=t[a],i=[];if(s.outputs.forEach(t=>{let n=e[t.id];null!=n?i.push(n):i.push(null)}),null==s.gradient)throw Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let o=s.gradient(i);for(let t in s.inputs){if(!(t in o))throw Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);let a=n(()=>o[t]());if("float32"!==a.dtype)throw Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);let i=s.inputs[t];if(!ee(a.shape,i.shape))throw Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=a;else{let t=e[i.id];e[i.id]=r(t,a),t.dispose()}}}}(e,s,e=>this.tidy(e),ak);let r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(let t of e.saved)t.dispose()}),this.state.activeTape=null),{value:a,grads:r}})}customGrad(e){return K(ew(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;K(t.every(e=>e instanceof as),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc({forwardFunc:(r,a)=>(K((n=e(...t,a)).value instanceof as,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),K(ew(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,r)=>{let a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];K(s.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),K(s.every(e=>e instanceof as),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let i={};return s.forEach((e,t)=>{i[t]=()=>e}),i},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){let t=r3(),n=await this.backend.time(e);return n.wallMs=r3()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){for(let e in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ay,this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function ax(){let e=eX();if(null==e._tfengine){let t=new e_(e);e._tfengine=new ab(t)}return eM=e._tfengine.ENV,ar=()=>e._tfengine,e._tfengine}ab.nextTensorId=0,ab.nextVariableId=0;let av=ax();function ak(e,t){return av.runKernel("Add",{a:e,b:t})}var aw={};function aI(e){t=e}function aS(e){if(void 0!==t)return t;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;let t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){let t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function aN(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}l(aw,"mockIsMobile",()=>aI),l(aw,"isMobile",()=>aS),l(aw,"isBrowser",()=>aN);let aT=eM;function aC(e,t){let n=e;if(em(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];let r=[];for(;Array.isArray(n)||em(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&eM.getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],!Array.isArray(t)&&!em(t))return void K(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);K(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${t.length} elements`),K(t.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${t.length} elements`);let a=n.slice(1);for(let n=0;n<t.length;++n)e(t[n],a,r.concat(n))}(e,r,[]),r}function a$(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function aE(e,t,n,r="numeric"){if(e instanceof as)return a$(r,e.dtype,t,n),e;let a=ek(e);if("string"!==a&&["bool","int32","float32"].indexOf(r)>=0&&(a=r),a$(r,a,t,n),null==e||!em(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){let r=null==e?"null":e.constructor.name;throw Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}let s=aC(e,a);em(e)||Array.isArray(e)||(e=[e]);let i="string"!==a?r2(e,a):Z(e,[],!0);return av.makeTensor(i,s,a)}function aA(e,t,n,r="numeric"){if(!Array.isArray(e))throw Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,a)=>aE(e,`${t}[${a}]`,n,r))}aT.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),aT.registerFlag("IS_BROWSER",()=>aN()),aT.registerFlag("IS_NODE",()=>!1),aT.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),aT.registerFlag("PROD",()=>!1),aT.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>aT.getBool("DEBUG")),aT.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),aT.registerFlag("IS_TEST",()=>!1),aT.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),aT.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),aT.registerFlag("ENGINE_COMPILE_ONLY",()=>!1),aT.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),aT.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);let aR="__op";function aF(e){let t=Object.keys(e);if(1!==t.length)throw Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0],r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));let a=(...e)=>{av.startScope(n);try{let t=r(...e);return eF(t)&&console.error("Cannot return a Promise inside of tidy."),av.endScope(t),t}catch(e){throw av.endScope(null),e}};return Object.defineProperty(a,"name",{value:n+=aR,configurable:!0}),a}let aD=aF({complex_:function(e,t){let n=aE(e,"real","complex"),r=aE(t,"imag","complex");return X(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`),av.runKernel(tl,{real:n,imag:r})}});function a_(e,t,n,r){if(null==r&&(r=ek(e)),"complex64"===r)throw Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!em(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){eE(t);let e=J(t),r=J(n);K(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let e=0;e<n.length;++e){let r=n[e],a=e!==n.length-1||r!==J(t.slice(e));K(n[e]===t[e]||!a,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return em(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?r2(e,r):Z(e,[],!0),av.makeTensor(e,t,r)}function aO(e,t,n){let r=aC(e,n);return a_(e,t,r,n)}"use strict";"use strict";let aM={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};y=function(e){for(var t,n=e.length,r=n%3,a=[],s=0,i=n-r;s<i;s+=16383)a.push(function(e,t,n){for(var r,a=[],s=t;s<n;s+=3)r=(e[s]<<16&0xff0000)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(aL[r>>18&63]+aL[r>>12&63]+aL[r>>6&63]+aL[63&r]);return a.join("")}(e,s,s+16383>i?i:s+16383));return 1===r?a.push(aL[(t=e[n-1])>>2]+aL[t<<4&63]+"=="):2===r&&a.push(aL[(t=(e[n-2]<<8)+e[n-1])>>10]+aL[t>>4&63]+aL[t<<2&63]+"="),a.join("")};for(var aL=[],az=[],aP="undefined"!=typeof Uint8Array?Uint8Array:Array,aB="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",aW=0,aU=aB.length;aW<aU;++aW)aL[aW]=aB[aW],az[aB.charCodeAt(aW)]=aW;function aV(e){var t=e.length;if(t%4>0)throw Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");-1===n&&(n=t);var r=n===t?0:4-n%4;return[n,r]}az[45]=62,az[95]=63,b=function(e,t,n,r,a){var s,i,o=8*a-r-1,l=(1<<o)-1,u=l>>1,h=-7,p=n?a-1:0,d=n?-1:1,c=e[t+p];for(p+=d,s=c&(1<<-h)-1,c>>=-h,h+=o;h>0;s=256*s+e[t+p],p+=d,h-=8);for(i=s&(1<<-h)-1,s>>=-h,h+=r;h>0;i=256*i+e[t+p],p+=d,h-=8);if(0===s)s=1-u;else{if(s===l)return i?NaN:1/0*(c?-1:1);i+=Math.pow(2,r),s-=u}return(c?-1:1)*i*Math.pow(2,s-r)},x=function(e,t,n,r,a,s){var i,o,l,u=8*s-a-1,h=(1<<u)-1,p=h>>1,d=5960464477539062e-23*(23===a),c=r?0:s-1,f=r?1:-1,m=+(t<0||0===t&&1/t<0);for(isNaN(t=Math.abs(t))||t===1/0?(o=+!!isNaN(t),i=h):(i=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-i))<1&&(i--,l*=2),i+p>=1?t+=d/l:t+=d*Math.pow(2,1-p),t*l>=2&&(i++,l/=2),i+p>=h?(o=0,i=h):i+p>=1?(o=(t*l-1)*Math.pow(2,a),i+=p):(o=t*Math.pow(2,p-1)*Math.pow(2,a),i=0));a>=8;e[n+c]=255&o,c+=f,o/=256,a-=8);for(i=i<<a|o,u+=a;u>0;e[n+c]=255&i,c+=f,i/=256,u-=8);e[n+c-f]|=128*m};let aG="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;function aH(e){if(e>0x7fffffff)throw RangeError('The value "'+e+'" is invalid for option "size"');let t=new Uint8Array(e);return Object.setPrototypeOf(t,aq.prototype),t}function aq(e,t,n){if("number"==typeof e){if("string"==typeof t)throw TypeError('The "string" argument must be of type string. Received type number');return aX(e)}return aj(e,t,n)}function aj(e,t,n){if("string"==typeof e){var r=e,a=t;if(("string"!=typeof a||""===a)&&(a="utf8"),!aq.isEncoding(a))throw TypeError("Unknown encoding: "+a);let n=0|aQ(r,a),s=aH(n),i=s.write(r,a);return i!==n&&(s=s.slice(0,i)),s}if(ArrayBuffer.isView(e)){var s=e;if(sd(s,Uint8Array)){let e=new Uint8Array(s);return aZ(e.buffer,e.byteOffset,e.byteLength)}return aY(s)}if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(sd(e,ArrayBuffer)||e&&sd(e.buffer,ArrayBuffer)||"undefined"!=typeof SharedArrayBuffer&&(sd(e,SharedArrayBuffer)||e&&sd(e.buffer,SharedArrayBuffer)))return aZ(e,t,n);if("number"==typeof e)throw TypeError('The "value" argument must not be of type number. Received type number');let i=e.valueOf&&e.valueOf();if(null!=i&&i!==e)return aq.from(i,t,n);let o=function(e){if(aq.isBuffer(e)){let t=0|aJ(e.length),n=aH(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||function(e){return e!=e}(e.length)?aH(0):aY(e):"Buffer"===e.type&&Array.isArray(e.data)?aY(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return aq.from(e[Symbol.toPrimitive]("string"),t,n);throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function aK(e){if("number"!=typeof e)throw TypeError('"size" argument must be of type number');if(e<0)throw RangeError('The value "'+e+'" is invalid for option "size"')}function aX(e){return aK(e),aH(e<0?0:0|aJ(e))}function aY(e){let t=e.length<0?0:0|aJ(e.length),n=aH(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function aZ(e,t,n){let r;if(t<0||e.byteLength<t)throw RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw RangeError('"length" is outside of buffer bounds');return Object.setPrototypeOf(r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),aq.prototype),r}function aJ(e){if(e>=0x7fffffff)throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");return 0|e}aq.TYPED_ARRAY_SUPPORT=function(){try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),aq.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(aq.prototype,"parent",{enumerable:!0,get:function(){if(aq.isBuffer(this))return this.buffer}}),Object.defineProperty(aq.prototype,"offset",{enumerable:!0,get:function(){if(aq.isBuffer(this))return this.byteOffset}}),aq.poolSize=8192,aq.from=function(e,t,n){return aj(e,t,n)},Object.setPrototypeOf(aq.prototype,Uint8Array.prototype),Object.setPrototypeOf(aq,Uint8Array),aq.alloc=function(e,t,n){return(aK(e),e<=0)?aH(e):void 0!==t?"string"==typeof n?aH(e).fill(t,n):aH(e).fill(t):aH(e)},aq.allocUnsafe=function(e){return aX(e)},aq.allocUnsafeSlow=function(e){return aX(e)};function aQ(e,t){if(aq.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||sd(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let a=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return su(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return sh(e).length;default:if(a)return r?-1:su(e).length;t=(""+t).toLowerCase(),a=!0}}function a0(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===n||n>this.length)&&(n=this.length),n<=0||(n>>>=0)<=(t>>>=0)))return"";for(e||(e="utf8");;)switch(e){case"hex":return function(e,t,n){let r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let a="";for(let r=t;r<n;++r)a+=sc[e[r]];return a}(this,t,n);case"utf8":case"utf-8":return a4(this,t,n);case"ascii":return function(e,t,n){let r="";n=Math.min(e.length,n);for(let a=t;a<n;++a)r+=String.fromCharCode(127&e[a]);return r}(this,t,n);case"latin1":case"binary":return function(e,t,n){let r="";n=Math.min(e.length,n);for(let a=t;a<n;++a)r+=String.fromCharCode(e[a]);return r}(this,t,n);case"base64":var a,s,i;return a=this,s=t,i=n,0===s&&i===a.length?y(a):y(a.slice(s,i));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return function(e,t,n){let r=e.slice(t,n),a="";for(let e=0;e<r.length-1;e+=2)a+=String.fromCharCode(r[e]+256*r[e+1]);return a}(this,t,n);default:if(r)throw TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function a1(e,t,n){let r=e[t];e[t]=e[n],e[n]=r}function a2(e,t,n,r,a){var s;if(0===e.length)return -1;if("string"==typeof n?(r=n,n=0):n>0x7fffffff?n=0x7fffffff:n<-0x80000000&&(n=-0x80000000),(s=n*=1)!=s&&(n=a?0:e.length-1),n<0&&(n=e.length+n),n>=e.length)if(a)return -1;else n=e.length-1;else if(n<0)if(!a)return -1;else n=0;if("string"==typeof t&&(t=aq.from(t,r)),aq.isBuffer(t))return 0===t.length?-1:a3(e,t,n,r,a);if("number"==typeof t){if(t&=255,"function"==typeof Uint8Array.prototype.indexOf)if(a)return Uint8Array.prototype.indexOf.call(e,t,n);else return Uint8Array.prototype.lastIndexOf.call(e,t,n);return a3(e,[t],n,r,a)}throw TypeError("val must be string, number or Buffer")}function a3(e,t,n,r,a){let s,i=1,o=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return -1;i=2,o/=2,l/=2,n/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(a){let r=-1;for(s=n;s<o;s++)if(u(e,s)===u(t,-1===r?0:s-r)){if(-1===r&&(r=s),s-r+1===l)return r*i}else -1!==r&&(s-=s-r),r=-1}else for(n+l>o&&(n=o-l),s=n;s>=0;s--){let n=!0;for(let r=0;r<l;r++)if(u(e,s+r)!==u(t,r)){n=!1;break}if(n)return s}return -1}function a4(e,t,n){n=Math.min(e.length,n);let r=[],a=t;for(;a<n;){let t=e[a],s=null,i=t>239?4:t>223?3:t>191?2:1;if(a+i<=n){let n,r,o,l;switch(i){case 1:t<128&&(s=t);break;case 2:(192&(n=e[a+1]))==128&&(l=(31&t)<<6|63&n)>127&&(s=l);break;case 3:n=e[a+1],r=e[a+2],(192&n)==128&&(192&r)==128&&(l=(15&t)<<12|(63&n)<<6|63&r)>2047&&(l<55296||l>57343)&&(s=l);break;case 4:n=e[a+1],r=e[a+2],o=e[a+3],(192&n)==128&&(192&r)==128&&(192&o)==128&&(l=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&o)>65535&&l<1114112&&(s=l)}}null===s?(s=65533,i=1):s>65535&&(s-=65536,r.push(s>>>10&1023|55296),s=56320|1023&s),r.push(s),a+=i}var s=r;let i=s.length;if(i<=4096)return String.fromCharCode.apply(String,s);let o="",l=0;for(;l<i;)o+=String.fromCharCode.apply(String,s.slice(l,l+=4096));return o}function a6(e,t,n){if(e%1!=0||e<0)throw RangeError("offset is not uint");if(e+t>n)throw RangeError("Trying to access beyond buffer length")}function a5(e,t,n,r,a,s){if(!aq.isBuffer(e))throw TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<s)throw RangeError('"value" argument is out of bounds');if(n+r>e.length)throw RangeError("Index out of range")}function a8(e,t,n,r,a){ss(t,r,a,e,n,7);let s=Number(t&BigInt(0xffffffff));e[n++]=s,s>>=8,e[n++]=s,s>>=8,e[n++]=s,s>>=8,e[n++]=s;let i=Number(t>>BigInt(32)&BigInt(0xffffffff));return e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,n}function a7(e,t,n,r,a){ss(t,r,a,e,n,7);let s=Number(t&BigInt(0xffffffff));e[n+7]=s,s>>=8,e[n+6]=s,s>>=8,e[n+5]=s,s>>=8,e[n+4]=s;let i=Number(t>>BigInt(32)&BigInt(0xffffffff));return e[n+3]=i,i>>=8,e[n+2]=i,i>>=8,e[n+1]=i,i>>=8,e[n]=i,n+8}function a9(e,t,n,r,a,s){if(n+r>e.length||n<0)throw RangeError("Index out of range")}function se(e,t,n,r,a){return t*=1,n>>>=0,a||a9(e,t,n,4,34028234663852886e22,-34028234663852886e22),x(e,t,n,r,23,4),n+4}function st(e,t,n,r,a){return t*=1,n>>>=0,a||a9(e,t,n,8,17976931348623157e292,-17976931348623157e292),x(e,t,n,r,52,8),n+8}aq.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==aq.prototype},aq.compare=function(e,t){if(sd(e,Uint8Array)&&(e=aq.from(e,e.offset,e.byteLength)),sd(t,Uint8Array)&&(t=aq.from(t,t.offset,t.byteLength)),!aq.isBuffer(e)||!aq.isBuffer(t))throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let a=0,s=Math.min(n,r);a<s;++a)if(e[a]!==t[a]){n=e[a],r=t[a];break}return n<r?-1:+(r<n)},aq.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},aq.concat=function(e,t){let n;if(!Array.isArray(e))throw TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return aq.alloc(0);if(void 0===t)for(n=0,t=0;n<e.length;++n)t+=e[n].length;let r=aq.allocUnsafe(t),a=0;for(n=0;n<e.length;++n){let t=e[n];if(sd(t,Uint8Array))a+t.length>r.length?(aq.isBuffer(t)||(t=aq.from(t)),t.copy(r,a)):Uint8Array.prototype.set.call(r,t,a);else if(aq.isBuffer(t))t.copy(r,a);else throw TypeError('"list" argument must be an Array of Buffers');a+=t.length}return r},aq.byteLength=aQ,aq.prototype._isBuffer=!0,aq.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)a1(this,t,t+1);return this},aq.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)a1(this,t,t+3),a1(this,t+1,t+2);return this},aq.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)a1(this,t,t+7),a1(this,t+1,t+6),a1(this,t+2,t+5),a1(this,t+3,t+4);return this},aq.prototype.toString=function(){let e=this.length;return 0===e?"":0==arguments.length?a4(this,0,e):a0.apply(this,arguments)},aq.prototype.toLocaleString=aq.prototype.toString,aq.prototype.equals=function(e){if(!aq.isBuffer(e))throw TypeError("Argument must be a Buffer");return this===e||0===aq.compare(this,e)},aq.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},aG&&(aq.prototype[aG]=aq.prototype.inspect),aq.prototype.compare=function(e,t,n,r,a){if(sd(e,Uint8Array)&&(e=aq.from(e,e.offset,e.byteLength)),!aq.isBuffer(e))throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===a&&(a=this.length),t<0||n>e.length||r<0||a>this.length)throw RangeError("out of range index");if(r>=a&&t>=n)return 0;if(r>=a)return -1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,a>>>=0,this===e)return 0;let s=a-r,i=n-t,o=Math.min(s,i),l=this.slice(r,a),u=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==u[e]){s=l[e],i=u[e];break}return s<i?-1:+(i<s)},aq.prototype.includes=function(e,t,n){return -1!==this.indexOf(e,t,n)},aq.prototype.indexOf=function(e,t,n){return a2(this,e,t,n,!0)},aq.prototype.lastIndexOf=function(e,t,n){return a2(this,e,t,n,!1)},aq.prototype.write=function(e,t,n,r){var a,s,i,o,l,u,h,p;if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else if(isFinite(t))t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0);else throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let d=this.length-t;if((void 0===n||n>d)&&(n=d),e.length>0&&(n<0||t<0)||t>this.length)throw RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let c=!1;for(;;)switch(r){case"hex":return function(e,t,n,r){let a;n=Number(n)||0;let s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;let i=t.length;for(r>i/2&&(r=i/2),a=0;a<r;++a){var o;let r=parseInt(t.substr(2*a,2),16);if((o=r)!=o)break;e[n+a]=r}return a}(this,e,t,n);case"utf8":case"utf-8":return a=t,s=n,sp(su(e,this.length-a),this,a,s);case"ascii":case"latin1":case"binary":return i=t,o=n,sp(function(e){let t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(e),this,i,o);case"base64":return l=t,u=n,sp(sh(e),this,l,u);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return h=t,p=n,sp(function(e,t){let n,r,a=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=(n=e.charCodeAt(s))>>8,a.push(n%256),a.push(r);return a}(e,this.length-h),this,h,p);default:if(c)throw TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),c=!0}},aq.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},aq.prototype.slice=function(e,t){let n=this.length;e=~~e,t=void 0===t?n:~~t,e<0?(e+=n)<0&&(e=0):e>n&&(e=n),t<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);let r=this.subarray(e,t);return Object.setPrototypeOf(r,aq.prototype),r},aq.prototype.readUintLE=aq.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||a6(e,t,this.length);let r=this[e],a=1,s=0;for(;++s<t&&(a*=256);)r+=this[e+s]*a;return r},aq.prototype.readUintBE=aq.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||a6(e,t,this.length);let r=this[e+--t],a=1;for(;t>0&&(a*=256);)r+=this[e+--t]*a;return r},aq.prototype.readUint8=aq.prototype.readUInt8=function(e,t){return e>>>=0,t||a6(e,1,this.length),this[e]},aq.prototype.readUint16LE=aq.prototype.readUInt16LE=function(e,t){return e>>>=0,t||a6(e,2,this.length),this[e]|this[e+1]<<8},aq.prototype.readUint16BE=aq.prototype.readUInt16BE=function(e,t){return e>>>=0,t||a6(e,2,this.length),this[e]<<8|this[e+1]},aq.prototype.readUint32LE=aq.prototype.readUInt32LE=function(e,t){return e>>>=0,t||a6(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+0x1000000*this[e+3]},aq.prototype.readUint32BE=aq.prototype.readUInt32BE=function(e,t){return e>>>=0,t||a6(e,4,this.length),0x1000000*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},aq.prototype.readBigUInt64LE=sf(function(e){si(e>>>=0,"offset");let t=this[e],n=this[e+7];(void 0===t||void 0===n)&&so(e,this.length-8);let r=t+256*this[++e]+65536*this[++e]+0x1000000*this[++e],a=this[++e]+256*this[++e]+65536*this[++e]+0x1000000*n;return BigInt(r)+(BigInt(a)<<BigInt(32))}),aq.prototype.readBigUInt64BE=sf(function(e){si(e>>>=0,"offset");let t=this[e],n=this[e+7];(void 0===t||void 0===n)&&so(e,this.length-8);let r=0x1000000*t+65536*this[++e]+256*this[++e]+this[++e],a=0x1000000*this[++e]+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(a)}),aq.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||a6(e,t,this.length);let r=this[e],a=1,s=0;for(;++s<t&&(a*=256);)r+=this[e+s]*a;return r>=(a*=128)&&(r-=Math.pow(2,8*t)),r},aq.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||a6(e,t,this.length);let r=t,a=1,s=this[e+--r];for(;r>0&&(a*=256);)s+=this[e+--r]*a;return s>=(a*=128)&&(s-=Math.pow(2,8*t)),s},aq.prototype.readInt8=function(e,t){return(e>>>=0,t||a6(e,1,this.length),128&this[e])?-((255-this[e]+1)*1):this[e]},aq.prototype.readInt16LE=function(e,t){e>>>=0,t||a6(e,2,this.length);let n=this[e]|this[e+1]<<8;return 32768&n?0xffff0000|n:n},aq.prototype.readInt16BE=function(e,t){e>>>=0,t||a6(e,2,this.length);let n=this[e+1]|this[e]<<8;return 32768&n?0xffff0000|n:n},aq.prototype.readInt32LE=function(e,t){return e>>>=0,t||a6(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},aq.prototype.readInt32BE=function(e,t){return e>>>=0,t||a6(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},aq.prototype.readBigInt64LE=sf(function(e){si(e>>>=0,"offset");let t=this[e],n=this[e+7];return(void 0===t||void 0===n)&&so(e,this.length-8),(BigInt(this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24))<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+0x1000000*this[++e])}),aq.prototype.readBigInt64BE=sf(function(e){si(e>>>=0,"offset");let t=this[e],n=this[e+7];return(void 0===t||void 0===n)&&so(e,this.length-8),(BigInt((t<<24)+65536*this[++e]+256*this[++e]+this[++e])<<BigInt(32))+BigInt(0x1000000*this[++e]+65536*this[++e]+256*this[++e]+n)}),aq.prototype.readFloatLE=function(e,t){return e>>>=0,t||a6(e,4,this.length),b(this,e,!0,23,4)},aq.prototype.readFloatBE=function(e,t){return e>>>=0,t||a6(e,4,this.length),b(this,e,!1,23,4)},aq.prototype.readDoubleLE=function(e,t){return e>>>=0,t||a6(e,8,this.length),b(this,e,!0,52,8)},aq.prototype.readDoubleBE=function(e,t){return e>>>=0,t||a6(e,8,this.length),b(this,e,!1,52,8)},aq.prototype.writeUintLE=aq.prototype.writeUIntLE=function(e,t,n,r){if(e*=1,t>>>=0,n>>>=0,!r){let r=Math.pow(2,8*n)-1;a5(this,e,t,n,r,0)}let a=1,s=0;for(this[t]=255&e;++s<n&&(a*=256);)this[t+s]=e/a&255;return t+n},aq.prototype.writeUintBE=aq.prototype.writeUIntBE=function(e,t,n,r){if(e*=1,t>>>=0,n>>>=0,!r){let r=Math.pow(2,8*n)-1;a5(this,e,t,n,r,0)}let a=n-1,s=1;for(this[t+a]=255&e;--a>=0&&(s*=256);)this[t+a]=e/s&255;return t+n},aq.prototype.writeUint8=aq.prototype.writeUInt8=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,1,255,0),this[t]=255&e,t+1},aq.prototype.writeUint16LE=aq.prototype.writeUInt16LE=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},aq.prototype.writeUint16BE=aq.prototype.writeUInt16BE=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},aq.prototype.writeUint32LE=aq.prototype.writeUInt32LE=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,4,0xffffffff,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},aq.prototype.writeUint32BE=aq.prototype.writeUInt32BE=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,4,0xffffffff,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},aq.prototype.writeBigUInt64LE=sf(function(e,t=0){return a8(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),aq.prototype.writeBigUInt64BE=sf(function(e,t=0){return a7(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),aq.prototype.writeIntLE=function(e,t,n,r){if(e*=1,t>>>=0,!r){let r=Math.pow(2,8*n-1);a5(this,e,t,n,r-1,-r)}let a=0,s=1,i=0;for(this[t]=255&e;++a<n&&(s*=256);)e<0&&0===i&&0!==this[t+a-1]&&(i=1),this[t+a]=(e/s>>0)-i&255;return t+n},aq.prototype.writeIntBE=function(e,t,n,r){if(e*=1,t>>>=0,!r){let r=Math.pow(2,8*n-1);a5(this,e,t,n,r-1,-r)}let a=n-1,s=1,i=0;for(this[t+a]=255&e;--a>=0&&(s*=256);)e<0&&0===i&&0!==this[t+a+1]&&(i=1),this[t+a]=(e/s>>0)-i&255;return t+n},aq.prototype.writeInt8=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},aq.prototype.writeInt16LE=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},aq.prototype.writeInt16BE=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},aq.prototype.writeInt32LE=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,4,0x7fffffff,-0x80000000),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},aq.prototype.writeInt32BE=function(e,t,n){return e*=1,t>>>=0,n||a5(this,e,t,4,0x7fffffff,-0x80000000),e<0&&(e=0xffffffff+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},aq.prototype.writeBigInt64LE=sf(function(e,t=0){return a8(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),aq.prototype.writeBigInt64BE=sf(function(e,t=0){return a7(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),aq.prototype.writeFloatLE=function(e,t,n){return se(this,e,t,!0,n)},aq.prototype.writeFloatBE=function(e,t,n){return se(this,e,t,!1,n)},aq.prototype.writeDoubleLE=function(e,t,n){return st(this,e,t,!0,n)},aq.prototype.writeDoubleBE=function(e,t,n){return st(this,e,t,!1,n)},aq.prototype.copy=function(e,t,n,r){if(!aq.isBuffer(e))throw TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n||0===e.length||0===this.length)return 0;if(t<0)throw RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw RangeError("Index out of range");if(r<0)throw RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);let a=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),a},aq.prototype.fill=function(e,t,n,r){let a;if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw TypeError("encoding must be a string");if("string"==typeof r&&!aq.isEncoding(r))throw TypeError("Unknown encoding: "+r);if(1===e.length){let t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw RangeError("Out of range index");if(n<=t)return this;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=t;a<n;++a)this[a]=e;else{let s=aq.isBuffer(e)?e:aq.from(e,r),i=s.length;if(0===i)throw TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<n-t;++a)this[a+t]=s[a%i]}return this};let sn={};function sr(e,t,n){sn[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function sa(e){let t="",n=e.length,r=+("-"===e[0]);for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function ss(e,t,n,r,a,s){if(e>n||e<t){let r,a="bigint"==typeof t?"n":"";throw r=s>3?0===t||t===BigInt(0)?`>= 0${a} and < 2${a} ** ${(s+1)*8}${a}`:`>= -(2${a} ** ${(s+1)*8-1}${a}) and < 2 ** ${(s+1)*8-1}${a}`:`>= ${t}${a} and <= ${n}${a}`,new sn.ERR_OUT_OF_RANGE("value",r,e)}si(a,"offset"),(void 0===r[a]||void 0===r[a+s])&&so(a,r.length-(s+1))}function si(e,t){if("number"!=typeof e)throw new sn.ERR_INVALID_ARG_TYPE(t,"number",e)}function so(e,t,n){if(Math.floor(e)!==e)throw si(e,n),new sn.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new sn.ERR_BUFFER_OUT_OF_BOUNDS;throw new sn.ERR_OUT_OF_RANGE(n||"offset",`>= ${+!!n} and <= ${t}`,e)}sr("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),sr("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError),sr("ERR_OUT_OF_RANGE",function(e,t,n){let r=`The value of "${e}" is out of range.`,a=n;return Number.isInteger(n)&&Math.abs(n)>0x100000000?a=sa(String(n)):"bigint"==typeof n&&(a=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(a=sa(a)),a+="n"),r+=` It must be ${t}. Received ${a}`},RangeError);let sl=/[^+/0-9A-Za-z-_]/g;function su(e,t){let n;t=t||1/0;let r=e.length,a=null,s=[];for(let i=0;i<r;++i){if((n=e.charCodeAt(i))>55295&&n<57344){if(!a){if(n>56319||i+1===r){(t-=3)>-1&&s.push(239,191,189);continue}a=n;continue}if(n<56320){(t-=3)>-1&&s.push(239,191,189),a=n;continue}n=(a-55296<<10|n-56320)+65536}else a&&(t-=3)>-1&&s.push(239,191,189);if(a=null,n<128){if((t-=1)<0)break;s.push(n)}else if(n<2048){if((t-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else if(n<1114112){if((t-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}else throw Error("Invalid code point")}return s}function sh(e){return function(e){var t,n,r=aV(e),a=r[0],s=r[1],i=new aP((a+s)*3/4-s),o=0,l=s>0?a-4:a;for(n=0;n<l;n+=4)t=az[e.charCodeAt(n)]<<18|az[e.charCodeAt(n+1)]<<12|az[e.charCodeAt(n+2)]<<6|az[e.charCodeAt(n+3)],i[o++]=t>>16&255,i[o++]=t>>8&255,i[o++]=255&t;return 2===s&&(t=az[e.charCodeAt(n)]<<2|az[e.charCodeAt(n+1)]>>4,i[o++]=255&t),1===s&&(t=az[e.charCodeAt(n)]<<10|az[e.charCodeAt(n+1)]<<4|az[e.charCodeAt(n+2)]>>2,i[o++]=t>>8&255,i[o++]=255&t),i}(function(e){if((e=(e=e.split("=")[0]).trim().replace(sl,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function sp(e,t,n,r){let a;for(a=0;a<r&&!(a+n>=t.length)&&!(a>=e.length);++a)t[a+n]=e[a];return a}function sd(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}let sc=function(){let e="0123456789abcdef",t=Array(256);for(let n=0;n<16;++n){let r=16*n;for(let a=0;a<16;++a)t[r+a]=e[n]+e[a]}return t}();function sf(e){return"undefined"==typeof BigInt?sm:e}function sm(){throw Error("BigInt not supported")}async function sg(e,t){let n=[],r=[],a=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let s=0;s<a.length;++s){let i=a[s],o=Array.isArray(e)?e[s].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);let l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){let e=new Promise(async e=>{let t=await o.bytes(),n=new Uint8Array(t.reduce((e,t)=>e+t.length,0)+4*t.length),r=0;for(let e=0;e<t.length;e++){let a=t[e],s=new Uint8Array(new Uint32Array([a.length]).buffer);n.set(s,r),r+=4,n.set(a,r),r+=a.length}e(n)});r.push(e)}else r.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:function(e){if(null===e)throw Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0,n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});let r=new Uint8Array(t),a=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength}),r.buffer}(await Promise.all(r)),specs:n}}function sy(e,t){let n,r={},a=0;for(let s of t){let t,i=s.name,o=s.dtype,l=s.shape,u=J(l);if("quantization"in s){let r=s.quantization;if("uint8"===r.dtype||"uint16"===r.dtype){if(!("min"in r&&"scale"in r))throw Error(`Weight ${s.name} with quantization ${r.dtype} doesn't have corresponding metadata min and scale.`)}else if("float16"===r.dtype){if("float32"!==o)throw Error(`Weight ${s.name} is quantized with ${r.dtype} which only supports weights of type float32 not ${o}.`)}else throw Error(`Weight ${s.name} has unknown quantization dtype ${r.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let l=aM[r.dtype],h=e.slice(a,a+u*l),p="uint8"===r.dtype?new Uint8Array(h):new Uint16Array(h);if("float32"===o)if("uint8"===r.dtype||"uint16"===r.dtype){t=new Float32Array(p.length);for(let e=0;e<p.length;e++){let n=p[e];t[e]=n*r.scale+r.min}}else if("float16"===r.dtype)void 0===n&&(n=function(){let e=function(){let e=e=>{let t=e<<13,n=0;for(;(8388608&t)==0;)n-=8388608,t<<=1;return(t&=-8388609)|(n+=0x38800000)},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=0x38000000+(e-1024<<13);return t}(),t=function(){let e=new Uint32Array(64);e[0]=0,e[31]=0x47800000,e[32]=0x80000000,e[63]=0xc7800000;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=0x80000000+(t-32<<23);return e}(),n=function(){let e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{let a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){let i=r[a],o=e[n[i>>10]+(1023&i)]+t[i>>10];s[a]=o}return new Float32Array(a)}}()),t=n(p);else throw Error(`Unsupported quantization type ${r.dtype} for weight type float32.`);else if("int32"===o){if("uint8"!==r.dtype&&"uint16"!==r.dtype)throw Error(`Unsupported quantization type ${r.dtype} for weight type int32.`);t=new Int32Array(p.length);for(let e=0;e<p.length;e++){let n=p[e];t[e]=Math.round(n*r.scale+r.min)}}else throw Error(`Unsupported dtype in weight '${i}': ${o}`);a+=u*l}else if("string"===o){let n=J(s.shape);t=[];for(let r=0;r<n;r++){let n=new Uint32Array(e.slice(a,a+4))[0];a+=4;let r=new Uint8Array(e.slice(a,a+n));t.push(r),a+=n}}else{let n=aM[o],s=e.slice(a,a+u*n);if("float32"===o)t=new Float32Array(s);else if("int32"===o)t=new Int32Array(s);else if("bool"===o)t=new Uint8Array(s);else if("complex64"===o){t=new Float32Array(s);let e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<e.length;r++)e[r]=t[2*r],n[r]=t[2*r+1];let a=aO(e,l,"float32"),o=aO(n,l,"float32");r[i]=aD(a,o),a.dispose(),o.dispose()}else throw Error(`Unsupported dtype in weight '${i}': ${o}`);a+=u*n}"complex64"!==o&&(r[i]=aO(t,l,o))}return r}let sb="undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa;function sx(e){return sb?aq.byteLength(e):new Blob([e]).size}function sv(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});let n=new Uint8Array(t),r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function sk(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);let t=e.split("/");return t[t.length-1]}function sw(e,t){let n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function sI(e,t,n){let r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function sS(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),sI(e,n,r)}function sN(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:sx(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:sx(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function sT(e){let t=[];for(let n of e)t.push(...n.weights);return t}class sC{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==sC.instance&&(sC.instance=new sC),sC.instance}static registerSaveRouter(e){sC.getInstance().saveRouters.push(e)}static registerLoadRouter(e){sC.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return sC.getHandlers(e,"save")}static getLoadHandlers(e,t){return sC.getHandlers(e,"load",t)}static getHandlers(e,t,n){let r=[];return("load"===t?sC.getInstance().loadRouters:sC.getInstance().saveRouters).forEach(t=>{let a=t(e,n);null!==a&&r.push(a)}),r}}let s$=e=>sC.registerSaveRouter(e),sE=e=>sC.registerLoadRouter(e),sA=e=>sC.getSaveHandlers(e),sR=(e,t)=>sC.getLoadHandlers(e,t),sF="tensorflowjs",sD="models_store",s_="model_info_store";function sO(){if(!eM.getBool("IS_BROWSER"))throw Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw Error("The current browser does not appear to support IndexedDB.");return t}function sM(e){let t=e.result;t.createObjectStore(sD,{keyPath:"modelPath"}),t.createObjectStore(s_,{keyPath:"modelPath"})}class sL{constructor(e){if(this.indexedDB=sO(),null==e||!e)throw Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{let r=this.indexedDB.open(sF,1);r.onupgradeneeded=()=>sM(r),r.onsuccess=()=>{let a=r.result;if(null==t){let t=a.transaction(sD,"readonly"),r=t.objectStore(sD).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{let r,s=sN(t),i=a.transaction(s_,"readwrite"),o=i.objectStore(s_),l=o.put({modelPath:this.modelPath,modelArtifactsInfo:s});l.onsuccess=()=>{let l=(r=a.transaction(sD,"readwrite")).objectStore(sD).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});l.onsuccess=()=>e({modelArtifactsInfo:s}),l.onerror=e=>{let t=(o=i.objectStore(s_)).delete(this.modelPath);t.onsuccess=()=>(a.close(),n(l.error)),t.onerror=e=>(a.close(),n(l.error))}},l.onerror=e=>(a.close(),n(l.error)),i.oncomplete=()=>{null==r?a.close():r.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)})}}sL.URL_SCHEME="indexeddb://";let sz=e=>{var t;return eM.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(sL.URL_SCHEME)?(t=e.slice(sL.URL_SCHEME.length),new sL(t)):null};sC.registerSaveRouter(sz),sC.registerLoadRouter(sz);let sP="tensorflowjs_models",sB="info";function sW(e){return{info:[sP,e,sB].join("/"),topology:[sP,e,"model_topology"].join("/"),weightSpecs:[sP,e,"weight_specs"].join("/"),weightData:[sP,e,"weight_data"].join("/"),modelMetadata:[sP,e,"model_metadata"].join("/")}}function sU(e){for(let t of Object.values(e))window.localStorage.removeItem(t)}class sV{constructor(e){if(!eM.getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=sW(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=sN(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(sb)return aq.from(e).toString("base64");let t=new Uint8Array(e),n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));let a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw sU(this.keys),Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;let r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;let a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){let e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}let s=this.LS.getItem(this.keys.weightData);if(null==s)throw Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(sb){let t=aq.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}let t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}sV.URL_SCHEME="localstorage://";let sG=e=>{var t;return eM.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(sV.URL_SCHEME)?(t=e.slice(sV.URL_SCHEME.length),new sV(t)):null};sC.registerSaveRouter(sG),sC.registerLoadRouter(sG);class sH{constructor(){this.managers={}}static getInstance(){return null==sH.instance&&(sH.instance=new sH),sH.instance}static registerManager(e,t){K(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),K(e.length>0,()=>"scheme must not be an empty string.");let n=sH.getInstance();K(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){let t=sH.getInstance().managers[e];if(null==t)throw Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(sH.getInstance().managers)}}function sq(e){if(-1===e.indexOf("://"))throw Error(`The url string provided does not contain a scheme. Supported schemes are: ${sH.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function sj(e,t,n=!1){K(e!==t,()=>`Old path and new path are the same: '${e}'`);let r=sC.getLoadHandlers(e);K(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),K(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);let a=r[0],s=sC.getSaveHandlers(t);K(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),K(s.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);let i=s[0],o=sq(e).scheme,l=sq(e).path,u=o===sq(e).scheme,h=await a.load();n&&u&&await sH.getManager(o).removeModel(l);let p=await i.save(h);return n&&!u&&await sH.getManager(o).removeModel(l),p.modelArtifactsInfo}async function sK(){let e=sH.getSchemes(),t={};for(let n of e){let e=await sH.getManager(n).listModels();for(let r in e)t[n+"://"+r]=e[r]}return t}async function sX(e){let t=sq(e);return sH.getManager(t.scheme).removeModel(t.path)}async function sY(e,t){return sj(e,t,!1)}async function sZ(e,t){return sj(e,t,!0)}if(eM.get("IS_BROWSER")){eM.setPlatform("browser",new class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){if(!window||!eM.getBool("USE_SETTIMEOUTCUSTOM"))return void setTimeout(e,t);this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))}});try{sH.registerManager(sV.URL_SCHEME,new class{constructor(){K(eM.getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),K("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let e={},t=sP+"/",n="/"+sB;for(let r=0;r<this.LS.length;++r){let a=this.LS.key(r);a.startsWith(t)&&a.endsWith(n)&&(e[function(e){let t=e.split("/");if(t.length<3)throw Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;let n=sW(e=(t=e).startsWith(sV.URL_SCHEME)?t.slice(sV.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw Error(`Cannot find model at path '${e}'`);let r=JSON.parse(this.LS.getItem(n.info));return sU(n),r}})}catch(e){}try{sH.registerManager(sL.URL_SCHEME,new class{constructor(){this.indexedDB=sO()}async listModels(){return new Promise((e,t)=>{let n=this.indexedDB.open(sF,1);n.onupgradeneeded=()=>sM(n),n.onsuccess=()=>{let r=n.result,a=r.transaction(s_,"readonly"),s=a.objectStore(s_).getAll();s.onsuccess=()=>{let t={};for(let e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(sL.URL_SCHEME)?t.slice(sL.URL_SCHEME.length):t,new Promise((t,n)=>{let r=this.indexedDB.open(sF,1);r.onupgradeneeded=()=>sM(r),r.onsuccess=()=>{let a,s=r.result,i=s.transaction(s_,"readwrite"),o=i.objectStore(s_),l=o.get(e);l.onsuccess=()=>{if(null==l.result)return s.close(),n(Error(`Cannot find model with path '${e}' in IndexedDB.`));{let r=o.delete(e),i=()=>{let r=(a=s.transaction(sD,"readwrite")).objectStore(sD).delete(e);r.onsuccess=()=>t(l.result.modelArtifactsInfo),r.onerror=e=>n(l.error)};r.onsuccess=i,r.onerror=e=>(i(),s.close(),n(l.error))}},l.onerror=e=>(s.close(),n(l.error)),i.oncomplete=()=>{null==a?s.close():a.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)})}})}catch(e){}}let sJ={importFetch:()=>_("foUwZ")};function sQ(e,t="float32",n){return t=t||"float32",eE(e),new an(e,t,n)}eM.get("IS_NODE")&&!eM.get("IS_BROWSER")&&eM.setPlatform("node",new class{constructor(){this.util=_("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=eM.global.fetch?eM.global.fetch(e,t):(null==n&&(n=sJ.importFetch()),n(e,t))}now(){let e=eL.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});let s0=aF({cast_:function(e,t){let n=aE(e,"x","cast");if(!ec(t))throw Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw Error("Only strings can be casted to strings");return av.runKernel(ts,{x:n},{dtype:t})}}),s1=aF({clone_:function(e){let t=aE(e,"x","clone","string_or_numeric");return av.runKernel(tH,{x:t})}});function s2(e,t=!1){console.log(e.toString(t))}ax(),aa={buffer:sQ,cast:s0,clone:s1,print:s2};let s3=aF({abs_:function(e){let t=aE(e,"x","abs");return"complex64"===t.dtype?av.runKernel(tu,{x:t}):av.runKernel("Abs",{x:t})}}),s4=aF({add_:function(e,t){let n=aE(e,"a","add"),r=aE(t,"b","add");[n,r]=ad(n,r);let a={a:n,b:r};return av.runKernel("Add",a)}}),s6=aF({all_:function(e,t=null,n=!1){let r=aE(e,"x","all","bool");return av.runKernel("All",{x:r},{axis:t,keepDims:n})}}),s5=aF({any_:function(e,t=null,n=!1){let r=aE(e,"x","any","bool");return av.runKernel("Any",{x:r},{axis:t,keepDims:n})}}),s8=aF({argMax_:function(e,t=0){let n=aE(e,"x","argMax");return av.runKernel(e0,{x:n},{axis:t})}});var s7={};function s9(e,t,n,r,a="NHWC",s){let i=[...t,e[3]];return ir(e,i,n,s,r,null,null,id(a))}function ie(e,t,n,r,a,s,i="channelsLast"){let o,[l,u]=ii(t);if("channelsLast"===i)o=[l,u,e[3],e[3]];else if("channelsFirst"===i)o=[l,u,e[1],e[1]];else throw Error(`Unknown dataFormat ${i}`);return ir(e,o,n,r,a,s,!1,i)}function it(e,t,n,r,a,s,i="NDHWC"){let o,l,[u,h,p]=io(t);if("NDHWC"===i)l="channelsLast",o=[u,h,p,e[4],e[4]];else if("NCDHW"===i)l="channelsFirst",o=[u,h,p,e[1],e[1]];else throw Error(`Unknown dataFormat ${i}`);return ia(e,o,n,r,a,!1,l,s)}function ir(e,t,n,r,a,s,i=!1,o="channelsLast"){let l,[u,h,p,d]=[-1,-1,-1,-1];if("channelsLast"===o)[u,h,p,d]=e;else if("channelsFirst"===o)[u,d,h,p]=e;else throw Error(`Unknown dataFormat ${o}`);let[c,f,,m]=t,[g,y]=ii(n),[b,x]=ii(r),v=il(c,b),k=il(f,x),{padInfo:w,outHeight:I,outWidth:S}=function(e,t,n,r,a,s,i,o,l){let u,h,p;if("number"==typeof e){let a=0===e?"VALID":"NUMBER";u={top:e,bottom:e,left:e,right:e,type:a};let i=function(e,t,n,r,a){null==r&&(r=is(e,t,n));let s=e[0],i=e[1];return[iu((s-t+2*r)/n+1,a),iu((i-t+2*r)/n+1,a)]}([t,n],s,r,e,o);h=i[0],p=i[1]}else if("same"===e){let e=Math.max(0,((h=Math.ceil(t/r))-1)*r+s-t),o=Math.max(0,((p=Math.ceil(n/a))-1)*a+i-n),l=Math.floor(e/2),d=Math.floor(o/2);u={top:l,bottom:e-l,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},h=Math.ceil((t-s+1)/r),p=Math.ceil((n-i+1)/a);else if("object"==typeof e){let d="channelsLast"===l?e[1][0]:e[2][0],c="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:c,left:f,right:m,type:0===d&&0===c&&0===f&&0===m?"VALID":"EXPLICIT"},h=iu((t-s+d+c)/r+1,o),p=iu((n-i+f+m)/a+1,o)}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:u,outHeight:h,outWidth:p}}(a,h,p,g,y,v,k,s,o),N=i?m*d:m;return"channelsFirst"===o?l=[u,N,I,S]:"channelsLast"===o&&(l=[u,I,S,N]),{batchSize:u,dataFormat:o,inHeight:h,inWidth:p,inChannels:d,outHeight:I,outWidth:S,outChannels:N,padInfo:w,strideHeight:g,strideWidth:y,filterHeight:c,filterWidth:f,effectiveFilterHeight:v,effectiveFilterWidth:k,dilationHeight:b,dilationWidth:x,inShape:e,outShape:l,filterShape:t}}function ia(e,t,n,r,a,s=!1,i="channelsLast",o){let l,[u,h,p,d,c]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,h,p,d,c]=e;else if("channelsFirst"===i)[u,c,h,p,d]=e;else throw Error(`Unknown dataFormat ${i}`);let[f,m,g,,y]=t,[b,x,v]=io(n),[k,w,I]=io(r),S=il(f,k),N=il(m,w),T=il(g,I),{padInfo:C,outDepth:$,outHeight:E,outWidth:A}=function(e,t,n,r,a,s,i,o,l,u,h){let p,d,c,f;if("number"==typeof e){let s=0===e?"VALID":"NUMBER";p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:s};let i=function(e,t,n,r,a,s){null==a&&(a=is(e,t,r));let i=e[0],o=e[1],l=e[2],u=iu((i-t+2*a)/r+1,s);return[u,iu((o-t+2*a)/r+1,s),iu((l-t+2*a)/r+1,s),1]}([t,n,r,1],o,0,a,e,h);d=i[0],c=i[1],f=i[2]}else if("same"===e){let e=((d=Math.ceil(t/a))-1)*a+o-t,h=((c=Math.ceil(n/s))-1)*s+l-n,m=((f=Math.ceil(r/i))-1)*i+u-r,g=Math.floor(e/2),y=Math.floor(h/2),b=Math.floor(m/2);p={top:y,bottom:h-y,left:b,right:m-b,front:g,back:e-g,type:"SAME"}}else if("valid"===e)p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-o+1)/a),c=Math.ceil((n-l+1)/s),f=Math.ceil((r-u+1)/i);else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:p,outDepth:d,outHeight:c,outWidth:f}}(a,h,p,d,b,x,v,S,N,T,o),R=s?y*c:y;return"channelsFirst"===i?l=[u,R,$,E,A]:"channelsLast"===i&&(l=[u,$,E,A,R]),{batchSize:u,dataFormat:i,inDepth:h,inHeight:p,inWidth:d,inChannels:c,outDepth:$,outHeight:E,outWidth:A,outChannels:R,padInfo:C,strideDepth:b,strideHeight:x,strideWidth:v,filterDepth:f,filterHeight:m,filterWidth:g,effectiveFilterDepth:S,effectiveFilterHeight:N,effectiveFilterWidth:T,dilationDepth:k,dilationHeight:w,dilationWidth:I,inShape:e,outShape:l,filterShape:t}}function is(e,t,n,r=1){let a=il(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function ii(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function io(e){return"number"==typeof e?[e,e,e]:e}function il(e,t){return t<=1?e:e+(e-1)*(t-1)}function iu(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw Error(`Unknown roundingMode ${t}`)}}function ih(e){let[t,n,r]=ii(e);return 1===t&&1===n&&1===r}function ip(e,t){return ih(e)||ih(t)}function id(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw Error(`Unknown dataFormat ${e}`)}function ic(e,t,n){if(null!=n)if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else if("number"==typeof t)K(et(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else if("object"==typeof t)t.forEach(t=>{t.forEach(t=>{K(et(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})});else throw Error(`Error in ${e}: Unknown padding parameter: ${t}`)}l(s7,"computeDilation2DInfo",()=>s9),l(s7,"convertConv2DDataFormat",()=>id),l(s7,"computeConv2DInfo",()=>ir),l(s7,"computePool2DInfo",()=>ie),l(s7,"computePool3DInfo",()=>it),l(s7,"computeConv3DInfo",()=>ia),l(s7,"computeDefaultPad",()=>is),l(s7,"tupleValuesAreOne",()=>ih),l(s7,"eitherStridesOrDilationsAreOne",()=>ip),l(s7,"checkPadOnDimRoundingMode",()=>ic);let im=aF({reshape_:function(e,t){let n=aE(e,"x","reshape","string_or_numeric");return av.runKernel(nI,{x:n},{shape:t})}}),ig=aF({avgPool_:function(e,t,n,r,a){let s=aE(e,"x","avgPool","float32");K(ip(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=s,o=!1;3===s.rank&&(o=!0,i=im(s,[1,s.shape[0],s.shape[1],s.shape[2]])),K(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),ic("avgPool",r,a);let l={x:i},u=av.runKernel(e8,l,{filterSize:t,strides:n,pad:r,dimRoundingMode:a});return(u=s0(u,s.dtype),o)?im(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),iy=aF({avgPool3d_:function(e,t,n,r,a,s="NDHWC"){let i=aE(e,"x","avgPool3d","float32"),o=i,l=!1;4===i.rank&&(l=!0,o=im(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),K(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),K("NDHWC"===s,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),ic("avgPool3d",r,a);let u={x:o},h=av.runKernel(e9,u,{filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s});return(h=s0(h,o.dtype),l)?im(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});function ib(){return av.memory()}function ix(e,t){return av.tidy(e,t)}function iv(e){am(e).forEach(e=>e.dispose())}function ik(e){return av.keep(e)}function iw(e,t,n=1){return av.registerBackend(e,t,n)}var iI={};l(iI,"fromUint8ToStringArray",()=>lc),l(iI,"fromStringArrayToUint8",()=>lf),l(iI,"slice_util",()=>i7),l(iI,"upcastType",()=>ah),l(iI,"segment_util",()=>lu);var iS={};function iN(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function iT(e,t,n){let r=e.length+t.length,a=[],s=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?a.push(e[s++]):a.push(t[i++]);return a}function iC(e,t){let n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map(t=>e[t])]}function i$(e,t){return iT(e,t.map(e=>1),t)}function iE(e,t,n){K(iN(t,n),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`)}function iA(e,t){if(iN(e,t))return null;let n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function iR(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function iF(e,t){let n=[];for(let r=t-e;r<t;++r)n.push(r);return n}l(iS,"axesAreInnerMostDims",()=>iN),l(iS,"combineLocations",()=>iT),l(iS,"computeOutAndReduceShapes",()=>iC),l(iS,"expandShapeToKeepDim",()=>i$),l(iS,"assertAxesAreInnerMostDims",()=>iE),l(iS,"getAxesPermutation",()=>iA),l(iS,"getUndoAxesPermutation",()=>iR),l(iS,"getInnerMostAxes",()=>iF);var iD={};function i_(e,t){let n=e.length,r=[];for(let a=0;a<n;a++){let s=n-1-a,i=e[s]||1;(t[t.length-1-a]||1)>1&&1===i&&r.unshift(s)}return r}function iO(e,t){let n=[];for(let r=0;r<t.length;r++){let a=e[e.length-r-1],s=t.length-r-1,i=t[s];(null==a||1===a&&i>1)&&n.unshift(s)}return n}function iM(e,t){let n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else if(r!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);else n.unshift(r)}return n}l(iD,"getBroadcastDims",()=>i_),l(iD,"getReductionAxes",()=>iO),l(iD,"assertAndGetBroadcastShape",()=>iM);var iL={};function iz(e,t){let n=e[0].length;e.forEach((e,t)=>{K(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),K(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);let r=e[0];e.forEach((e,a)=>{for(let s=0;s<n;s++)K(s===t||e[s]===r[s],()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`)})}function iP(e,t){let n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}l(iL,"assertParamsConsistent",()=>iz),l(iL,"computeOutShape",()=>iP);var iB={};l(iB,"getFusedDyActivation",()=>iY),l(iB,"getFusedBiasGradient",()=>iZ),l(iB,"applyActivation",()=>iJ),l(iB,"shouldFuse",()=>iQ);let iW=aF({elu_:function(e){let t=aE(e,"x","elu","float32");return av.runKernel("Elu",{x:t})}}),iU=aF({leakyRelu_:function(e,t=.2){let n=aE(e,"x","leakyRelu");return av.runKernel(tZ,{x:n},{alpha:t})}}),iV=aF({mul_:function(e,t){let n=aE(e,"a","mul"),r=aE(t,"b","mul");[n,r]=ad(n,r);let a={a:n,b:r};return av.runKernel(ni,a)}}),iG=aF({prelu_:function(e,t){let n=aE(e,"x","prelu"),r=aE(t,"alpha","prelu");return av.runKernel(nm,{x:n,alpha:r})}}),iH=aF({relu_:function(e){let t=aE(e,"x","relu");return av.runKernel(nw,{x:t})}}),iq=aF({relu6_:function(e){let t=aE(e,"x","relu6");return av.runKernel(n$,{x:t})}}),ij=aF({sigmoid_:function(e){let t=aE(e,"x","sigmoid","float32");return av.runKernel(nP,{x:t})}}),iK=aF({step_:function(e,t=0){let n=aE(e,"x","step");return av.runKernel(rt,{x:n},{alpha:t})}}),iX=aF({sum_:function(e,t=null,n=!1){let r=aE(e,"x","sum");"bool"===r.dtype&&(r=s0(r,"int32"));let a={x:r};return av.runKernel("Sum",a,{axis:t,keepDims:n})}});function iY(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return iV(e,iK(t));throw Error(`Cannot compute gradient for fused activation ${n}.`)}function iZ(e,t){let n=t,r=iO(e.shape,t.shape);return r.length>0&&(n=iX(n,r)),im(n,e.shape)}function iJ(e,t,n,r){if("linear"===t)return e;if("relu"===t)return iH(e);if("elu"===t)return iW(e);if("relu6"===t)return iq(e);if("prelu"===t)return iG(e,n);else if("leakyrelu"===t)return iU(e,r);else if("sigmoid"===t)return ij(e);throw Error(`Unknown fused activation ${t}.`)}let iQ=(e,t)=>!(e>0)||"linear"===t;var i0={};function i1(e,t,n){let r=[];if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let a=1;a<n.length;++a){let s=n[a],i=r[r.length-n.length+a],o=r[i];if(s>=0)if(o>=0){if(o!==s)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${s} but shape[${a+e}] = ${o}`)}else r[i]=s}return r}function i2(e){let t={FIRST_DIM_SIZE:v.FIRST_DIM_SIZE,VALUE_ROWIDS:v.VALUE_ROWIDS,ROW_LENGTHS:v.ROW_LENGTHS,ROW_SPLITS:v.ROW_SPLITS,ROW_LIMITS:v.ROW_LIMITS,ROW_STARTS:v.ROW_STARTS},n=[];for(let r of e)if(r in t)n.push(t[r]);else break;return n}function i3(e){return 0===e.length?0:e[0]===v.FIRST_DIM_SIZE?e.length-1:e.length}function i4(e,t){if(null==e||null==t)return;let n=e.length,r=t.length;if(n>=r)throw Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let a=0;a<Math.min(n,r-1);++a){let n=e[a],r=t[a+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${n} but ragged tensor input.flatValues.shape[${a-e.length}] = ${r}`)}}l(i0,"RowPartitionType",()=>v),l(i0,"combineRaggedTensorToTensorShapes",()=>i1),l(i0,"getRowPartitionTypesHelper",()=>i2),l(i0,"getRaggedRank",()=>i3),l(i0,"validateDefaultValueShape",()=>i4),function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(v||(v={}));var i6={};l(i6,"PARALLELIZE_THRESHOLD",()=>i5),l(i6,"computeOptimalWindowSize",()=>i8);let i5=30;function i8(e){return e<=i5?e:eI(e,Math.floor(Math.sqrt(e)))}var i7={};function i9(e,t,n){let r=e.shape.length;K(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),K(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`);for(let a=0;a<r;++a)K(t[a]+n[a]<=e.shape[a],()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`)}function oe(e){let t=[],n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function ot(e,t,n){let r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function on(e,t,n,r){let a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function or(e,t,n){return n<=e?n:n-(t-1)}function oa(e,t){let n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function os(e,t,n,r,a,s,i,o,l){let u=e.length,h=Array(u),p=Array(u),d=Array(u);if(t.length&&n>0){let l=t[0],u=n+1;h=oi(i,l,u,r,e),p=oo(o,l,u,a,e),d=on(s,l,u,e)}else for(let t=0;t<u;t++)h[t]=ou(i,r,s,e,t,l),p[t]=oh(o,a,s,e,t,l),d[t]=ol(s,t,l);return{begin:h,end:p,strides:d}}function oi(e,t,n,r,a){let s=[...a],i=oa(n,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=0;else{var o,l,u;let i=(o=t,l=n,(u=a)<=o?u:u-(l-1)),h=r[i];e&1<<i&&(h=0),s[a]=h}return s}function oo(e,t,n,r,a){let s=[...a],i=oa(n,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{var o,l,u;let i=(o=t,l=n,(u=a)<=o?u:u-(l-1)),h=r[i];e&1<<i&&(h=Number.MAX_SAFE_INTEGER),s[a]=h}for(let e=0;e<s.length;e++){let t=a[e];s[e]<0&&(s[e]+=t),s[e]=U(0,s[e],a[e])}return s}function ol(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function ou(e,t,n,r,a,s){let i=t[a],o=n[a]||1;(e&1<<a||s&1<<a||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);let l=r[a];return i<0&&(i+=l),i=U(0,i,l-1)}function oh(e,t,n,r,a,s){let i=t[a],o=n[a]||1;(e&1<<a||s&1<<a||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);let l=r[a];return i<0&&(i+=l),i=o>0?U(0,i,l):U(-1,i,l-1)}function op(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function od(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function oc(e,t,n){let r,a,s=e.shape.length;return(r="number"==typeof t?[t,...Array(s-1).fill(0)]:t.length<s?t.concat(Array(s-t.length).fill(0)):t.slice()).forEach(e=>{K(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=(a=null==n?Array(s).fill(-1):"number"==typeof n?[n,...Array(s-1).fill(-1)]:n.length<s?n.concat(Array(s-n.length).fill(-1)):n).map((t,n)=>t>=0?t:(K(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,a]}function of(e,t,n,r,a,s,i,o,l){let u;if(null==r?(u=Array(t.length)).fill(1):u=r,null!=i&&(i&i-1)!=0)throw Error("Multiple ellipses in slice is not allowed.");let h=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:a,endMask:s,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)h&&(1<<e&o)!=0&&p.numAddAxisAfterEllipsis++,1<<e&i&&(h=!0);!h&&(p.ellipsisMask|=1<<p.dims,p.dims++);let d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};var c=p,f=d;f.beginMask=0,f.endMask=0,f.shrinkAxisMask=0;let m=0;f.beginValid=null!=c.begin,f.endValid=null!=c.end,f.begin=Array(f.dims),f.end=Array(f.dims),f.strides=Array(f.dims),f.finalShapeGatherIndices=[],f.finalShapeGatherIndicesSparse=[],f.inputShapeGatherIndicesSparse=Array(f.dims);for(let e=0;e<c.dims;e++)if(1<<e&c.ellipsisMask){let t=Math.min(f.dims-(c.dims-e)+1+c.numAddAxisAfterEllipsis,f.dims);for(;m<t;m++)f.begin[m]=0,f.end[m]=0,f.strides[m]=1,f.beginMask|=1<<m,f.endMask|=1<<m,f.finalShapeGatherIndices.push(m),f.finalShapeGatherIndicesSparse.push(-1),f.inputShapeGatherIndicesSparse[m]=e}else if(1<<e&c.newAxisMask)f.finalShapeGatherIndices.push(-2),f.finalShapeGatherIndicesSparse.push(-1);else{if(m===f.begin.length)throw Error(`Index out of range using input dim ${m}; input has only ${f.dims} dims, ${f.begin.length}.`);null!=c.begin&&(f.begin[m]=c.begin[e]),null!=c.end&&(f.end[m]=c.end[e]),f.strides[m]=c.strides[e],c.beginMask&1<<e&&(f.beginMask|=1<<m),c.endMask&1<<e&&(f.endMask|=1<<m),c.shrinkAxisMask&1<<e?(f.finalShapeGatherIndices.push(-1),f.finalShapeGatherIndicesSparse.push(-1),f.shrinkAxisMask|=1<<m):(f.finalShapeGatherIndices.push(m),f.finalShapeGatherIndicesSparse.push(e)),f.inputShapeGatherIndicesSparse[m]=e,m++}let g=!0,y=!0,b=!0,x=[],v=[];for(let t=0;t<e.length;++t){let n;if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);let r=!!(d.shrinkAxisMask&1<<t),a=e[t];if(-1===a){x.push(r?1:-1);continue}let s=[d.beginMask&1<<t,d.endMask&1<<t],i=[d.strides[t]>0?0:-1,d.strides[t]>0?a:a-1];if(r&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");b=b&&1===d.strides[t];let o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(r){let e=d.begin[t]<0?a+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=a)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=om(d.begin[t],0,d.strides[t],a,s,i),d.end[t]=om(d.end[t],1,d.strides[t],a,s,i);let e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===a;g=g&&e,y=y&&(0===t&&1===d.strides[t]||e)}else g=g&&1===d.strides[t]&&o,y=y&&(0===t&&1===d.strides[t]||o);let l=!1;if(d.beginValid&&d.endValid?(n=d.end[t]-d.begin[t],l=!0):r?(n=1,l=!0):o&&a>=0&&(n=d.strides[t]<0?-a:a,l=!0),l){let e;e=0===n||n<0!=d.strides[t]<0?0:Math.trunc(n/d.strides[t])+ +(n%d.strides[t]!=0),x.push(e)}else x.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){let t=d.finalShapeGatherIndices[e];t>=0?v.push(x[t]):-2===t&&v.push(1)}return{finalShapeSparse:v.filter((e,t)=>-2!==d.finalShapeGatherIndices[t]),finalShape:v,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:d.begin,end:d.end,strides:d.strides}}function om(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{let t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}l(i7,"assertParamsValid",()=>i9),l(i7,"maskToAxes",()=>oe),l(i7,"computeOutShape",()=>ot),l(i7,"stridesWithElidedDims",()=>on),l(i7,"getNormalizedAxes",()=>os),l(i7,"startIndicesWithElidedDims",()=>oi),l(i7,"stopIndicesWithElidedDims",()=>oo),l(i7,"startForAxis",()=>ou),l(i7,"stopForAxis",()=>oh),l(i7,"stridesForAxis",()=>ol),l(i7,"isSliceContinous",()=>op),l(i7,"computeFlatOffset",()=>od),l(i7,"parseSliceParams",()=>oc),l(i7,"sliceInfo",()=>of);var og={};function oy(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}l(og,"getImageCenter",()=>oy);var ob={};function ox(e,t,n,r=!0){let a=[];if(r)(a=a.concat(t.slice(0))).push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);let n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function ov(e,t,n=!0){let r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{let n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function ok(e,t,n,r=!0){let a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function ow(e,t){let n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function oI(e,t,n){let r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}l(ob,"getReshaped",()=>ox),l(ob,"getPermuted",()=>ov),l(ob,"getReshapedPermuted",()=>ok),l(ob,"getSliceBeginCoords",()=>ow),l(ob,"getSliceSize",()=>oI);var oS={};function oN(e,t){let n=e.shape.length,r=t.shape.length;if(n<1)throw Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===J(e.shape))throw Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);let a=t.shape,s=a[a.length-1],i=1;for(let e=0;e<a.length-1;++e)i*=a[e];let o=e.shape,l=a.slice();l.pop();let u=1;for(let e=s;e<n;++e)u*=o[e],l.push(o[e]);let h=[...eS(e.shape).map(e=>e/u),1].slice(0,s);return[l,i,u,h]}l(oS,"prepareAndValidate",()=>oN);var oT={};function oC(e,t,n){let r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw Error(s+` update.rank != ${a+e.length-r}`);for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function o$(e,t,n){if(t.rank<1)throw Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw Error(`Updates specified for empty output. updates shape: ${e.shape}`)}oC(n,t,e)}function oE(e,t,n){let r=t.shape.length,a=r>1?t.shape[r-1]:1,s=n.length,i=1;for(let e=a;e<s;++e)i*=n[e];let o=a<1?1:a,l=J(t.shape)/o,u=[...eS(n.slice(0,a)),1];return{sliceRank:a,numUpdates:l,sliceSize:i,strides:u,outputSize:J(n)}}l(oT,"validateUpdateShape",()=>oC),l(oT,"validateInput",()=>o$),l(oT,"calculateShapes",()=>oE);var oA={};l(oA,"SELU_SCALEALPHA",()=>oR),l(oA,"SELU_SCALE",()=>oF);let oR=1.7580993408473768,oF=1.0507009873554805;var oD={};l(oD,"ERF_P",()=>o_),l(oD,"ERF_A1",()=>oO),l(oD,"ERF_A2",()=>oM),l(oD,"ERF_A3",()=>oL),l(oD,"ERF_A4",()=>oz),l(oD,"ERF_A5",()=>oP);let o_=.3275911,oO=.254829592,oM=-.284496736,oL=1.421413741,oz=-1.453152027,oP=1.061405429;var oB={};function oW(e,t){if(e.length!==t.length)throw Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);let n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function oU(e){let t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function oV(e){let t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function oG(e){let t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function oH(e,t){return{real:e[2*t],imag:e[2*t+1]}}function oq(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function oj(e,t){let n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){let s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function oK(e,t,n){let r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}l(oB,"mergeRealAndImagArrays",()=>oW),l(oB,"splitRealAndImagArrays",()=>oU),l(oB,"complexWithEvenIndex",()=>oV),l(oB,"complexWithOddIndex",()=>oG),l(oB,"getComplexWithIndex",()=>oH),l(oB,"assignToTypedArray",()=>oq),l(oB,"exponents",()=>oj),l(oB,"exponent",()=>oK);var oX={};l(oX,"decodeEinsumEquation",()=>oZ),l(oX,"getEinsumPermutation",()=>oJ),l(oX,"checkEinsumDimSizes",()=>oQ),l(oX,"getEinsumComputePath",()=>o0),l(oX,"isIdentityPermutation",()=>o1);let oY=/->/g;function oZ(e,t){let n=((e=e.replace(/\s/g,"")).length-e.replace(oY,"").length)/2;if(n<1)throw Error("Equations without an arrow are not supported.");if(n>1)throw Error('Equation must contain exactly one arrow ("->").');let[r,a]=e.split("->");K(-1===r.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');let s=r.split(","),i=s.length;if(t!==i)throw Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw Error("Support for more than 2 input tensors is not implemented yet.");let o=[];for(let e=0;e<a.length;++e){let t=a[e];if(!s.some(e=>-1!==e.indexOf(t)))throw Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<r.length;++e){let t=r[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}let l=Array(s.length);for(let e=0;e<i;++e){if(new Set(s[e].split("")).size!==s[e].length)throw Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<s[e].length;++t)l[e].push(o.indexOf(s[e][t]))}let u=o.length,h=a.length,p=[];for(let e=h;e<u;++e)p.push(e);return{allDims:o,summedDims:p,idDims:l}}function oJ(e,t){let n=Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;let r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return{permutationIndices:n=n.filter(e=>-1!==e),expandDims:r}}function oQ(e,t,n){let r=Array(e);for(let e=0;e<n.length;++e){let a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:K(r[t[e][n]]===a[n],()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`)}}function o0(e,t){let n=[],r=0;0===e.length&&e.push(-1),r=e.length+1;for(let e=0;e<r;++e)n.push([]);let a=[];for(let r=0;r<e.length;++r)for(let s of function(e,t){let n=[];for(let r=0;r<e.length;++r)(0===e[r].length||-1!==e[r].indexOf(t)||-1===t)&&n.push(r);return n}(t,e[r]))-1===a.indexOf(s)&&(n[r].push(s),a.push(s));return{path:e,steps:n}}function o1(e){return e.every((e,t)=>e===t)}var o2={};function o3(e,t,n=0){let r=[];if("number"==typeof t)K(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=Array(t).fill(e.shape[n]/t);else{K(1>=t.reduce((e,t)=>(-1===t&&(e+=1),e),0),()=>"There should be only one negative value in split array.");let a=t.indexOf(-1);if(-1!==a){let r=t.reduce((e,t)=>t>0?e+t:e);t[a]=e.shape[n]-r}K(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}l(o2,"prepareSplitSize",()=>o3);var o4={};function o6(e){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${e}`}function o5(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function o8(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}l(o4,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",()=>o6),l(o4,"getSparseFillEmptyRowsNegativeIndexErrorMessage",()=>o5),l(o4,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",()=>o8);var o7={};function o9(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function le(e,t){return`size ${e} must be non-negative, not ${t}`}function lt(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function ln(e,t){let n=J(e),r=J(t);return`Input to reshape is a SparseTensor with ${n}
  dense values, but the requested shape requires a multiple of ${r}. inputShape=${e} outputShape= ${t}`}function lr(e,t){let n=J(e),r=J(t);return`Input to reshape is a tensor with ${n} dense values, but the requested shape has ${r}. inputShape=${e} outputShape=${t}`}l(o7,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",()=>o9),l(o7,"getSparseReshapeNegativeOutputDimErrorMessage",()=>le),l(o7,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",()=>lt),l(o7,"getSparseReshapeInputOutputMultipleErrorMessage",()=>ln),l(o7,"getSparseReshapeInputOutputMismatchErrorMessage",()=>lr);var la={};function ls(){return"segment ids must be >= 0"}function li(){return"segment ids are not increasing"}function lo(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function ll(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}l(la,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",()=>ls),l(la,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",()=>li),l(la,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",()=>lo),l(la,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",()=>ll);var lu={};function lh(e,t){let n,r=!1;for(e<=i5?(n=e,r=!0):n=eI(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=eI(e,n+1);return n}function lp(e,t,n){let r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function ld(e,t,n,r){let a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw Error(`batchDims (${r}) must be less than rank(x) (
    ${s}).`);if(n<r)throw Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);let i=e.shape[n],o=[],l=1,u=1,h=1;for(let t=0;t<r;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=r;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=r;e<a;e++)o.push(t.shape[e]);for(let t=n+1;t<s;t++)o.push(e.shape[t]),h*=e.shape[t];return{batchSize:l,sliceSize:h,outerSize:u,dimSize:i,outputShape:o}}function lc(e){try{return e.map(e=>r5(e))}catch(e){throw Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function lf(e){return e.map(e=>r6(e))}l(lu,"segOpComputeOptimalWindowSize",()=>lh),l(lu,"computeOutShape",()=>lp),l(lu,"collectGatherOpShapeInfo",()=>ld),R(iI,iS),R(iI,iD),R(iI,iL),R(iI,s7),R(iI,iB),R(iI,i0),R(iI,i6),R(iI,og),R(iI,ob),R(iI,oS),R(iI,oT),R(iI,oA),R(iI,oD),R(iI,ro),R(iI,oB),R(iI,oX),R(iI,o2),R(iI,o4),R(iI,o7),R(iI,la);let lm=aF({batchNorm_:function(e,t,n,r,a,s){let i,o,l;null==s&&(s=.001);let u=aE(e,"x","batchNorm"),h=aE(t,"mean","batchNorm"),p=aE(n,"variance","batchNorm");null!=a&&(i=aE(a,"scale","batchNorm")),null!=r&&(o=aE(r,"offset","batchNorm")),K(h.rank===p.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),K(null==o||h.rank===o.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),K(null==i||h.rank===i.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let d={x:0===u.rank||1===u.rank?im(u,[1,1,1,u.size]):2===u.rank?im(u,[1,1,u.shape[0],u.shape[1]]):3===u.rank?im(u,[1,u.shape[0],u.shape[1],u.shape[2]]):u,scale:i,offset:o,mean:h,variance:p},c={varianceEpsilon:s};return im(av.runKernel(tB,d,c),u.shape)}}),lg=aF({batchNorm2d_:function(e,t,n,r,a,s){let i,o,l=aE(e,"x","batchNorm"),u=aE(t,"mean","batchNorm"),h=aE(n,"variance","batchNorm");return null!=a&&(i=aE(a,"scale","batchNorm")),null!=r&&(o=aE(r,"offset","batchNorm")),K(2===l.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${l.rank}.`),K(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`),K(2===h.rank||1===h.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${h.rank}.`),null!=i&&K(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${i.rank}.`),null!=o&&K(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${o.rank}.`),lm(l,u,h,o,i,s)}}),ly=aF({batchNorm3d_:function(e,t,n,r,a,s){let i,o,l=aE(e,"x","batchNorm"),u=aE(t,"mean","batchNorm"),h=aE(n,"variance","batchNorm");return null!=a&&(i=aE(a,"scale","batchNorm")),null!=r&&(o=aE(r,"offset","batchNorm")),K(3===l.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${l.rank}.`),K(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`),K(3===h.rank||1===h.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${h.rank}.`),null!=i&&K(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${i.rank}.`),null!=o&&K(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${o.rank}.`),lm(l,u,h,o,i,s)}}),lb=aF({batchNorm4d_:function(e,t,n,r,a,s){let i,o,l=aE(e,"x","batchNorm"),u=aE(t,"mean","batchNorm"),h=aE(n,"variance","batchNorm");return null!=a&&(i=aE(a,"scale","batchNorm")),null!=r&&(o=aE(r,"offset","batchNorm")),K(4===l.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${l.rank}.`),K(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`),K(4===h.rank||1===h.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${h.rank}.`),null!=i&&K(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${i.rank}.`),null!=o&&K(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${o.rank}.`),lm(l,u,h,o,i,s)}}),lx=aF({broadcastTo_:function(e,t){let n=aE(e,"broadcastTo","x"),r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){let e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=im(n,e)}let a=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===s.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return s1(n);let i={x:n};return av.runKernel(n3,i,{reps:s})}});var lv={};function lk(e,t,n){if(Y(e),null!=t&&3!==t.length)throw Error("tensor3d() requires shape to have three numbers");let r=aC(e,n);if(3!==r.length&&1!==r.length)throw Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor3d() requires shape to be provided when `values` are a flat array");return a_(e,t,r,n)}function lw(e,t=3){let n,a;if(t>4)throw Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw Error("pixels passed to tf.browser.fromPixels() can not be null");let s=!1,i=!1,o=!1,l=!1,u=!1,h=!1;if(e.data instanceof Uint8Array)s=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)i=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)l=!0;else if(null!=e.getContext)u=!0;else if("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap)h=!0;else throw Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);if(null!=rd(rn,av.backendName))return av.runKernel(rn,{pixels:e},{numChannels:t});let[p,d]=o?[e.videoWidth,e.videoHeight]:[e.width,e.height];if(u)n=e.getContext("2d").getImageData(0,0,p,d).data;else if(i||s)n=e.data;else if(l||o||h){if(null==r)if("undefined"==typeof document)if("undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof OffscreenCanvasRenderingContext2D)r=new OffscreenCanvas(1,1).getContext("2d");else throw Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else r=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});r.canvas.width=p,r.canvas.height=d,r.drawImage(e,0,0,p,d),n=r.getImageData(0,0,p,d).data}if(4===t)a=new Int32Array(n);else{let e=p*d;a=new Int32Array(e*t);for(let r=0;r<e;r++)for(let e=0;e<t;++e)a[r*t+e]=n[4*r+e]}return lk(a,[d,p,t],"int32")}async function lI(e,t=3){var n;let r=null;if(eM.getBool("WRAP_TO_IMAGEBITMAP")&&"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&null!=(n=e)&&0!==n.width&&0!==n.height&&!(null!=e&&e.data instanceof Uint8Array)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}r=null!=t&&t.width===e.width&&t.height===e.height?t:e}else r=e;return lw(r,t)}async function lS(e,t){let n=aE(e,"img","toPixels");if(!(e instanceof as)){let e=n;n=s0(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);let[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);let i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){let t=[0,0,0,255];for(let r=0;r<s;r++){let a=i[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*o,t[1]=a*o,t[2]=a*o):t[r]=a*o}let r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;let e=t.getContext("2d"),n=new ImageData(l,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}l(lv,"fromPixelsAsync",()=>lI),l(lv,"toPixels",()=>lS),l(lv,"fromPixels",()=>lN);let lN=aF({fromPixels_:lw});function lT(e,t,n){return av.runKernel(tM,{},{shape:e,value:t,dtype:n})}let lC=aF({clipByValue_:function(e,t,n){let r=aE(e,"x","clipByValue");return(K(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),t===n)?lT(r.shape,t,r.dtype):av.runKernel(to,{x:r},{clipValueMin:t,clipValueMax:n})}}),l$=aF({concat_:function(e,t=0){K(e.length>=1,()=>"Pass at least one tensor to concat");let n=aA(e,"tensors","concat","string_or_numeric");return("complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${e.dtype}. `)}),1===n.length)?s1(n[0]):av.runKernel(th,n,{axis:t})}}),lE=aF({concat1d_:function(e){return l$(e,0)}}),lA=aF({concat2d_:function(e,t){return l$(e,t)}}),lR=aF({concat3d_:function(e,t){return l$(e,t)}}),lF=aF({concat4d_:function(e,t){return l$(e,t)}}),lD=aF({conv2d_:function(e,t,n,r,a="NHWC",s=[1,1],i){let o=aE(e,"x","conv2d","float32"),l=aE(t,"filter","conv2d","float32"),u=o,h=!1;3===o.rank&&(h=!0,u=im(o,[1,o.shape[0],o.shape[1],o.shape[2]])),K(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),K(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),ic("conv2d",r,i);let p="NHWC"===a?u.shape[3]:u.shape[1];K(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),K(ip(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);let d={x:u,filter:l},c=av.runKernel(tp,d,{strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:i});return h?im(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),l_=aF({conv1d_:function(e,t,n,r,a="NWC",s=1,i){let o=aE(e,"x","conv1d"),l=aE(t,"filter","conv1d"),u=o,h=!1;2===o.rank&&(h=!0,u=im(o,[1,o.shape[0],o.shape[1]])),K(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),K(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),ic("conv1d",r,i),K(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),K(ip(n,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`),K("NWC"===a,()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`);let p=im(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=lD(im(u,[u.shape[0],1,u.shape[1],u.shape[2]]),p,[1,n],r,"NHWC",[1,s],i);return h?im(d,[d.shape[2],d.shape[3]]):im(d,[d.shape[0],d.shape[2],d.shape[3]])}}),lO=aF({conv2DBackpropInput_:function(e,t,n,r,a,s="NHWC",i){K(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=im(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),K(4===o.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`),K(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),K(4===n.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);let h="NHWC"===s?o[3]:o[1],p="NHWC"===s?l.shape[3]:l.shape[1];K(h===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`),K(p===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`),ic("conv2dDerInput",a,i);let d={dy:l,filter:n},c={strides:r,pad:a,dataFormat:s,dimRoundingMode:i,inputShape:o},f=av.runKernel(tc,d,c);return u?im(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),lM=aF({conv2dTranspose_:function(e,t,n,r,a,s){return lO(n,aE(e,"x","conv2dTranspose"),aE(t,"filter","conv2dTranspose"),r,a,"NHWC",s)}}),lL=aF({conv3d_:function(e,t,n,r,a="NDHWC",s=[1,1,1]){let i=aE(e,"x","conv3d"),o=aE(t,"filter","conv3d"),l=i,u=!1;4===i.rank&&(u=!0,l=im(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),K(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),K(5===o.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`),K(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),K(ip(n,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),K("NDHWC"===a,()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`);let h={x:l,filter:o},p=av.runKernel(tf,h,{strides:n,pad:r,dataFormat:a,dilations:s});return u?im(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),lz=aF({conv3DBackpropInput_:function(e,t,n,r,a){K(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let s=e,i=t,o=!1;4===t.rank&&(o=!0,i=im(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);let l=s[4],u=i.shape[4];K(5===s.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),K(5===i.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),K(5===n.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`),K(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),K(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);let h={dy:i,filter:n},p={pad:a,strides:r,inputShape:s},d=av.runKernel(tg,h,p);return o?im(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),lP=aF({conv3dTranspose_:function(e,t,n,r,a){return lz(n,aE(e,"x","conv3dTranspose"),aE(t,"filter","conv3dTranspose"),r,a)}}),lB=aF({depthwiseConv2d_:function(e,t,n,r,a="NHWC",s=[1,1],i){let o=aE(e,"x","depthwiseConv2d","float32"),l=aE(t,"filter","depthwiseConv2d","float32"),u=o,h=!1;3===o.rank&&(h=!0,u=im(o,[1,o.shape[0],o.shape[1],o.shape[2]])),K(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),K(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p="NHWC"===a?u.shape[3]:u.shape[1];K(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),ic("depthwiseConv2d",r,i);let d={x:u,filter:l},c=av.runKernel(tI,d,{strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:i});return h?im(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),lW=aF({floorDiv_:function(e,t){let n=aE(e,"a","floorDiv"),r=aE(t,"b","floorDiv");[n,r]=ad(n,r);let a={a:n,b:r};return av.runKernel(tP,a)}}),lU=aF({div_:function(e,t){let n=aE(e,"a","div"),r=aE(t,"b","div");if([n,r]=ad(n,r),"int32"===n.dtype&&"int32"===r.dtype)return lW(n,r);let a={a:n,b:r};return av.runKernel(tA,a,{})}});var lV={};l(lV,"dropout",()=>l3);let lG=aF({floor_:function(e){let t=aE(e,"x","floor","float32");return av.runKernel(tz,{x:t})}});var lH={},lq=_("gj6Et"),lj=_("4gDjz"),lK=_("HLBv4"),lX=_("ktaoY"),lY=_("gBs5C"),lZ=_("ktLSh"),lJ={};!function(e,t,n){var r,a="random",s=n.pow(256,6),i=n.pow(2,52),o=2*i;function l(l,c,f){var m=[],g=p(function e(t,n){var r,a=[],s=typeof t;if(n&&"object"==s)for(r in t)try{a.push(e(t[r],n-1))}catch(e){}return a.length?a:"string"==s?t:t+"\0"}((c=!0==c?{entropy:!0}:c||{}).entropy?[l,d(t)]:null==l?function(){try{var n;return r&&(n=r.randomBytes)?n=n(256):(n=new Uint8Array(256),(e.crypto||e.msCrypto).getRandomValues(n)),d(n)}catch(n){var a=e.navigator,s=a&&a.plugins;return[+new Date,e,s,e.screen,d(t)]}}():l,3),m),y=new u(m),b=function(){for(var e=y.g(6),t=s,n=0;e<i;)e=(e+n)*256,t*=256,n=y.g(1);for(;e>=o;)e/=2,t/=2,n>>>=1;return(e+n)/t};return b.int32=function(){return 0|y.g(4)},b.quick=function(){return y.g(4)/0x100000000},b.double=b,p(d(y.S),t),(c.pass||f||function(e,t,r,s){return(s&&(s.S&&h(s,y),e.state=function(){return h(y,{})}),r)?(n[a]=e,t):e})(b,g,"global"in c?c.global:this==n,c.state)}function u(e){var t,n=e.length,r=this,a=0,s=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);a<256;)i[a]=a++;for(a=0;a<256;a++)i[a]=i[s=255&s+e[a%n]+(t=i[a])],i[s]=t;(r.g=function(e){for(var t,n=0,a=r.i,s=r.j,i=r.S;e--;)t=i[a=255&a+1],n=256*n+i[255&(i[a]=i[s=255&s+t])+(i[s]=t)];return r.i=a,r.j=s,n})(256)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){for(var n,r=e+"",a=0;a<r.length;)t[255&a]=255&(n^=19*t[255&a])+r.charCodeAt(a++);return d(t)}function d(e){return String.fromCharCode.apply(0,e)}if(p(n.random(),t),lJ){lJ=l;try{r=_("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd?define(function(){return l}):n["seed"+a]=l}("undefined"!=typeof self?self:lJ,[],Math),lJ.alea=lq,lJ.xor128=lj,lJ.xorwow=lK,lJ.xorshift7=lX,lJ.xor4096=lY,lJ.tychei=lZ,lH=lJ;class lQ{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);let s=a||Math.random();this.random=lH.alea(s.toString())}nextValue(){let e,t;if(!isNaN(this.nextVal)){let e=this.nextVal;return this.nextVal=NaN,e}let n=!1;for(;!n;){let r,a,s;do s=(r=2*this.random()-1)*r+(a=2*this.random()-1)*a;while(s>=1||0===s)let i=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*a*i,(!this.truncated||this.isValidTruncated(e))&&(n=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class l0{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;let a=r||Math.random();this.randu=lH.alea(a.toString()),this.randn=new lQ(0,1,n,!1,this.randu()),e<1?this.d=e+2/3:this.d=e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do r=this.randn.nextValue(),s=1+this.c*r;while(s<=0)if(s*=s*s,t=1-.331*(e=r*r)*e,n=.5*e+this.d*(1-s+Math.log(s)),(a=this.randu())<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class l1{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=lH.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}let l2=aF({randomUniform_:function(e,t=0,n=1,r="float32",a){let s=sQ(e,r),i=new l1(t,n,null,a);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),l3=aF({dropout_:function(e,t,n,r){let a=aE(e,"x","dropout");if(K("float32"===a.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`),K(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof as?a.clone():a;let s=function(e,t){if(null==t)return e.shape.slice();if(ee(e.shape,t))return t;if(e.shape.length===t.length){let n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),i=1-t;return iV(a,lU(lG(s4(l2(s,0,1,"float32",r),i)),i))}}),l4=aF({equal_:function(e,t){let n=aE(e,"a","equal","string_or_numeric"),r=aE(t,"b","equal","string_or_numeric");[n,r]=ad(n,r),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(tD,a)}}),l6=aF({exp_:function(e){let t=aE(e,"x","exp");return av.runKernel("Exp",{x:t})}}),l5=aF({expandDims_:function(e,t=0){let n=aE(e,"x","expandDims","string_or_numeric");return K(t<=n.rank,()=>"Axis must be <= rank of the tensor"),av.runKernel(t_,{input:n},{dim:t})}}),l8=aF({tile_:function(e,t){let n=aE(e,"x","tile","string_or_numeric");return K(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`),av.runKernel(n3,{x:n},{reps:t})}}),l7=aF({eye_:function(e,t,n,r="float32"){null==t&&(t=e);let a=sQ([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);let i=im(a.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return l8(l5(i,0),[n[0],1,1]);if(2===n.length)return l8(l5(l5(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return l8(l5(l5(l5(i,0),0),0),[n[0],n[1],n[2],1,1]);throw Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var l9={};l(l9,"conv2d",()=>un),l(l9,"depthwiseConv2d",()=>us),l(l9,"matMul",()=>uo);function ue(e){return av.customGrad(e)}let ut=aF({conv2DBackpropFilter_:function(e,t,n,r,a,s="NHWC",i){let o=e;3===e.rank&&(o=im(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=im(t,[1,t.shape[0],t.shape[1],t.shape[2]])),K(4===o.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`),K(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),K(4===n.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);let u="NHWC"===s?o.shape[3]:o.shape[1],h="NHWC"===s?l.shape[3]:l.shape[1];K(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),K(h===n[3],()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`),ic("conv2dDerFilter",a,i);let p={x:o,dy:l};return av.runKernel(td,p,{strides:r,pad:a,dataFormat:s,dimRoundingMode:i,filterShape:n})}}),un=aF({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:h}){let p,d;if(l=l||"linear",!1===iQ(av.state.gradientDepth,l)){K("NHWC"===a,()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let p=lD(e,t,n,r,a,s,i);return null!=o&&(p=s4(p,o)),iJ(p,l,u,h)}let c=aE(e,"x","conv2d","float32"),f=aE(t,"filter","conv2d","float32"),m=c,g=!1;3===c.rank&&(g=!0,m=im(c,[1,c.shape[0],c.shape[1],c.shape[2]])),K(4===m.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`),K(4===f.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`),ic("fused conv2d",r,i);let y="NHWC"===a?m.shape[3]:m.shape[1];K(f.shape[2]===y,()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`),K(ip(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);let b=ir(m.shape,f.shape,n,s,r,i);if(null!=o&&(p=aE(o,"bias","fused conv2d"),[p]=ad(p,c),"NHWC"===a?iM(b.outShape,p.shape):(K(p.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${p.shape.length}.`),K(0===p.shape.length||p.shape[0]===b.outChannels||1===p.shape[0],()=>`Error in fused conv2d: bias shape (${p.shape}) is not compatible with the number of output channels (${b.outChannels})`))),null!=u){let e=u.shape;if(K(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)K(1===e[0]||e[0]===b.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${b.outChannels}).`);else if(3===e.length)try{iM(e,b.outShape)}catch(t){throw Error(`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${b.outShape}).`)}d=aE(u,"prelu weights","fused conv2d")}let x=(e,t)=>{K("NHWC"===a,()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`);let[i,o,u,h]=t,p=iY(e,u,l);K(ih(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let d=[lO(o.shape,p,i,n,r),ut(o,p,i.shape,n,r)];if(null!=h){let e=iZ(h,p);d.push(e)}return d},v={x:m,filter:f,bias:p,preluActivationWeights:d},k={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:h};return null==o?ue((e,t,n)=>{let r=av.runKernel(rs,v,k);return n([t,e,r]),g&&(r=im(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}})(m,f):ue((e,t,n,r)=>{let a=av.runKernel(rs,v,k);return r([t,e,a,n]),g&&(a=im(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}})(m,f,p)}}),ur=aF({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,a,s=[1,1],i){let o=e;3===e.rank&&(o=im(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=im(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:o,dy:l};return av.runKernel(tS,u,{strides:r,pad:a,dimRoundingMode:i,dilations:s,filterShape:n})}}),ua=aF({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,a,s=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=im(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:o,filter:n},h=av.runKernel(tN,u,{strides:r,pad:a,dimRoundingMode:i,dilations:s,inputShape:e});return l?im(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),us=aF({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:h}){let p,d;if(!1===iQ(av.state.gradientDepth,l)){let p=lB(e,t,n,r,a,s,i);return null!=o&&(p=s4(p,o)),iJ(p,l,u,h)}let c=aE(e,"x","depthwiseConv2d","float32"),f=aE(t,"filter","depthwiseConv2d","float32"),m=c,g=!1;3===c.rank&&(g=!0,m=im(c,[1,c.shape[0],c.shape[1],c.shape[2]])),K(4===m.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`),K(4===f.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`),K(m.shape[3]===f.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`),null==s&&(s=[1,1]),K(ip(n,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),ic("fused depthwiseConv2d",r,i);let y=ir(m.shape,f.shape,n,s,r,i,!0);null!=o&&(p=aE(o,"bias","fused conv2d"),[p]=ad(p,c),iM(y.outShape,p.shape)),null!=u&&(d=aE(u,"prelu weights","fused depthwiseConv2d"));let b=(e,t)=>{K(ih(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[a,o,u,h]=t,d=iY(e,u,l),c=ua(o.shape,d,a,n,r,s,i),f=ur(o,d,a.shape,n,r,s,i);return null!=h?[c,f,iZ(p,d)]:[c,f]},x={x:m,filter:f,bias:p,preluActivationWeights:d},v={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:h};return null==o?ue((e,t,n)=>{let r=av.runKernel(ri,x,v);return n([t,e,r]),g&&(r=im(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(m,f):ue((e,t,n,r)=>{let a=av.runKernel(ri,x,v);return r([t,e,a,n]),g&&(a=im(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}})(m,f,p)}}),ui=aF({matMul_:function(e,t,n=!1,r=!1){let a=aE(e,"a","matMul"),s=aE(t,"b","matMul");[a,s]=ad(a,s);let i={a:a,b:s};return av.runKernel(tt,i,{transposeA:n,transposeB:r})}}),uo=aF({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:a,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){let l,u;if(!1===iQ(av.state.gradientDepth,s)){let l=ui(e,t,n,r);return null!=a&&(l=s4(l,a)),iJ(l,s,i,o)}let h=aE(e,"a","fused matMul"),p=aE(t,"b","fused matMul");[h,p]=ad(h,p);let d=n?h.shape[h.rank-2]:h.shape[h.rank-1],c=r?p.shape[p.rank-1]:p.shape[p.rank-2],f=n?h.shape[h.rank-1]:h.shape[h.rank-2],m=r?p.shape[p.rank-2]:p.shape[p.rank-1],g=h.shape.slice(0,-2),y=p.shape.slice(0,-2),b=J(g),x=J(y);K(d===c,()=>`Error in fused matMul: inner shapes (${d}) and (${c}) of Tensors with shapes ${h.shape} and ${p.shape} and transposeA=${n} and transposeB=${r} must match.`);let v=iM(h.shape.slice(0,-2),p.shape.slice(0,-2)).concat([f,m]),k=n?im(h,[b,d,f]):im(h,[b,f,d]),w=r?im(p,[x,m,c]):im(p,[x,c,m]);null!=a&&(l=aE(a,"bias","fused matMul"),[l]=ad(l,h),iM(v,l.shape)),null!=i&&(u=aE(i,"prelu weights","fused matMul"));let I=(e,t)=>{let i,o,[l,u,h,p]=t,d=iY(im(e,h.shape),h,s);return(n||r?!n&&r?(i=ui(d,u,!1,!1),o=ui(d,l,!0,!1)):n&&!r?(i=ui(u,d,!1,!0),o=ui(l,d,!1,!1)):(i=ui(u,d,!0,!0),o=ui(d,l,!0,!0)):(i=ui(d,u,!1,!0),o=ui(l,d,!0,!1)),null!=a)?[i,o,iZ(p,d)]:[i,o]},S={a:k,b:w,bias:l,preluActivationWeights:u},N={transposeA:n,transposeB:r,activation:s,leakyreluAlpha:o};return null==a?ue((e,t,n)=>{let r=av.runKernel(ra,S,N);return n([e,t,r]),{value:im(r,v),gradFunc:I}})(k,w):ue((e,t,n,r)=>{let a=av.runKernel(ra,S,N);return r([e,t,a,n]),{value:im(a,v),gradFunc:I}})(k,w,l)}}),ul=aF({gather_:function(e,t,n=0,r=0){let a=aE(e,"x","gather"),s=aE(t,"indices","gather","int32");return av.runKernel(tW,{x:a,indices:s},{axis:n,batchDims:r})}}),uu=aF({greater_:function(e,t){let n=aE(e,"a","greater","string_or_numeric"),r=aE(t,"b","greater","string_or_numeric");[n,r]=ad(n,r),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(tV,a)}}),uh=aF({greaterEqual_:function(e,t){let n=aE(e,"a","greaterEqual","string_or_numeric"),r=aE(t,"b","greaterEqual","string_or_numeric");[n,r]=ad(n,r),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(tG,a)}});var up={};l(up,"spectral",()=>dI),l(up,"signal",()=>dS),l(up,"image",()=>dN),l(up,"linalg",()=>dT),l(up,"losses",()=>dC),l(up,"sparse",()=>d$),l(up,"string",()=>dE),l(up,"abs",()=>s3),l(up,"acos",()=>ud),l(up,"acosh",()=>uc),l(up,"add",()=>s4),l(up,"addN",()=>uf),l(up,"all",()=>s6),l(up,"any",()=>s5),l(up,"argMax",()=>s8),l(up,"argMin",()=>um),l(up,"asin",()=>ug),l(up,"asinh",()=>uy),l(up,"atan",()=>ub),l(up,"atan2",()=>ux),l(up,"atanh",()=>uv),l(up,"avgPool",()=>ig),l(up,"avgPool3d",()=>iy),l(up,"basicLSTMCell",()=>uI),l(up,"batchToSpaceND",()=>uS),l(up,"batchNorm",()=>lm),l(up,"batchNorm2d",()=>lg),l(up,"batchNorm3d",()=>ly),l(up,"batchNorm4d",()=>lb),l(up,"bincount",()=>uN),l(up,"broadcastArgs",()=>uT),l(up,"broadcastTo",()=>lx),l(up,"buffer",()=>sQ),l(up,"cast",()=>s0),l(up,"ceil",()=>uC),l(up,"clipByValue",()=>lC),l(up,"clone",()=>s1),l(up,"complex",()=>aD),l(up,"concat",()=>l$),l(up,"concat1d",()=>lE),l(up,"concat2d",()=>lA),l(up,"concat3d",()=>lR),l(up,"concat4d",()=>lF),l(up,"conv1d",()=>l_),l(up,"conv2d",()=>lD),l(up,"conv2dTranspose",()=>lM),l(up,"conv3d",()=>lL),l(up,"conv3dTranspose",()=>lP),l(up,"cos",()=>u$),l(up,"cosh",()=>uE),l(up,"cumprod",()=>uA),l(up,"cumsum",()=>uR),l(up,"denseBincount",()=>uF),l(up,"depthToSpace",()=>uD),l(up,"depthwiseConv2d",()=>lB),l(up,"diag",()=>u_),l(up,"dilation2d",()=>uO),l(up,"div",()=>lU),l(up,"divNoNan",()=>uz),l(up,"dot",()=>uP),l(up,"einsum",()=>uB),l(up,"elu",()=>iW),l(up,"equal",()=>l4),l(up,"erf",()=>uW),l(up,"euclideanNorm",()=>uY),l(up,"exp",()=>l6),l(up,"expandDims",()=>l5),l(up,"expm1",()=>uZ),l(up,"eye",()=>l7),l(up,"fill",()=>lT),l(up,"floor",()=>lG),l(up,"floorDiv",()=>lW),l(up,"gather",()=>ul),l(up,"greater",()=>uu),l(up,"greaterEqual",()=>uh),l(up,"imag",()=>uJ),l(up,"isFinite",()=>uQ),l(up,"isInf",()=>u0),l(up,"isNaN",()=>u1),l(up,"leakyRelu",()=>iU),l(up,"less",()=>u2),l(up,"lessEqual",()=>u3),l(up,"linspace",()=>u4),l(up,"localResponseNormalization",()=>u6),l(up,"log",()=>u5),l(up,"log1p",()=>u8),l(up,"logSigmoid",()=>he),l(up,"logSoftmax",()=>hn),l(up,"logSumExp",()=>hr),l(up,"logicalAnd",()=>ha),l(up,"logicalNot",()=>hs),l(up,"logicalOr",()=>hi),l(up,"logicalXor",()=>ho),l(up,"lowerBound",()=>hh),l(up,"matMul",()=>ui),l(up,"max",()=>uV),l(up,"maxPool",()=>hp),l(up,"maxPool3d",()=>hd),l(up,"maxPoolWithArgmax",()=>hc),l(up,"maximum",()=>hf),l(up,"mean",()=>hm),l(up,"meshgrid",()=>hb),l(up,"min",()=>uG),l(up,"minimum",()=>hx),l(up,"mirrorPad",()=>hv),l(up,"mod",()=>hk),l(up,"moments",()=>hw),l(up,"mul",()=>iV),l(up,"multiRNNCell",()=>hI),l(up,"multinomial",()=>hS),l(up,"neg",()=>u7),l(up,"notEqual",()=>hN),l(up,"oneHot",()=>hT),l(up,"ones",()=>hy),l(up,"onesLike",()=>hC),l(up,"outerProduct",()=>h$),l(up,"pad",()=>hE),l(up,"pad1d",()=>hA),l(up,"pad2d",()=>hR),l(up,"pad3d",()=>hF),l(up,"pad4d",()=>hD),l(up,"pool",()=>hO),l(up,"pow",()=>uH),l(up,"prelu",()=>iG),l(up,"print",()=>s2),l(up,"prod",()=>hM),l(up,"raggedGather",()=>hL),l(up,"raggedTensorToTensor",()=>hz),l(up,"rand",()=>hP),l(up,"randomGamma",()=>hB),l(up,"randomNormal",()=>hW),l(up,"randomStandardNormal",()=>hU),l(up,"randomUniform",()=>l2),l(up,"range",()=>hV),l(up,"real",()=>hG),l(up,"reciprocal",()=>hH),l(up,"relu",()=>iH),l(up,"relu6",()=>iq),l(up,"reshape",()=>im),l(up,"reverse",()=>hq),l(up,"reverse1d",()=>hj),l(up,"reverse2d",()=>hK),l(up,"reverse3d",()=>hX),l(up,"reverse4d",()=>hY),l(up,"round",()=>hZ),l(up,"rsqrt",()=>hJ),l(up,"scalar",()=>uq),l(up,"selu",()=>hQ),l(up,"separableConv2d",()=>h0),l(up,"setdiff1dAsync",()=>h1),l(up,"sigmoid",()=>ij),l(up,"sign",()=>h2),l(up,"sin",()=>h3),l(up,"sinh",()=>h4),l(up,"slice",()=>uk),l(up,"slice1d",()=>h6),l(up,"slice2d",()=>h5),l(up,"slice3d",()=>h8),l(up,"slice4d",()=>h7),l(up,"softmax",()=>h9),l(up,"softplus",()=>u9),l(up,"spaceToBatchND",()=>h_),l(up,"fft",()=>pe),l(up,"ifft",()=>pt),l(up,"irfft",()=>pn),l(up,"rfft",()=>pa),l(up,"split",()=>pr),l(up,"sqrt",()=>uj),l(up,"square",()=>uK),l(up,"squaredDifference",()=>ps),l(up,"squeeze",()=>pi),l(up,"stack",()=>po),l(up,"step",()=>iK),l(up,"stridedSlice",()=>pl),l(up,"sub",()=>ht),l(up,"sum",()=>iX),l(up,"tan",()=>pu),l(up,"tanh",()=>uw),l(up,"tensor",()=>aO),l(up,"tensor1d",()=>ph),l(up,"tensor2d",()=>pp),l(up,"tensor3d",()=>lk),l(up,"tensor4d",()=>pd),l(up,"tensor5d",()=>pc),l(up,"tensor6d",()=>pf),l(up,"tile",()=>l8),l(up,"topk",()=>pm),l(up,"truncatedNormal",()=>pg),l(up,"unique",()=>py),l(up,"unsortedSegmentSum",()=>pb),l(up,"unstack",()=>px),l(up,"upperBound",()=>pv),l(up,"variable",()=>pk),l(up,"where",()=>uM),l(up,"whereAsync",()=>pI),l(up,"zeros",()=>hg),l(up,"zerosLike",()=>uL),l(up,"op",()=>aF),l(up,"OP_SCOPE_SUFFIX",()=>aR),l(up,"fused",()=>l9);let ud=aF({acos_:function(e){let t=aE(e,"x","acos");return av.runKernel(eZ,{x:t})}}),uc=aF({acosh_:function(e){let t=aE(e,"x","acosh");return av.runKernel(eJ,{x:t})}}),uf=aF({addN_:function(e){K(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),K(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);let t=e.map((e,t)=>aE(e,`tensors${t}`,"addN")),n=t[0];return t.forEach(e=>{if(e.dtype!==n.dtype)throw Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!ee(e.shape,n.shape))throw Error("All tensors passed to tf.addN() must have the same shape")}),av.runKernel(eQ,t)}}),um=aF({argMin_:function(e,t=0){let n=aE(e,"x","argMin");return av.runKernel(e1,{x:n},{axis:t})}}),ug=aF({asin_:function(e){let t=aE(e,"x","asin");return av.runKernel(e2,{x:t})}}),uy=aF({asinh_:function(e){let t=aE(e,"x","asinh");return av.runKernel(e3,{x:t})}}),ub=aF({atan_:function(e){let t=aE(e,"x","atan");return av.runKernel(e4,{x:t})}}),ux=aF({atan2_:function(e,t){let n=aE(e,"a","atan2"),r=aE(t,"b","atan2");[n,r]=ad(n,r);let a={a:n,b:r};return av.runKernel(e5,a)}}),uv=aF({atanh_:function(e){let t=aE(e,"x","atanh");return av.runKernel(e6,{x:t})}}),uk=aF({slice_:function(e,t,n){let r=aE(e,"x","slice","string_or_numeric");if(0===r.rank)throw Error("Slicing scalar is not possible");return av.runKernel(nM,{x:r},{begin:t,size:n})}}),uw=aF({tanh_:function(e){let t=aE(e,"x","tanh","float32");return av.runKernel(n2,{x:t})}}),uI=aF({basicLSTMCell_:function(e,t,n,r,a,s){let i=aE(e,"forgetBias","basicLSTMCell"),o=aE(t,"lstmKernel","basicLSTMCell"),l=aE(n,"lstmBias","basicLSTMCell"),u=aE(r,"data","basicLSTMCell"),h=aE(a,"c","basicLSTMCell"),p=s4(ui(l$([u,aE(s,"h","basicLSTMCell")],1),o),l),d=p.shape[0],c=p.shape[1]/4,f=[d,c],m=uk(p,[0,0],f),g=uk(p,[0,c],f),y=uk(p,[0,2*c],f),b=uk(p,[0,3*c],f),x=s4(iV(ij(m),uw(g)),iV(h,ij(s4(i,y)))),v=iV(uw(x),ij(b));return[x,v]}}),uS=aF({batchToSpaceND_:function(e,t,n){let r=aE(e,"x","batchToSpaceND"),a=t.reduce((e,t)=>e*t);return K(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),K(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),K(r.shape[0]%a==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`),av.runKernel(tn,{x:r},{blockShape:t,crops:n})}}),uN=aF({bincount_:function(e,t,n){let r=aE(e,"x","bincount"),a=aE(t,"weights","bincount");return K("int32"===r.dtype,()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`),K(n>=0,()=>`size must be non-negative, but got ${n}.`),K(a.size===r.size||0===a.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${a.shape}.`),av.runKernel(tr,{x:r,weights:a},{size:n})}}),uT=aF({broadcastArgs_:function(e,t){let n=aE(e,"s0","broadcastArgs","int32"),r=aE(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);return av.runKernel(ta,{s0:n,s1:r})}}),uC=aF({ceil_:function(e){let t=aE(e,"x","ceil","float32");return av.runKernel(ti,{x:t})}}),u$=aF({cos_:function(e){let t=aE(e,"x","cos","float32");return av.runKernel("Cos",{x:t})}}),uE=aF({cosh_:function(e){let t=aE(e,"x","cosh","float32");return av.runKernel(ty,{x:t})}}),uA=aF({cumprod_:function(e,t=0,n=!1,r=!1){let a=aE(e,"x","cumprod");return av.runKernel(tb,{x:a},{axis:t,exclusive:n,reverse:r})}}),uR=aF({cumsum_:function(e,t=0,n=!1,r=!1){let a=aE(e,"x","cumsum");return av.runKernel(tx,{x:a},{axis:t,exclusive:n,reverse:r})}}),uF=aF({denseBincount_:function(e,t,n,r=!1){let a=aE(e,"x","denseBincount"),s=aE(t,"weights","denseBincount");return K("int32"===a.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`),K(a.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`),K(n>=0,()=>`size must be non-negative, but got ${n}.`),K(s.size===a.size||0===s.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${s.shape}.`),av.runKernel(tk,{x:a,weights:s},{size:n,binaryOutput:r})}}),uD=aF({depthToSpace_:function(e,t,n="NHWC"){let r=aE(e,"x","depthToSpace","float32"),a="NHWC"===n?r.shape[1]:r.shape[2],s="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return K(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),K(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${a} and ${t}  for depthToSpace with input shape
    ${r.shape}`),K(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${r.shape}`),K(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`),av.runKernel(tw,{x:r},{blockSize:t,dataFormat:n})}}),u_=aF({diag_:function(e){let t=aE(e,"x","diag");return av.runKernel(tT,{x:t})}}),uO=aF({dilation2d_:function(e,t,n,r,a=[1,1],s="NHWC"){let i=aE(e,"x","dilation2d"),o=aE(t,"filter","dilation2d");K(3===i.rank||4===i.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),K(3===o.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`),K("NHWC"===s,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let l=i,u=!1;3===i.rank&&(l=im(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);let h={x:l,filter:o},p=av.runKernel(tC,h,{strides:n,pad:r,dilations:a});return u?im(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),uM=aF({where_:function(e,t,n){let r=aE(t,"a","where"),a=aE(n,"b","where"),s=aE(e,"condition","where","bool"),i=iM(iM(s.shape,r.shape),a.shape),o=lx(s,i),l=lx(r,i),u=lx(a,i);return av.runKernel(n_,{condition:o,t:l,e:u})}}),uL=aF({zerosLike_:function(e){let t=aE(e,"x","zerosLike");return av.runKernel(re,{x:t})}}),uz=aF({divNoNan_:function(e,t){let n=aE(e,"a","div"),r=aE(t,"b","div");[n,r]=ad(n,r);let a=lU(n,r),s=uL(a);return uM(l4(r,s),s,a)}}),uP=aF({dot_:function(e,t){let n=aE(e,"t1","dot"),r=aE(t,"t2","dot");K((1===n.rank||2===n.rank)&&(1===r.rank||2===r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);let a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(K(a===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`),1===n.rank&&1===r.rank){let e=ui(im(n,[1,-1]),im(r,[-1,1]));return im(e,[])}if(1===n.rank&&2===r.rank){let e=ui(im(n,[1,-1]),im(r,[r.shape[0],r.shape[1]]));return im(e,[e.size])}if(2!==n.rank||1!==r.rank)return ui(n,im(r,[r.shape[0],r.shape[1]]));{let e=ui(n,im(r,[-1,1]));return im(e,[e.size])}}}),uB=aF({einsum_:function(e,...t){let n=t.map((e,t)=>aE(e,`tensors${t}`,"einsum"));return av.runKernel(tR,n,{equation:e})}}),uW=aF({erf_:function(e){let t=aE(e,"x","erf");K("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=s0(t,"float32"));let n={x:t};return av.runKernel("Erf",n)}});var uU={};l(uU,"norm",()=>uX);let uV=aF({max_:function(e,t=null,n=!1){let r=aE(e,"x","max");return av.runKernel("Max",{x:r},{reductionIndices:t,keepDims:n})}}),uG=aF({min_:function(e,t=null,n=!1){let r=aE(e,"x","min");return av.runKernel("Min",{x:r},{axis:t,keepDims:n})}}),uH=aF({pow_:function(e,t){let n=aE(e,"base","pow"),r=aE(t,"exp","pow");[n,r]=ad(n,r);let a={a:n,b:r};return av.runKernel("Pow",a)}});function uq(e,t){if((em(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&em(e)&&!(e instanceof Uint8Array))throw Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return a_(e,[],[],t)}let uj=aF({sqrt_:function(e){let t=aE(e,"x","sqrt","float32");return av.runKernel(nW,{x:t})}}),uK=aF({square_:function(e){let t=aE(e,"x","square");return av.runKernel("Square",{x:t},{})}}),uX=aF({norm_:function(e,t="euclidean",n=null,r=!1){let a=function e(t,n,r=null){if(0===t.rank)return s3(t);if(1!==t.rank&&null===r)return e(im(t,[-1]),n,r);if(1===t.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return iX(s3(t),r);if(n===1/0)return uV(s3(t),r);if(n===-1/0)return uG(s3(t),r);if("euclidean"===n||2===n)return uj(iX(uH(s3(t),uq(2,"int32")),r));throw Error(`Error in norm: invalid ord value: ${n}`)}if(Array.isArray(r)&&2===r.length){if(1===n)return uV(iX(s3(t),r[0]),r[1]-1);if(n===1/0)return uV(iX(s3(t),r[1]),r[0]);if(n===-1/0)return uG(iX(s3(t),r[1]),r[0]);if("fro"===n||"euclidean"===n)return uj(iX(uK(t),r));throw Error(`Error in norm: invalid ord value: ${n}`)}throw Error(`Error in norm: invalid axis: ${r}`)}(e=aE(e,"x","norm"),t,n),s=a.shape;if(r){let t=el(n,e.shape);s=i$(a.shape,t)}return im(a,s)}}),uY=aF({euclideanNorm_:function(e,t=null,n=!1){return uX(e,"euclidean",t,n)}}),uZ=aF({expm1_:function(e){let t=aE(e,"x","expm1");return av.runKernel(tO,{x:t})}}),uJ=aF({imag_:function(e){let t=aE(e,"input","imag");return av.runKernel(tj,{input:t})}}),uQ=aF({isFinite_:function(e){let t=aE(e,"x","isFinite");return av.runKernel(tK,{x:t})}}),u0=aF({isInf_:function(e){let t=aE(e,"x","isInf");return av.runKernel(tX,{x:t})}}),u1=aF({isNaN_:function(e){let t=aE(e,"x","isNaN");return av.runKernel(tY,{x:t})}}),u2=aF({less_:function(e,t){let n=aE(e,"a","less","string_or_numeric"),r=aE(t,"b","less","string_or_numeric");[n,r]=ad(n,r),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(tJ,a)}}),u3=aF({lessEqual_:function(e,t){let n=aE(e,"a","lessEqual","string_or_numeric"),r=aE(t,"b","lessEqual","string_or_numeric");[n,r]=ad(n,r),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(tQ,a)}});function u4(e,t,n){if(n<=0)throw Error("The number of values should be positive.");return av.runKernel(t0,{},{start:e,stop:t,num:n})}let u6=aF({localResponseNormalization_:function(e,t=5,n=1,r=1,a=.5){let s=aE(e,"x","localResponseNormalization");K(4===s.rank||3===s.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),K(et(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=s,o=!1;3===s.rank&&(o=!0,i=im(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let l={x:i},u=av.runKernel("LRN",l,{depthRadius:t,bias:n,alpha:r,beta:a});return o?im(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),u5=aF({log_:function(e){let t=aE(e,"x","log","float32");return av.runKernel("Log",{x:t})}}),u8=aF({log1p_:function(e){let t=aE(e,"x","log1p");return av.runKernel(t1,{x:t})}}),u7=aF({neg_:function(e){let t=aE(e,"x","neg");return av.runKernel("Neg",{x:t})}}),u9=aF({softplus_:function(e){let t=aE(e,"x","softplus");return av.runKernel(nB,{x:t})}}),he=aF({logSigmoid_:function(e){let t=aE(e,"x","logSigmoid");return ue(e=>({value:u7(u9(u7(e))),gradFunc:t=>iV(t,ij(u7(e)))}))(t)}}),ht=aF({sub_:function(e,t){let n=aE(e,"a","sub"),r=aE(t,"b","sub");[n,r]=ad(n,r);let a={a:n,b:r};return av.runKernel("Sub",a)}}),hn=aF({logSoftmax_:function(e,t=-1){let n=aE(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return ue((e,n)=>{let r=uV(e,t,!0),a=ht(e,r),s=ht(s0(a,"float32"),u5(iX(l6(a),t,!0)));return n([s]),{value:s,gradFunc:(e,n)=>{let[r]=n,a=l6(r);return ht(e,iV(iX(e,t,!0),a))}}})(n)}}),hr=aF({logSumExp_:function(e,t=null,n=!1){let r=aE(e,"x","logSumExp"),a=el(t,r.shape),s=uV(r,a,!0),i=u5(iX(l6(ht(r,s)),a)),o=s4(im(s,i.shape),i);if(n){let e=i$(o.shape,a);return im(o,e)}return o}}),ha=aF({logicalAnd_:function(e,t){let n=aE(e,"a","logicalAnd","bool"),r=aE(t,"b","logicalAnd","bool");return iM(n.shape,r.shape),av.runKernel(t2,{a:n,b:r})}}),hs=aF({logicalNot_:function(e){let t=aE(e,"x","logicalNot","bool");return av.runKernel(t3,{x:t})}}),hi=aF({logicalOr_:function(e,t){let n=aE(e,"a","logicalOr","bool"),r=aE(t,"b","logicalOr","bool");return iM(n.shape,r.shape),av.runKernel(t4,{a:n,b:r})}}),ho=aF({logicalXor_:function(e,t){let n=aE(e,"a","logicalXor","bool"),r=aE(t,"b","logicalXor","bool");return iM(n.shape,r.shape),ha(hi(e,t),hs(ha(e,t)))}});var hl={};l(hl,"searchSorted",()=>hu);let hu=aF({searchSorted_:function(e,t,n="left"){let r=aE(e,"sortedSequence","searchSorted"),a=aE(t,"values","searchSorted"),s=r.shape[r.shape.length-1],i=a.shape[a.shape.length-1],o=im(r,[-1,s]),l=im(a,[-1,i]);if(o.rank<2)throw Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(J(l.shape)>=0x80000000)throw Error("values tensor size must less than 2147483648");if(o.shape[1]>=0x80000000)throw Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);return av.runKernel(nD,{sortedSequence:o,values:l},{side:n})}});function hh(e,t){return hu(e,t,"left")}let hp=aF({maxPool_:function(e,t,n,r,a){let s=aE(e,"x","maxPool"),i=s,o=!1;3===s.rank&&(o=!0,i=im(s,[1,s.shape[0],s.shape[1],s.shape[2]])),K(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),K(ip(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),ic("maxPool",r,a);let l={x:i},u=av.runKernel(t8,l,{filterSize:t,strides:n,pad:r,dimRoundingMode:a});return o?im(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),hd=aF({maxPool3d_:function(e,t=[1,1,1],n,r,a,s="NDHWC"){let i=aE(e,"x","maxPool3d"),o=i,l=!1;4===i.rank&&(l=!0,o=im(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),K(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),K("NDHWC"===s,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),ic("maxPool3d",r,a);let u={x:o},h=av.runKernel(t9,u,{filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s});return l?im(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),hc=aF({maxPoolWithArgmax_:function(e,t,n,r,a=!1){let s=aE(e,"x","maxPoolWithArgmax"),i=av.runKernel(nt,{x:s},{filterSize:t,strides:n,pad:r,includeBatchInIndex:a});return{result:i[0],indexes:i[1]}}}),hf=aF({maximum_:function(e,t){let n=aE(e,"a","maximum"),r=aE(t,"b","maximum");[n,r]=ad(n,r),"bool"===n.dtype&&(n=s0(n,"int32"),r=s0(r,"int32")),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(t5,a)}}),hm=aF({mean_:function(e,t=null,n=!1){let r=aE(e,"x","mean");return av.runKernel(nn,{x:r},{axis:t,keepDims:n})}});function hg(e,t="float32"){if("complex64"===t)return aD(hg(e,"float32"),hg(e,"float32"));let n=eC(J(e),t);return av.makeTensor(n,e,t)}function hy(e,t="float32"){if("complex64"===t)return aD(hy(e,"float32"),hg(e,"float32"));let n=eT(J(e),t);return av.makeTensor(n,e,t)}function hb(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=aE(e,"x","meshgrid",e instanceof as?e.dtype:"float32");if(void 0===t)return[r];let a=aE(t,"y","meshgrid",t instanceof as?t.dtype:"float32"),s=J(r.shape),i=J(a.shape);return"xy"===n?(r=im(r,[1,-1]),a=im(a,[-1,1]),[ui(hy([i,1],r.dtype),r),ui(a,hy([1,s],a.dtype))]):(r=im(r,[-1,1]),a=im(a,[1,-1]),[ui(r,hy([1,i],r.dtype)),ui(hy([s,1],a.dtype),a)])}let hx=aF({minimum_:function(e,t){let n=aE(e,"a","minimum"),r=aE(t,"b","minimum");[n,r]=ad(n,r),"bool"===n.dtype&&(n=s0(n,"int32"),r=s0(r,"int32")),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(nr,a)}}),hv=aF({mirrorPad_:function(e,t,n){K("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);let r=aE(e,"x","mirrorPad");if(0===r.rank)throw Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");K(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);let a=+("reflect"===n);for(let e=0;e<r.rank;e++)K(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),K(t[e][0]>=0&&t[e][0]<=r.shape[e]-a&&t[e][1]>=0&&t[e][1]<=r.shape[e]-a,()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-a} or less than 0 for input of shape ${r.shape}`);return av.runKernel(na,{x:r},{paddings:t,mode:n})}}),hk=aF({mod_:function(e,t){let n=aE(e,"a","mod"),r=aE(t,"b","mod");[n,r]=ad(n,r);let a={a:n,b:r};return av.runKernel("Mod",a)}}),hw=aF({moments_:function(e,t=null,n=!1){let r=el(t,(e=aE(e,"x","moments")).shape),a=hm(e,r,n),s=a.shape;n||(s=i$(a.shape,r));let i=hm(uK(ht(s0(e,"float32"),im(a,s))),r,n);return{mean:a,variance:i}}}),hI=aF({multiRNNCell_:function(e,t,n,r){let a=aE(t,"data","multiRNNCell"),s=aA(n,"c","multiRNNCell"),i=aA(r,"h","multiRNNCell"),o=a,l=[];for(let t=0;t<e.length;t++){let n=e[t](o,s[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}let u=[],h=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),h.push(l[e+1]);return[u,h]}}),hS=aF({multinomial_:function(e,t,n,r=!1){let a=aE(e,"logits","multinomial"),s=a.size,i=a.rank;if(s<2)throw Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(i>2)throw Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();let o=1===i?im(a,[1,-1]):a,l={numSamples:t,seed:n,normalized:r},u=av.runKernel(ns,{logits:o},l);return 1===i?im(u,[u.size]):u}}),hN=aF({notEqual_:function(e,t){let n=aE(e,"a","notEqual","string_or_numeric"),r=aE(t,"b","notEqual","string_or_numeric");[n,r]=ad(n,r),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(no,a)}}),hT=aF({oneHot_:function(e,t,n=1,r=0,a="int32"){if(t<2)throw Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let s=aE(e,"indices","oneHot","int32");return av.runKernel(nd,{indices:s},{dtype:a,depth:t,onValue:n,offValue:r})}}),hC=aF({onesLike_:function(e){let t=aE(e,"x","onesLike");return av.runKernel(np,{x:t})}}),h$=aF({outerProduct_:function(e,t){let n=aE(e,"v1","outerProduct"),r=aE(t,"v2","outerProduct");return K(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`),ui(im(n,[-1,1]),im(r,[1,-1]))}}),hE=aF({pad_:function(e,t,n=0){let r=aE(e,"x","pad");if(0===r.rank)throw Error("pad(scalar) is not defined. Pass non-scalar to pad");return av.runKernel(nf,{x:r},{paddings:t,constantValue:n})}}),hA=aF({pad1d_:function(e,t,n=0){return K(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),hE(e,[t],n)}}),hR=aF({pad2d_:function(e,t,n=0){return K(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),hE(e,t,n)}}),hF=aF({pad3d_:function(e,t,n=0){return K(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),hE(e,t,n)}}),hD=aF({pad4d_:function(e,t,n=0){return K(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),hE(e,t,n)}}),h_=aF({spaceToBatchND_:function(e,t,n){let r=aE(e,"x","spaceToBatchND");return K(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),K(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),K(r.shape.reduce((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`),av.runKernel(nU,{x:r},{blockShape:t,paddings:n})}}),hO=aF({pool_:function(e,t,n,r,a,s,i){let o;null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");let l=aE(e,"x","maxPool"),u=l,h=!1;3===l.rank&&(h=!0,u=im(l,[1,l.shape[0],l.shape[1],l.shape[2]])),K(ip(s,a),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`);let p=ie(u.shape,t,s,a,r),d=[p.dilationHeight,p.dilationWidth];o="same"===r?function(e,t){let n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),a=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],a[t]])}([p.filterHeight,p.filterWidth],d):[[0,0],[0,0]];let c=1===d[0]&&1===d[1],[f,m]=function(e,t,n){let r=n.map(e=>e[0]),a=n.map(e=>e[1]),s=e.concat(r,a),i=t.map((e,t)=>(e-s[t]%e)%e),o=a.map((e,t)=>e+i[t]);return[t.map((e,t)=>[r[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([p.inHeight,p.inWidth],d,o),g=c?r:"valid",y=c?u:h_(u,d,f),b=("avg"===n?()=>ig(y,t,s,g,i):()=>hp(y,t,s,g,i))(),x=c?b:uS(b,d,m);return h?im(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),hM=aF({prod_:function(e,t=null,n=!1){let r=aE(e,"x","prod");"bool"===r.dtype&&(r=s0(r,"int32"));let a={x:r};return av.runKernel(ng,a,{axis:t,keepDims:n})}}),hL=aF({raggedGather_:function(e,t,n,r){let a=e.map((e,t)=>aE(e,`tensors${t}`,"raggedGather","int32")),s=aE(t,"paramsDenseValues","raggedGather"),i=aE(n,"indices","raggedGather","int32"),o=av.runKernel(ny,{paramsNestedSplits:a,paramsDenseValues:s,indices:i},{outputRaggedRank:r});return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),hz=aF({raggedTensorToTensor_:function(e,t,n,r,a){let s=aE(e,"shape","raggedTensorToTensor","int32"),i=aE(t,"values","raggedTensorToTensor"),o=aE(n,"defaultValue","raggedTensorToTensor",i.dtype),l=r.map((e,t)=>aE(e,`tensors${t}`,"raggedTensorToTensor","int32"));return av.runKernel(nb,{shape:s,values:i,defaultValue:o,rowPartitionTensors:l},{rowPartitionTypes:a})}}),hP=aF({rand_:function(e,t,n){let r=J(e),a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else if("bool"===n)a=new Uint8Array(r);else throw Error(`Unknown data type ${n}`);for(let e=0;e<r;e++)a[e]=t();return av.makeTensor(a,e,n)}}),hB=aF({randomGamma_:function(e,t,n=1,r="float32",a){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw Error(`Unsupported data type ${r}`);let s=new l0(t,n,r,a),i=sQ(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),hW=aF({randomNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw Error(`Unsupported data type ${r}`);let s=new lQ(t,n,r,!1,a),i=sQ(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),hU=aF({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw Error(`Unsupported data type ${t}`);return hW(e,0,1,t,n)}});function hV(e,t,n=1,r="float32"){if(0===n)throw Error("Cannot have a step of zero");return av.runKernel(nx,{},{start:e,stop:t,step:n,dtype:r})}let hG=aF({real_:function(e){let t=aE(e,"input","real");return av.runKernel(nv,{input:t})}}),hH=aF({reciprocal_:function(e){let t=aE(e,"x","reciprocal");return av.runKernel(nk,{x:t})}}),hq=aF({reverse_:function(e,t){let n=aE(e,"x","reverse");return av.runKernel(nE,{x:n},{dims:t})}}),hj=aF({reverse1d_:function(e){let t=aE(e,"x","reverse");return K(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),hq(t,0)}}),hK=aF({reverse2d_:function(e,t){let n=aE(e,"x","reverse");return K(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),hq(n,t)}}),hX=aF({reverse3d_:function(e,t){let n=aE(e,"x","reverse");return K(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),hq(n,t)}}),hY=aF({reverse4d_:function(e,t){let n=aE(e,"x","reverse");return K(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),hq(n,t)}}),hZ=aF({round_:function(e){let t=aE(e,"x","round");return av.runKernel(nA,{x:t})}}),hJ=aF({rsqrt_:function(e){let t=aE(e,"x","rsqrt","float32");return av.runKernel(nR,{x:t})}}),hQ=aF({selu_:function(e){let t=aE(e,"x","selu");return av.runKernel(nO,{x:t})}}),h0=aF({separableConv2d_:function(e,t,n,r,a,s=[1,1],i="NHWC"){let o=aE(e,"x","separableConv2d"),l=aE(t,"depthwiseFilter","separableConv2d"),u=aE(n,"pointwiseFilter","separableConv2d"),h=o,p=!1;if(3===o.rank&&(p=!0,h=im(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");K(4===h.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`),K(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),K(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),K(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),K(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let d=l.shape[2],c=l.shape[3];K(u.shape[2]===d*c,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*c}, but got ${u.shape[2]}.`);let f=lD(lB(h,l,r,a,i,s),u,1,"valid",i);return p?im(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),h1=async function(e,t){let n=aE(e,"x","setdiff1d"),r=aE(t,"y","setdiff1d");K(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),K(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),K(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);let a=await n.data(),s=new Set(await r.data()),i=0;for(let e=0;e<a.length;e++)!s.has(a[e])&&i++;let o=new an([i],n.dtype),l=new an([i],"int32");for(let e=0,t=0;e<a.length;e++)!s.has(a[e])&&(o.values[t]=a[e],l.values[t]=e,t++);return[o.toTensor(),l.toTensor()]},h2=aF({sign_:function(e){let t=aE(e,"x","sign");return av.runKernel(nz,{x:t})}}),h3=aF({sin_:function(e){let t=aE(e,"x","sin","float32");return av.runKernel("Sin",{x:t})}}),h4=aF({sinh_:function(e){let t=aE(e,"x","sinh");return av.runKernel(nL,{x:t})}}),h6=aF({slice1d_:function(e,t,n){let r=aE(e,"x","slice1d");return K(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),uk(r,[t],[n])}}),h5=aF({slice2d_:function(e,t,n){let r=aE(e,"x","slice2d");return K(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),uk(r,t,n)}}),h8=aF({slice3d_:function(e,t,n){let r=aE(e,"x","slice3d");return K(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),uk(r,t,n)}}),h7=aF({slice4d_:function(e,t,n){let r=aE(e,"x","slice4d");return K(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),uk(r,t,n)}}),h9=aF({softmax_:function(e,t=-1){let n=aE(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);let r={dim:t};return av.runKernel(nG,{logits:n},r)}}),pe=aF({fft_:function(e){return K("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),av.runKernel("FFT",{input:e})}}),pt=aF({ifft_:function(e){return K("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),av.runKernel(tq,{input:e})}}),pn=aF({irfft_:function(e){let t,n=e.shape[e.shape.length-1],r=e.size/n;if(n<=2)t=pt(im(e,[r,n]));else{let a=[r,2*(n-1)],s=im(hG(e),[r,n]),i=im(uJ(e),[r,n]),o=hq(uk(s,[0,1],[r,n-2]),1),l=iV(hq(uk(i,[0,1],[r,n-2]),1),uq(-1));t=pt(im(aD(l$([s,o],1),l$([i,l],1)),[a[0],a[1]]))}if(t=hG(t),3===e.rank&&0!==e.shape[0]){let n=t,r=e.shape[0];t=im(t,[r,t.shape[0]/r,t.shape[1]]),n.dispose()}return t}}),pr=aF({split_:function(e,t,n=0){let r=aE(e,"x","split");return av.runKernel(nV,{x:r},{numOrSizeSplits:t,axis:n})}}),pa=aF({rfft_:function(e,t){let n;K("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let r=e.shape[e.shape.length-1],a=e.size/r;if(null!=t&&t<r){let a=e.shape.map(e=>0),s=e.shape.map(e=>e);s[e.shape.length-1]=t,n=uk(e,a,s),r=t}else if(null!=t&&t>r){let a=e.shape.map(e=>e);a[e.shape.length-1]=t-r,n=l$([e,hg(a)],e.shape.length-1),r=t}else n=e;let s=uL(n),i=pe(im(aD(n,s),[a,r])),o=Math.floor(r/2)+1,l=hG(i),u=uJ(i),h=pr(l,[o,r-o],l.shape.length-1),p=pr(u,[o,r-o],u.shape.length-1),d=n.shape.slice();return d[n.shape.length-1]=o,im(aD(h[0],p[0]),d)}}),ps=aF({squaredDifference_:function(e,t){let n=aE(e,"a","squaredDifference"),r=aE(t,"b","squaredDifference");[n,r]=ad(n,r),iM(n.shape,r.shape);let a={a:n,b:r};return av.runKernel(nY,a,{})}}),pi=aF({squeeze_:function(e,t){let n=aE(e,"x","squeeze","string_or_numeric");return im(n,eu(n.shape,t).newShape)}}),po=aF({stack_:function(e,t=0){let n=aA(e,"tensors","stack","string_or_numeric");return K(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&K(t<=n[0].rank,()=>"Axis must be <= rank of the tensor"),av.runKernel(nc,n,{axis:t})}}),pl=aF({stridedSlice_:function(e,t,n,r,a=0,s=0,i=0,o=0,l=0){let u=aE(e,"x","stridedSlice","string_or_numeric");return av.runKernel(nJ,{x:u},{begin:t,end:n,strides:r,beginMask:a,endMask:s,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l})}}),pu=aF({tan_:function(e){let t=aE(e,"x","tan","float32");return av.runKernel("Tan",{x:t})}});function ph(e,t){Y(e);let n=aC(e,t);if(1!==n.length)throw Error("tensor1d() requires values to be a flat/TypedArray");return a_(e,null,n,t)}function pp(e,t,n){if(Y(e),null!=t&&2!==t.length)throw Error("tensor2d() requires shape to have two numbers");let r=aC(e,n);if(2!==r.length&&1!==r.length)throw Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return a_(e,t,r,n)}function pd(e,t,n){if(Y(e),null!=t&&4!==t.length)throw Error("tensor4d() requires shape to have four numbers");let r=aC(e,n);if(4!==r.length&&1!==r.length)throw Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor4d() requires shape to be provided when `values` are a flat array");return a_(e,t,r,n)}function pc(e,t,n){if(Y(e),null!=t&&5!==t.length)throw Error("tensor5d() requires shape to have five numbers");let r=aC(e,n);if(5!==r.length&&1!==r.length)throw Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor5d() requires shape to be provided when `values` are a flat array");return a_(e,t,r,n)}function pf(e,t,n){if(Y(e),null!=t&&6!==t.length)throw Error("tensor6d() requires shape to have six numbers");let r=aC(e,n);if(6!==r.length&&1!==r.length)throw Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor6d() requires shape to be provided when `values` are a flat array");return a_(e,t=t||r,r,n)}let pm=aF({topk_:function(e,t=1,n=!0){let r=aE(e,"x","topk");if(0===r.rank)throw Error("topk() expects the input to be of rank 1 or higher");let a=r.shape[r.shape.length-1];if(t<0)throw Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);let[s,i]=av.runKernel(n4,{x:r},{k:t,sorted:n});return{values:s,indices:i}}}),pg=aF({truncatedNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw Error("Unsupported data type $ { dtype }");let s=new lQ(t,n,r,!0,a),i=sQ(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),py=aF({unique_:function(e,t=0){let n=aE(e,"x","unique","string_or_numeric");K(n.rank>0,()=>"The input tensor must be at least 1D");let[r,a]=av.runKernel(n8,{x:n},{axis:t});return{values:r,indices:a}}}),pb=aF({unsortedSegmentSum_:function(e,t,n){let r=aE(e,"x","unsortedSegmentSum"),a=aE(t,"segmentIds","unsortedSegmentSum","int32");return K(et(n),()=>"numSegments must be of dtype int"),av.runKernel(n9,{x:r,segmentIds:a},{numSegments:n})}}),px=aF({unstack_:function(e,t=0){let n=aE(e,"x","unstack","string_or_numeric");return K(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),av.runKernel(n7,{value:n},{axis:t})}});function pv(e,t){return hu(e,t,"right")}function pk(e,t=!0,n,r){return av.makeVariable(e,t,n,r)}function pw(e,t){let n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);let r=sQ(e,"int32"),a=sQ([n.length,e.length],"int32");for(let t=0;t<n.length;t++){let s=r.indexToLoc(n[t]),i=t*e.length;a.values.set(s,i)}return a.toTensor()}let pI=async function(e){let t=aE(e,"condition","whereAsync","bool"),n=await t.data(),r=pw(t.shape,n);return e!==t&&t.dispose(),r};var pS={};l(pS,"booleanMaskAsync",()=>pN);let pN=async function(e,t,n){let r=aE(e,"tensor","boolMask"),a=aE(t,"mask","boolMask","bool"),s=null==n?0:n,i=a.rank,o=r.shape;K(i>0,()=>"mask cannot be scalar"),X(o.slice(s,s+i),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=s;e<s+i;e++)l*=o[e];let u=im(r,o.slice(0,s).concat([l],o.slice(s+i))),h=im(a,[-1]),p=await pI(h),d=pi(p,[1]),c=ul(u,d,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),d.dispose(),u.dispose(),h.dispose(),p.dispose(),c};var pT={};l(pT,"transpose",()=>pC);let pC=aF({transpose_:function(e,t,n){let r=aE(e,"x","transpose");if(null==t&&(t=r.shape.map((e,t)=>t).reverse()),K(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`),t.forEach(e=>{K(e>=0&&e<r.rank,()=>`All entries in 'perm' must be between 0 and ${r.rank-1} but got ${t}`)}),r.rank<=1)return r.clone();let a={perm:t};return"complex64"===r.dtype?ix(()=>{let e=hG(r),t=uJ(r);return e=av.runKernel(n5,{x:e},a),t=av.runKernel(n5,{x:t},a),n&&(t=u7(t)),aD(e,t)}):av.runKernel(n5,{x:r},a)}});var p$={};l(p$,"movingAverage",()=>pE);let pE=aF({movingAverage_:function(e,t,n,r,a=!0){let s=aE(e,"v","movingAverage"),i=aE(t,"x","movingAverage"),o=aE(n,"decay","movingAverage");ac(s,i),K(ee(s.shape,i.shape),()=>"Shape mismatch in v and x");let l=uq(1),u=ht(l,o),h=iV(ht(i,s),u);return a&&(K(null!=r,()=>"When using zeroDebias: true, step is required."),h=lU(h,ht(l,uH(o,aE(r,"step","movingAverage"))))),s4(s,h)}});var pA={};l(pA,"scatterND",()=>pR);let pR=aF({scatterND_:function(e,t,n){let r=aE(e,"indices","scatterND","int32"),a=aE(t,"updates","scatterND");return o$(a,r,n),av.runKernel(nF,{indices:r,updates:a},{shape:n})}});var pF={};l(pF,"sparseToDense",()=>pD);let pD=aF({sparseToDense_:function(e,t,n,r=0){let a=aE(e,"sparseIndices","sparseToDense","int32"),s=aE(t,"sparseValues","sparseToDense","string_or_numeric"),i=aE(r,"defaultValue","sparseToDense",s.dtype);if("int32"!==a.dtype)throw Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${a.dtype}.`);if(a.rank>2)throw Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${a.shape}.`);let o=a.rank>0?a.shape[0]:1,l=a.rank>1?a.shape[1]:1;if(n.length!==l)throw Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${l}.`);let u=s.size;if(0!==s.rank&&(1!==s.rank||u!==o))throw Error(`sparseValues has incorrect shape ${s.shape}, should be [] or [${o}]`);if(s.dtype!==i.dtype)throw Error("sparseValues.dtype must match defaultValues.dtype");return av.runKernel(nX,{sparseIndices:a,sparseValues:s,defaultValue:i},{outputShape:n})}});var p_={};l(p_,"gatherND",()=>pO);let pO=aF({gatherND_:function(e,t){let n=aE(t,"indices","gatherND","int32"),r=aE(e,"x","gatherND","string_or_numeric");return av.runKernel(tU,{params:r,indices:n})}});var pM={};function pL(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function pz(e,t,n){let r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){let i=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(i)}return ph(a,"float32")}l(pM,"enclosingPowerOfTwo",()=>pL),l(pM,"cosineWindow",()=>pz);var pP={};l(pP,"inTopKAsync",()=>pB);let pB=async function(e,t,n=1){let r=aE(e,"predictions","inTopK"),a=aE(t,"targets","inTopK");K(r.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`),K(r.rank-1===a.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`),X(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=r.shape[r.shape.length-1];K(n>0&&n<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`);let i=await r.data(),o=await a.data(),[l,u]=[i.length/s,s],h=eh("bool",l);for(let e=0;e<l;e++){let t=e*u,r=i.subarray(t,t+u),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort((e,t)=>t.value-e.value),h[e]=0;for(let t=0;t<n;t++)if(a[t].index===o[e]){h[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),aO(h,a.shape,"bool")},pW=aF({hammingWindow_:function(e){return pz(e,.54,.46)}}),pU=aF({hannWindow_:function(e){return pz(e,.5,.5)}}),pV=aF({frame_:function(e,t,n,r=!1,a=0){let s=0,i=[];for(;s+t<=e.size;)i.push(uk(e,s,t)),s+=n;if(r)for(;s<e.size;){let r=s+t-e.size,o=l$([uk(e,s,t-r),lT([r],a)]);i.push(o),s+=n}return 0===i.length?pp([],[0,t]):im(l$(i),[i.length,t])}}),pG=aF({stft_:function(e,t,n,r,a=pU){return null==r&&(r=pL(t)),pa(iV(pV(e,t,n),a(t)),r)}}),pH=aF({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){let i=aE(e,"image","cropAndResize"),o=aE(t,"boxes","cropAndResize","float32"),l=aE(n,"boxInd","cropAndResize","int32"),u=o.shape[0];return K(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),K(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),K(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),K(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),K(r[0]>=1&&r[1]>=1,()=>`cropSize must be atleast [1,1], but was ${r}`),K("bilinear"===a||"nearest"===a,()=>`method must be bilinear or nearest, but was ${a}`),av.runKernel(tv,{image:i,boxes:o,boxInd:l},{method:a,extrapolationValue:s,cropSize:r})}}),pq=aF({flipLeftRight_:function(e){let t=aE(e,"image","flipLeftRight","float32");return K(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),av.runKernel(tL,{image:t},{})}}),pj=aF({grayscaleToRGB_:function(e){let t=aE(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];K(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),K(1===r,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);let a=Array(t.rank);return a.fill(1,0,n),a[n]=3,l8(t,a)}}),pK=aF({rotateWithOffset_:function(e,t,n=0,r=.5){let a=aE(e,"image","rotateWithOffset","float32");return K(4===a.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`),av.runKernel(rr,{image:a},{radians:t,fillValue:n,center:r})}});function pX(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);let i=e.shape[0];return n=Math.min(n,i),K(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),K(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),K(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),K(1===t.rank,()=>"scores must be a 1D tensor"),K(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),K(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}let pY=aF({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){let s=aE(e,"boxes","nonMaxSuppression","float32"),i=aE(t,"scores","nonMaxSuppression","float32"),o=pX(s,i,n,r,a);n=o.maxOutputSize;let l={maxOutputSize:n,iouThreshold:r=o.iouThreshold,scoreThreshold:a=o.scoreThreshold};return av.runKernel(nl,{boxes:s,scores:i},l)}});function pZ(e,t){return e>t?1:e<t?-1:0}function pJ(e,t,n,r,a){return p1(e,t,n,r,a,0)}function pQ(e,t,n,r,a,s){return p1(e,t,n,r,a,0,!1,s,!0)}function p0(e,t,n,r,a,s){return p1(e,t,n,r,a,s,!0)}function p1(e,t,n,r,a,s,i=!1,o=!1,l=!1){let u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(p2);let h=s>0?-.5/s:0,p=[],d=[];for(;p.length<n&&u.length>0;){let t=u.pop(),{score:n,boxIndex:s,suppressBeginIndex:i}=t;if(n<a)break;let o=!1;for(let n=p.length-1;n>=i;--n){let i=function(e,t,n){let r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(a[0],a[2]),h=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),c=(o-s)*(l-i),f=(p-u)*(d-h);if(c<=0||f<=0)return 0;let m=Math.max(Math.min(o,p)-Math.max(s,u),0)*Math.max(Math.min(l,d)-Math.max(i,h),0);return m/(c+f-m)}(e,s,p[n]);if(i>=r){o=!0;break}if(t.score=t.score*function(e,t,n){let r=Math.exp(t*n*n);return n<=e?r:0}(r,h,i),t.score<=a)break}t.suppressBeginIndex=p.length,!o&&(t.score===n?(p.push(s),d.push(t.score)):t.score>a&&function(e,t,n){let r=function(e,t,n){let r=0,a=e.length,s=0,i=!1;for(;r<a;){let o=n(t,e[s=r+(a-r>>>1)]);o>0?r=s+1:(a=s,i=!o)}return i?r:-r-1}(e,t,n||pZ);e.splice(r<0?-(r+1):r,0,t)}(u,t,p2))}let c=p.length,f=n-c;o&&f>0&&(p.push(...Array(f).fill(0)),d.push(...Array(f).fill(0)));let m={selectedIndices:p};return i&&(m.selectedScores=d),l&&(m.validOutputs=c),m}function p2(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}async function p3(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){let s=aE(e,"boxes","nonMaxSuppressionAsync"),i=aE(t,"scores","nonMaxSuppressionAsync"),o=pX(s,i,n,r,a);n=o.maxOutputSize,r=o.iouThreshold,a=o.scoreThreshold;let l=await Promise.all([s.data(),i.data()]),{selectedIndices:u}=pJ(l[0],l[1],n,r,a);return s!==e&&s.dispose(),i!==t&&i.dispose(),ph(u,"int32")}let p4=aF({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){let i=aE(e,"boxes","nonMaxSuppression"),o=aE(t,"scores","nonMaxSuppression"),l=pX(i,o,n,r,a,s);n=l.maxOutputSize,r=l.iouThreshold,a=l.scoreThreshold;let u={maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s=l.softNmsSigma},h=av.runKernel(nh,{boxes:i,scores:o},u);return{selectedIndices:h[0],selectedScores:h[1]}}});async function p6(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){let i=aE(e,"boxes","nonMaxSuppressionAsync"),o=aE(t,"scores","nonMaxSuppressionAsync"),l=pX(i,o,n,r,a,s);n=l.maxOutputSize,r=l.iouThreshold,a=l.scoreThreshold,s=l.softNmsSigma;let u=await Promise.all([i.data(),o.data()]),{selectedIndices:h,selectedScores:p}=p0(u[0],u[1],n,r,a,s);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:ph(h,"int32"),selectedScores:ph(p)}}let p5=aF({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){let i=aE(e,"boxes","nonMaxSuppression"),o=aE(t,"scores","nonMaxSuppression"),l=pX(i,o,n,r,a,null),u=l.maxOutputSize,h=l.iouThreshold,p=l.scoreThreshold,d=av.runKernel(nu,{boxes:i,scores:o},{maxOutputSize:u,iouThreshold:h,scoreThreshold:p,padToMaxOutputSize:s});return{selectedIndices:d[0],validOutputs:d[1]}}});async function p8(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){let i=aE(e,"boxes","nonMaxSuppressionAsync"),o=aE(t,"scores","nonMaxSuppressionAsync"),l=pX(i,o,n,r,a,null),u=l.maxOutputSize,h=l.iouThreshold,p=l.scoreThreshold,[d,c]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=pQ(d,c,u,h,p,s);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:ph(f,"int32"),validOutputs:uq(m,"int32")}}let p7=aF({resizeBilinear_:function(e,t,n=!1,r=!1){let a=aE(e,"images","resizeBilinear");K(3===a.rank||4===a.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`),K(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),K(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=a,i=!1;3===a.rank&&(i=!0,s=im(a,[1,a.shape[0],a.shape[1],a.shape[2]]));let[]=t,o={images:s},l=av.runKernel(nT,o,{alignCorners:n,halfPixelCenters:r,size:t});return i?im(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),p9=aF({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){let a=aE(e,"images","resizeNearestNeighbor");K(3===a.rank||4===a.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`),K(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),K("float32"===a.dtype||"int32"===a.dtype,()=>"`images` must have `int32` or `float32` as dtype"),K(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=a,i=!1;3===a.rank&&(i=!0,s=im(a,[1,a.shape[0],a.shape[1],a.shape[2]]));let[]=t,o={images:s},l=av.runKernel(nS,o,{alignCorners:n,halfPixelCenters:r,size:t});return i?im(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),de=aF({threshold_:function(e,t="binary",n=!1,r=.5){let a,s,i,o,l=aE(e,"image","threshold"),u=l.shape[0]*l.shape[1],h=iV(ph([r]),255);if(K(3===l.rank,()=>`Error in threshold: image must be rank 3,but got rank ${l.rank}.`),K(3===l.shape[2]||1===l.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${l.shape[2]}.`),K("int32"===l.dtype||"float32"===l.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${l.dtype}.`),K("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===l.shape[2]){[a,s,i]=pr(l,[1,1,1],-1);let e=iV(a,.2989),t=iV(s,.587),n=iV(i,.114);o=s4(s4(e,t),n)}else o=e;return"otsu"===t&&(h=function(e,t){let n,r,a,s,i,o,l=ph([-1]),u=ph([0]),h=ph([0]);for(let p=0;p<e.size-1;p++){n=uk(e,0,p+1),r=uk(e,p+1),i=lU(iX(n),t),o=lU(iX(r),t),a=lU(iX(iV(n,hV(0,n.size))),iX(n));let d=lT(r.shape,n.size),c=s4(hV(0,r.size),d),f=ht(a,s=lU(iX(iV(r,c)),iX(r))),m=ht(a,s),g=iV(i,o),y=uu(h=iV(iV(g,f),m),u);u=uM(y,h,u),l=uM(y,ph([p]),l)}return l}(uN(s0(hZ(o),"int32"),aO([]),256),u)),s0(iV(n?u3(o,h):uu(o,h),255),"int32")}}),dt=aF({transform_:function(e,t,n="nearest",r="constant",a=0,s){let i=aE(e,"image","transform","float32"),o=aE(t,"transforms","transform","float32");return K(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),K(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),K(null==s||2===s.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`),av.runKernel(n6,{image:i,transforms:o},{interpolation:n,fillMode:r,fillValue:a,outputShape:s})}}),dn=aF({bandPart_:function(e,t,n){K(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),K(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);let r=aE(e,"a","bandPart");K(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);let a=r.shape,[s,i]=r.shape.slice(-2);if(!(t<=s))throw Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=i))throw Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=s),n<0&&(n=i);let o=ht(im(hV(0,s,1,"int32"),[-1,1]),hV(0,i,1,"int32")),l=ha(u3(o,uq(+t,"int32")),uh(o,uq(-n,"int32"))),u=hg([s,i],r.dtype);return im(po(px(im(r,[-1,s,i])).map(e=>uM(l,e,u))),a)}}),dr=aF({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,K(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=e[0].shape[0];for(let t=1;t<e.length;++t)K(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=pr(e,e.shape[0],0).map(e=>pi(e,[0]));K(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);let n=[],r=e;for(let t=0;t<e.length;++t)n.push(av.tidy(()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){let t=iV(iX(iV(n[r],e)),n[r]);e=ht(e,t)}return lU(e,uX(e,"euclidean"))}));return t?po(n,0):n}});function da(e,t=!1){return av.tidy(()=>{K(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);let n=e.shape[0],r=e.shape[1],a=l7(n),s=s1(e),i=pp([[1]],[1,1]),o=s1(i),l=n>=r?r:n;for(let e=0;e<l;++e){let t=s,l=o,u=a;[o,s,a]=av.tidy(()=>{let t=uk(s,[e,e],[n-e,1]),l=uX(t),u=uk(s,[e,e],[1,1]),h=uM(uu(u,0),pp([[-1]]),pp([[1]])),p=ht(u,iV(h,l)),d=lU(t,p);o=1===d.shape[0]?s1(i):l$([i,uk(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);let c=u7(lU(ui(h,p),l)),f=uk(s,[e,0],[n-e,r]),m=iV(c,o),g=pC(o);if(0===e)s=ht(f,ui(m,ui(g,f)));else{let t=ht(f,ui(m,ui(g,f)));s=l$([uk(s,[0,0],[e,r]),t],0)}let y=pC(m),b=uk(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=ht(b,ui(ui(b,o),y));else{let t=ht(b,ui(ui(b,o),y));a=l$([uk(a,[0,0],[n,e]),t],1)}return[o,s,a]}),iv([t,l,u])}return!t&&n>r&&(a=uk(a,[0,0],[n,r]),s=uk(s,[0,0],[r,r])),[a,s]})}let ds=aF({qr_:function(e,t=!1){if(K(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return da(e,t);{let n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=px(im(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];return r.forEach(e=>{let[n,r]=da(e,t);a.push(n),s.push(r)}),[im(po(a,0),e.shape),im(po(s,0),e.shape)]}}});!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(k||(k={}));let di=aF({computeWeightedLoss_:function(e,t,n=k.SUM_BY_NONZERO_WEIGHTS){let r=aE(e,"losses","computeWeightedLoss"),a=null;null!=t&&(a=aE(t,"weights","computeWeightedLoss"));let s=null==a?r:iV(r,a);if(n===k.NONE)return s;if(n===k.SUM)return iX(s);if(n===k.MEAN)if(null==a)return hm(s);else{let e=r.size/a.size,t=lU(iX(s),iX(a));return e>1?lU(t,uq(e)):t}if(n===k.SUM_BY_NONZERO_WEIGHTS)if(null==a)return lU(iX(s),uq(r.size));else{let e=s0(iX(hN(iV(a,hy(r.shape)),uq(0))),"float32");return lU(iX(s),e)}throw Error(`Unknown reduction: ${n}`)}}),dl=aF({absoluteDifference_:function(e,t,n,r=k.SUM_BY_NONZERO_WEIGHTS){let a=aE(e,"labels","absoluteDifference"),s=aE(t,"predictions","absoluteDifference"),i=null;return null!=n&&(i=aE(n,"weights","absoluteDifference")),X(a.shape,s.shape,"Error in absoluteDifference: "),di(s3(ht(a,s)),i,r)}}),du=aF({cosineDistance_:function(e,t,n,r,a=k.SUM_BY_NONZERO_WEIGHTS){let s=aE(e,"labels","cosineDistance"),i=aE(t,"predictions","cosineDistance"),o=null;return null!=r&&(o=aE(r,"weights","cosineDistance")),X(s.shape,i.shape,"Error in cosineDistance: "),di(ht(uq(1),iX(iV(s,i),n,!0)),o,a)}}),dh=aF({hingeLoss_:function(e,t,n,r=k.SUM_BY_NONZERO_WEIGHTS){let a=aE(e,"labels","hingeLoss"),s=aE(t,"predictions","hingeLoss"),i=null;null!=n&&(i=aE(n,"weights","hingeLoss")),X(a.shape,s.shape,"Error in hingeLoss: ");let o=uq(1);return a=ht(iV(uq(2),a),o),di(iH(ht(o,iV(a,s))),i,r)}}),dp=aF({huberLoss_:function(e,t,n,r=1,a=k.SUM_BY_NONZERO_WEIGHTS){let s=aE(e,"labels","huberLoss"),i=aE(t,"predictions","huberLoss"),o=null;null!=n&&(o=aE(n,"weights","huberLoss")),X(s.shape,i.shape,"Error in huberLoss: ");let l=uq(r),u=s3(ht(i,s)),h=hx(u,l),p=ht(u,h);return di(s4(iV(uq(.5),uK(h)),iV(l,p)),o,a)}}),dd=aF({logLoss_:function(e,t,n,r=1e-7,a=k.SUM_BY_NONZERO_WEIGHTS){let s=aE(e,"labels","logLoss"),i=aE(t,"predictions","logLoss"),o=null;null!=n&&(o=aE(n,"weights","logLoss")),X(s.shape,i.shape,"Error in logLoss: ");let l=uq(1),u=uq(r),h=u7(iV(s,u5(s4(i,u)))),p=iV(ht(l,s),u5(s4(ht(l,i),u)));return di(ht(h,p),o,a)}}),dc=aF({meanSquaredError_:function(e,t,n,r=k.SUM_BY_NONZERO_WEIGHTS){let a=aE(e,"labels","meanSquaredError"),s=aE(t,"predictions","meanSquaredError"),i=null;return null!=n&&(i=aE(n,"weights","meanSquaredError")),X(a.shape,s.shape,"Error in meanSquaredError: "),di(ps(a,s),i,r)}}),df=aF({sigmoidCrossEntropy_:function(e,t,n,r=0,a=k.SUM_BY_NONZERO_WEIGHTS){let s=aE(e,"multiClassLabels","sigmoidCrossEntropy"),i=aE(t,"logits","sigmoidCrossEntropy"),o=null;if(null!=n&&(o=aE(n,"weights","sigmoidCrossEntropy")),X(s.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){let e=uq(r),t=uq(1),n=uq(.5);s=s4(iV(s,ht(t,e)),iV(n,e))}return di(function(e,t){let n=aE(e,"labels","sigmoidCrossEntropyWithLogits"),r=aE(t,"logits","sigmoidCrossEntropyWithLogits");X(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");let a=iH(r),s=iV(r,n),i=u8(l6(u7(s3(r))));return s4(ht(a,s),i)}(s,i),o,a)}}),dm=aF({softmaxCrossEntropy_:function(e,t,n,r=0,a=k.SUM_BY_NONZERO_WEIGHTS){let s=aE(e,"onehotLabels","softmaxCrossEntropy"),i=aE(t,"logits","softmaxCrossEntropy"),o=null;if(null!=n&&(o=aE(n,"weights","softmaxCrossEntropy")),X(s.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){let e=uq(r),t=uq(1),n=uq(s.shape[1]);s=s4(iV(s,ht(t,e)),lU(e,n))}return di(function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return ue((e,t,r)=>{let a=hr(t,[n],!0),s=ht(s0(t,"float32"),a);return r([e,s]),{value:iX(u7(iV(s,e)),[n]),gradFunc:(e,t)=>{let[r,a]=t,s=i$(e.shape,[n]);return[iV(im(e,s),ht(s0(r,"float32"),l6(a))),iV(im(e,s),ht(l6(a),s0(r,"float32")))]}}})(e,t)}(s,i),o,a)}}),dg=aF({sparseFillEmptyRows_:function(e,t,n,r){let a=aE(e,"indices","sparseFillEmptyRows","int32"),s=aE(t,"values","sparseFillEmptyRows"),i=aE(n,"denseShape","sparseFillEmptyRows","int32"),o=aE(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw Error(`Indices should be Tensor2D but received shape
        ${a.shape}`);if(1!==s.rank)throw Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==i.rank)throw Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw Error(`Default value should be a scalar but received shape ${o.shape}`);let l=av.runKernel(nH,{indices:a,values:s,denseShape:i,defaultValue:o});return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),dy=aF({sparseReshape_:function(e,t,n){let r=aE(e,"inputIndices","sparseReshape","int32"),a=aE(t,"inputShape","sparseReshape","int32"),s=aE(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw Error(`Input indices should be Tensor2D but received shape
        ${r.shape}`);if(1!==a.rank)throw Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==s.rank)throw Error(`New shape should be Tensor1D but received shape ${s.shape}`);let i=av.runKernel(nq,{inputIndices:r,inputShape:a,newShape:s});return{outputIndices:i[0],outputShape:i[1]}}}),db=aF({sparseSegmentMean_:function(e,t,n){let r=aE(e,"data","sparseSegmentMean"),a=aE(t,"indices","sparseSegmentMean","int32"),s=aE(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw Error(`Indices should be Tensor1D but received shape
          ${a.shape}`);if(1!==s.rank)throw Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);return av.runKernel(nj,{data:r,indices:a,segmentIds:s})}}),dx=aF({sparseSegmentSum_:function(e,t,n){let r=aE(e,"data","sparseSegmentSum"),a=aE(t,"indices","sparseSegmentSum","int32"),s=aE(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw Error(`Indices should be Tensor1D but received shape
         ${a.shape}`);if(1!==s.rank)throw Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);return av.runKernel(nK,{data:r,indices:a,segmentIds:s})}}),dv=aF({stringNGrams_:function(e,t,n,r,a,s,i,o){let l=aE(e,"data","stringNGrams","string");if("string"!==l.dtype)throw Error("Data must be of datatype string");if(1!==l.shape.length)throw Error(`Data must be a vector, saw: ${l.shape}`);let u=aE(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw Error("Data splits must be of datatype int32");let h=av.runKernel(nQ,{data:l,dataSplits:u},{separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:i,preserveShortSequences:o});return{nGrams:h[0],nGramsSplits:h[1]}}}),dk=aF({stringSplit_:function(e,t,n=!0){let r=aE(e,"input","stringSplit","string"),a=aE(t,"delimiter","stringSplit","string");if(1!==r.rank)throw Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==a.rank)throw Error(`Delimiter should be a scalar but received shape ${a.shape}`);let s=av.runKernel(n0,{input:r,delimiter:a},{skipEmpty:n});return{indices:s[0],values:s[1],shape:s[2]}}}),dw=aF({stringToHashBucketFast_:function(e,t){let n=aE(e,"input","stringToHashBucketFast","string");if(t<=0)throw Error("Number of buckets must be at least 1");return av.runKernel(n1,{input:n},{numBuckets:t})}}),dI={fft:pe,ifft:pt,rfft:pa,irfft:pn},dS={hammingWindow:pW,hannWindow:pU,frame:pV,stft:pG},dN={flipLeftRight:pq,grayscaleToRGB:pj,resizeNearestNeighbor:p9,resizeBilinear:p7,rotateWithOffset:pK,cropAndResize:pH,nonMaxSuppression:pY,nonMaxSuppressionAsync:p3,nonMaxSuppressionWithScore:p4,nonMaxSuppressionWithScoreAsync:p6,nonMaxSuppressionPadded:p5,nonMaxSuppressionPaddedAsync:p8,threshold:de,transform:dt},dT={bandPart:dn,gramSchmidt:dr,qr:ds},dC={absoluteDifference:dl,computeWeightedLoss:di,cosineDistance:du,hingeLoss:dh,huberLoss:dp,logLoss:dd,meanSquaredError:dc,sigmoidCrossEntropy:df,softmaxCrossEntropy:dm},d$={sparseFillEmptyRows:dg,sparseReshape:dy,sparseSegmentMean:db,sparseSegmentSum:dx},dE={stringNGrams:dv,stringSplit:dk,stringToHashBucketFast:dw};R(up,pS),R(up,pT),R(up,uU),R(up,p$),R(up,pA),R(up,hl),R(up,pF),R(up,p_),R(up,lV),R(up,pM),R(up,pP);var dA={};function dR(e){return new Promise(e=>setTimeout(e)).then(e)}l(dA,"copyModel",()=>sY),l(dA,"listModels",()=>sK),l(dA,"moveModel",()=>sZ),l(dA,"removeModel",()=>sX),l(dA,"browserFiles",()=>d_),l(dA,"browserHTTPRequest",()=>dV),l(dA,"concatenateArrayBuffers",()=>sv),l(dA,"decodeWeights",()=>sy),l(dA,"encodeWeights",()=>sg),l(dA,"fromMemory",()=>dj),l(dA,"fromMemorySync",()=>dK),l(dA,"getLoadHandlers",()=>sR),l(dA,"getModelArtifactsForJSON",()=>sS),l(dA,"getModelArtifactsForJSONSync",()=>sI),l(dA,"getModelArtifactsInfoForJSON",()=>sN),l(dA,"getSaveHandlers",()=>sA),l(dA,"getWeightSpecs",()=>sT),l(dA,"http",()=>dU),l(dA,"isHTTPScheme",()=>dB),l(dA,"loadWeights",()=>dL),l(dA,"registerLoadRouter",()=>sE),l(dA,"registerSaveRouter",()=>s$),l(dA,"weightsLoaderFactory",()=>dz),l(dA,"withSaveHandler",()=>dX),l(dA,"withSaveHandlerSync",()=>dY);class dF{constructor(e){if(!eM.getBool("IS_BROWSER"))throw Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(dF.URL_SCHEME)&&(e=e.slice(dF.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw Error("Browser downloads are not supported in this environment since `document` is not present");let t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r=sw(e,n),a=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=a,await dR(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){let e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await dR(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:sN(e)}}}}dF.URL_SCHEME="downloads://";class dD{constructor(e){if(null==e||e.length<1)throw Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{let n=new FileReader;n.onload=n=>{let r=JSON.parse(n.target.result),a=r.modelTopology;return null==a?void t(Error(`modelTopology field is missing from file ${this.jsonFile.name}`)):null==r.weightsManifest?void t(Error(`weightManifest field is missing from file ${this.jsonFile.name}`)):0===this.weightsFiles.length?void e({modelTopology:a}):void e(sS(r,e=>this.loadWeights(e)))},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)})}loadWeights(e){let t=[],n=[];for(let r of e)t.push(...r.weights),n.push(...r.paths);let r=this.checkManifestAndWeightFiles(e);return Promise.all(n.map(e=>this.loadWeightsFile(e,r[e]))).then(e=>[t,sv(e)])}loadWeightsFile(e,t){return new Promise((n,r)=>{let a=new FileReader;a.onload=e=>{n(e.target.result)},a.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){let t=[],n=this.weightsFiles.map(e=>sk(e.name)),r={};for(let a of e)a.paths.forEach(e=>{let a=sk(e);if(-1!==t.indexOf(a))throw Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw Error(`Weight file with basename '${a}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(a)]});if(t.length!==this.weightsFiles.length)throw Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function d_(e){return new dD(e)}function dO(e,t,n,r){var a,s,i;K(null!=(a=e)&&Array.isArray(a)&&a.length>0,()=>"promises must be a none empty array"),s=n=null==n?0:n,i=r=null==r?1:r,K(s>=0&&s<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${s}`),K(i>=0&&i<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${i}`),K(i>=s,()=>`startFraction must be no more than endFraction, but got startFraction ${s} and endFraction ${i}`);let o=0;return Promise.all(e.map(a=>(a.then(a=>(t(n+ ++o/e.length*(r-n)),a)),a)))}async function dM(e,t){null==t&&(t={});let n=null==t.fetchFunc?eM.platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?await Promise.all(r):await dO(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(a):await dO(a,t.onProgress,.5,1)}async function dL(e,t="",n,r){return dz(e=>dM(e,{requestInit:r}))(e,t,n)}function dz(e){return async(t,n="",r)=>{let a=t.map(()=>!1),s={},i=null!=r?r.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{let l=aM["quantization"in e?e.quantization.dtype:e.dtype]*J(e.shape),u=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach((t,n)=>{t===e.name&&(u(),i[n]=!0)}):u(),o.push(e.name),n+=l})}),!i.every(e=>e)){let e=r.filter((e,t)=>!i[t]);throw Error(`Could not find weights in manifest with names: ${e.join(", ")}. 
Manifest JSON has weights with names: ${o.join(", ")}.`)}let l=a.reduce((e,t,n)=>(t&&e.push(n),e),[]),u=[];l.forEach(e=>{t[e].paths.forEach(e=>{let t=n+(n.endsWith("/")?"":"/")+e;u.push(t)})});let h=await e(u),p={},d=0;return l.forEach(e=>{let n=t[e].paths.length,r=0;for(let e=0;e<n;e++)r+=h[d+e].byteLength;let a=new ArrayBuffer(r),i=new Uint8Array(a),o=0;for(let e=0;e<n;e++){let t=new Uint8Array(h[d+e]);i.set(t,o),o+=t.byteLength}s[e].forEach(e=>{let t=sy(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(let e in t)p[e]=t[e]}),d+=n}),p}}sC.registerSaveRouter(e=>eM.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(dF.URL_SCHEME)?function(e="model"){return new dF(e)}(e.slice(dF.URL_SCHEME.length)):null);class dP{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(K("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=eM.platform.fetch,K(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&K(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;let n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r=sw(e,n);t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");let a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:sN(e),responses:[a]};throw Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){let e,t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",Error(e)}let n=e.modelTopology,r=e.weightsManifest;if(null==n&&null==r)throw Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return sS(e,e=>this.loadWeights(e))}async loadWeights(e){let[t,n]=function(e){let t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(Array.isArray(this.path)?this.path[1]:this.path),r=this.weightPathPrefix||t,a=sT(e),s=[],i=[];for(let t of e)for(let e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):s.push(r+e+n);return this.weightUrlConverter&&s.push(...await Promise.all(i)),[a,sv(await dM(s,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function dB(e){return null!=e.match(dP.URL_SCHEME_REGEX)}dP.URL_SCHEME_REGEX=/^https?:\/\//;let dW=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc));else{let n=!0;if(Array.isArray(e)?e.every(e=>dB(e)):dB(e))return dU(e,t)}return null};function dU(e,t){return new dP(e,t)}function dV(e,t){return dU(e,t)}sC.registerSaveRouter(dW),sC.registerLoadRouter(dW);class dG{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class dH{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class dq{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function dj(e,t,n,r){let a=arguments;return new dq(dK(...a))}function dK(e,t,n,r){return 1!=arguments.length?(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new dG({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})):null!=e.modelTopology||null!=e.weightSpecs?new dG(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new dG({modelTopology:e}))}function dX(e){return new dH(e)}function dY(e){return new dH(e)}var dZ={};l(dZ,"nonMaxSuppressionV3Impl",()=>pJ),l(dZ,"nonMaxSuppressionV4Impl",()=>pQ),l(dZ,"nonMaxSuppressionV5Impl",()=>p0),l(dZ,"whereImpl",()=>pw);let dJ="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function dQ(){return new Promise(e=>dJ(()=>e()))}var d0={};l(d0,"Serializable",()=>d1),l(d0,"SerializationMap",()=>d2),l(d0,"registerClass",()=>d3);class d1{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class d2{constructor(){this.classNameMap={}}static getMap(){return null==d2.instance&&(d2.instance=new d2),d2.instance}static register(e){d2.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function d3(e){K(null!=e.className,()=>"Class being registered does not have the static className property defined."),K("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),K(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),d2.register(e)}class d4 extends d1{minimize(e,t=!1,n){let{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){let e=n.map(e=>({name:e.name,tensor:a[e.name]}));this.applyGradients(e)}else this.applyGradients(a);return(iv(a),t)?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){K(ew(e),()=>"The f passed in variableGrads(f) must be a function"),K(null==t||Array.isArray(t)&&t.every(e=>e instanceof ao),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let n=null!=t;if(!n)for(let e in t=[],av.registeredVariables)t.push(av.registeredVariables[e]);let r=n?t.filter(e=>!e.trainable):null,a=t.length;K((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`);let{value:s,grads:i}=av.gradients(e,t,null,!0);K(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),K(0===s.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${s.rank} tensor`);let o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=r&&r.forEach(e=>o[e.name]=null),{value:s,grads:o}}(e,t)}dispose(){null!=this.iterations_&&iv(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:uq(this.iterations_,"int32")}}async getWeights(){throw Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(d4,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class d6 extends d4{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=av.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{let r=av.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:ix(()=>uL(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:ix(()=>uL(r).variable(!1))});let a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;let s=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;ix(()=>{let e=s4(iV(s,this.rho),iV(uK(a),1-this.rho)),t=iV(lU(uj(s4(i,this.epsilon)),uj(s4(s,this.epsilon))),a),n=s4(iV(i,this.rho),iV(uK(t),1-this.rho));s.assign(e),i.assign(n);let o=s4(iV(t,-this.learningRate),r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(iv(this.accumulatedGrads.map(e=>e.variable)),iv(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){let e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){let t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}d6.className="Adadelta",d3(d6);class d5 extends d4{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{let r=av.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:ix(()=>lT(r.shape,this.initialAccumulatorValue).variable(!1))});let a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;let s=this.accumulatedGrads[n].variable;ix(()=>{let e=s4(s,uK(a));s.assign(e);let t=s4(iV(lU(a,uj(s4(e,av.backend.epsilon()))),-this.learningRate),r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&iv(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}d5.className="Adagrad",d3(d5);class d8 extends d4{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ix(()=>{this.accBeta1=uq(t).variable(),this.accBeta2=uq(n).variable()}),null==r&&(this.epsilon=av.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);ix(()=>{let n=ht(1,this.accBeta1),r=ht(1,this.accBeta2);t.forEach((t,a)=>{let s=av.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:ix(()=>uL(s).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:ix(()=>uL(s).variable(!1))});let i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;let o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=s4(iV(o,this.beta1),iV(i,1-this.beta1)),h=s4(iV(l,this.beta2),iV(uK(i),1-this.beta2)),p=lU(u,n),d=lU(h,r);o.assign(u),l.assign(h);let c=s4(iV(lU(p,s4(uj(d),this.epsilon)),-this.learningRate),s);s.assign(c)}),this.accBeta1.assign(iV(this.accBeta1,this.beta1)),this.accBeta2.assign(iV(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&iv(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&iv(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),ix(()=>{this.accBeta1.assign(uH(this.beta1,this.iterations_+1)),this.accBeta2.assign(uH(this.beta2,this.iterations_+1))});let t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}d8.className="Adam",d3(d8);class d7 extends d4{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ix(()=>{this.iteration=uq(0).variable(),this.accBeta1=uq(t).variable()}),null==r&&(this.epsilon=av.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);ix(()=>{let n=ht(1,this.accBeta1),r=lU(-this.learningRate,s4(iV(this.iteration,this.decay),1));t.forEach((t,a)=>{let s=av.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:uL(s).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:uL(s).variable(!1)});let i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;let o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=s4(iV(o,this.beta1),iV(i,1-this.beta1)),h=hf(iV(l,this.beta2),s3(i));o.assign(u),l.assign(h);let p=s4(iV(lU(r,n),lU(u,s4(h,this.epsilon))),s);s.assign(p)}),this.iteration.assign(s4(this.iteration,1)),this.accBeta1.assign(iV(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&iv(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&iv(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}d7.className="Adamax",d3(d7);class d9 extends d4{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{let r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;let a=av.registeredVariables[t];ix(()=>{let e=s4(iV(this.c,r),a);a.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ik(uq(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}d9.className="SGD",d3(d9);class ce extends d9{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=uq(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{let r=av.registeredVariables[t];null==this.accumulations[n]&&(this.accumulations[n]={originalName:`${t}/momentum`,variable:ix(()=>uL(r).variable(!1))});let a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&ix(()=>{let e,t=s4(iV(this.m,a),s);e=this.useNesterov?s4(iV(this.c,s4(s,iV(t,this.m))),r):s4(iV(this.c,t),r),a.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&iv(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}ce.className="Momentum",d3(ce);class ct extends d4{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=av.backend.epsilon()),null==e)throw Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{let r=av.registeredVariables[t];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:ix(()=>uL(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:ix(()=>uL(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:ix(()=>uL(r).variable(!1))});let a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;let s=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;ix(()=>{let e=s4(iV(s,this.decay),iV(uK(a),1-this.decay));if(this.centered){let t=this.accumulatedMeanGrads[n].variable,o=s4(iV(t,this.decay),iV(a,1-this.decay)),l=lU(iV(a,this.learningRate),uj(ht(e,s4(uK(o),this.epsilon)))),u=s4(iV(i,this.momentum),l);s.assign(e),t.assign(o),i.assign(u);let h=ht(r,u);r.assign(h)}else{let e=s4(iV(s,this.decay),iV(uK(a),1-this.decay)),t=s4(iV(i,this.momentum),lU(iV(a,this.learningRate),uj(s4(e,this.epsilon))));s.assign(e),i.assign(t);let n=ht(r,t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&iv(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&iv(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&iv(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}ct.className="RMSProp",d3(ct);class cn{static sgd(e){return new d9(e)}static momentum(e,t,n=!1){return new ce(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new ct(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new d8(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new d6(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new d7(e,t,n,r,a)}static adagrad(e,t=.1){return new d5(e,t)}}let cr={sgd:cn.sgd,momentum:cn.momentum,adadelta:cn.adadelta,adagrad:cn.adagrad,rmsprop:cn.rmsprop,adamax:cn.adamax,adam:cn.adam},ca={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(e,iK(s0(n,"float32"),-1))}}},cs=aF({avgPool3dGrad_:function(e,t,n,r,a,s){let i=aE(e,"dy","avgPool3dGrad"),o=aE(t,"input","avgPool3dGrad"),l=i,u=o,h=!1;4===o.rank&&(h=!0,l=im(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=im(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),K(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),K(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),ic("avgPool3dGrad",a,s);let p={dy:l,input:u},d=av.runKernel(te,p,{filterSize:n,strides:r,pad:a,dimRoundingMode:s});return h?im(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ci=aF({avgPoolGrad_:function(e,t,n,r,a){let s=aE(e,"dy","avgPoolGrad"),i=aE(t,"input","avgPoolGrad");K(i.rank===s.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);let o=i,l=s,u=!1;3===i.rank&&(u=!0,o=im(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=im(s,[1,s.shape[0],s.shape[1],s.shape[2]])),K(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),K(4===o.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);let h={dy:l,input:o},p=av.runKernel(e7,h,{filterSize:n,strides:r,pad:a});return u?im(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),co={kernelName:tu,inputsToSave:["x"],gradFunc:ca.gradFunc},cl=aF({conv3DBackpropFilter_:function(e,t,n,r,a){let s=e;4===e.rank&&(s=im(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=im(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),K(5===s.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`),K(5===i.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),K(5===n.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`),K(s.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${n[3]}.`),K(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);let o={x:s,dy:i};return av.runKernel(tm,o,{strides:r,pad:a,filterShape:n})}});function cu(e,t){let n=[];for(let r=e;r<t;++r)n.push(r);return n}function ch(e){let t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}let cp=aF({localResponseNormalizationBackprop_:function(e,t,n,r=5,a=1,s=1,i=.5){return av.runKernel(t6,{x:e,y:t,dy:n},{depthRadius:r,bias:a,alpha:s,beta:i})}});function cd(e,t,n,r){return t.rank<n.rank&&(t=im(t,i$(t.shape,r))),e.rank<n.rank&&(e=im(e,i$(e.shape,r))),{x:()=>iV(e,s0(l4(n,t),e.dtype))}}let cc={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let{reductionIndices:r}=n,a=t[0],s=t[1],i=el(r,a.shape),o=cd(e,s,a,i);return{x:()=>o.x()}}},cf=aF({maxPool3dGrad_:function(e,t,n,r,a,s,i){let o=aE(e,"dy","maxPool3dGrad"),l=aE(t,"input","maxPool3dGrad"),u=aE(n,"output","maxPool3dGrad"),h=o,p=l,d=u,c=!1;4===l.rank&&(c=!0,h=im(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),p=im(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=im(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),K(5===h.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`),K(5===p.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),K(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),ic("maxPool3dGrad",s,i);let f={dy:h,input:p,output:d},m=av.runKernel(ne,f,{filterSize:r,strides:a,pad:s,dimRoundingMode:i});return c?im(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),cm=aF({maxPoolGrad_:function(e,t,n,r,a,s,i){let o=aE(e,"dy","maxPoolGrad"),l=aE(t,"input","maxPoolGrad"),u=aE(n,"output","maxPoolGrad");return K(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),K(4===o.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`),K(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),ic("maxPoolGrad",s,i),av.runKernel(t7,{dy:o,input:l,output:u},{filterSize:r,strides:a,pad:s,dimRoundingMode:i})}}),cg={kernelName:nf,inputsToSave:["x"],gradFunc:(e,t,n)=>{let r=t[0],{paddings:a}=n,s=a.map(e=>e[0]);return{x:()=>uk(e,s,r.shape)}}},cy={kernelName:nU,gradFunc:(e,t,n)=>{let{blockShape:r,paddings:a}=n;return{x:()=>uS(e,r,a)}}},cb={kernelName:nV,gradFunc:(e,t,n)=>{let{axis:r}=n;return{x:()=>l$(e,r)}}};for(let e of[ca,{kernelName:eZ,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>{let t=uK(s0(n,"float32"));return u7(lU(e,uj(ht(uq(1),t))))}}}},{kernelName:eJ,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,uj(ht(uK(s0(n,"float32")),1)))}}},{kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=iM(n.shape,r.shape);return{a:()=>{let t=e,r=iO(n.shape,a);return r.length>0&&(t=iX(t,r)),im(t,n.shape)},b:()=>{let t=e,n=iO(r.shape,a);return n.length>0&&(t=iX(t,n)),im(t,r.shape)}}}},{kernelName:eQ,saveAllInputs:!0,gradFunc:(e,t)=>{let n={};return t.forEach((t,r)=>{n[r]=()=>e.clone()}),n}},{kernelName:e0,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>uL(n)}}},{kernelName:e1,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>uL(n)}}},{kernelName:e2,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,uj(ht(uq(1),uK(s0(n,"float32")))))}}},{kernelName:e3,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,uj(s4(uq(1),uK(s0(n,"float32")))))}}},{kernelName:e5,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=iM(n.shape,r.shape);return{a:()=>{let t=s4(uK(n),uK(r)),s=iV(e,lU(r,t)),i=iO(n.shape,a);return i.length>0&&(s=iX(s,i)),im(s,n.shape)},b:()=>{let t=s4(uK(n),uK(r)),s=u7(iV(e,lU(n,t))),i=iO(r.shape,a);return i.length>0&&(s=iX(s,i)),im(s,r.shape)}}}},{kernelName:e4,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,s4(uK(s0(n,"float32")),1))}}},{kernelName:e6,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,ht(uq(1),uK(s0(n,"float32"))))}}},{kernelName:e9,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{filterSize:a,strides:s,pad:i,dimRoundingMode:o}=n;return{x:()=>cs(e,r,a,s,i,o)}}},{kernelName:e8,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{filterSize:a,strides:s,pad:i}=n;return{x:()=>ci(e,r,a,s,i)}}},{kernelName:tt,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{let[r,a]=t,{transposeA:s,transposeB:i}=n;return s||i?!s&&i?{a:()=>ui(e,a,!1,!1),b:()=>ui(e,r,!0,!1)}:s&&!i?{a:()=>ui(a,e,!1,!0),b:()=>ui(r,e,!1,!1)}:{a:()=>ui(a,e,!0,!0),b:()=>ui(e,r,!0,!0)}:{a:()=>ui(e,a,!1,!0),b:()=>ui(r,e,!0,!1)}}},{kernelName:tn,gradFunc:(e,t,n)=>{let{blockShape:r,crops:a}=n;return{x:()=>h_(e,r,a)}}},{kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{let r=n.inputShape,a=n.shape,s=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])s[e]=1;else if(1!==r[e])throw Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);let i=[];for(let e=0;e<s.length;e++)s[e]>1&&i.push(e);return{x:()=>iX(e,i,!0)}}},{kernelName:ts,gradFunc:e=>({x:()=>e.clone()})},{kernelName:ti,gradFunc:e=>({x:()=>uL(e)})},{kernelName:to,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{clipValueMin:a,clipValueMax:s}=n;return{x:()=>uM(ha(uh(r,a),u3(r,s)),e,uL(e))}}},co,{kernelName:th,saveAllInputs:!0,gradFunc:(e,t,n)=>{let r=t.map(e=>e.shape),{axis:a}=n,s=el(a,t[0].shape)[0];return pr(e,r.map(e=>e[s]),s).map(e=>()=>e)}},{kernelName:tc,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{let[r,a]=t,{strides:s,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>lD(e,a,s,i,o,1,l),filter:()=>ut(e,r,a.shape,s,i,o,l)}}},{kernelName:tp,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{let[r,a]=t,{dilations:s,strides:i,pad:o,dataFormat:l}=n;return K(ih(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>lO(r.shape,e,a,i,o,l),filter:()=>ut(r,e,a.shape,i,o,l)}}},{kernelName:tf,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{let{dilations:r,strides:a,pad:s}=n;K(ih(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);let[i,o]=t;return{x:()=>lz(i.shape,e,o,a,s),filter:()=>cl(i,e,o.shape,a,s)}}},{kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(u7(h3(s0(n,"float32"))),e)}}},{kernelName:ty,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(h4(s0(n,"float32")),e)}}},{kernelName:tx,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{axis:a,exclusive:s,reverse:i}=n;return{x:()=>{let t=iA([a],r.rank),n=uR(e,a,s,!i);return null!=t&&(n=pC(n,t)),n}}}},{kernelName:tI,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{let{dilations:r,strides:a,pad:s,dimRoundingMode:i}=n,o=null==r?[1,1]:r;K(ih(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);let[l,u]=t;return K(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),K(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),K(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),K(ip(a,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${o}'.`),ic("depthwiseConv2d",s,i),{x:()=>ua(l.shape,e,u,a,s,o,i),filter:()=>ur(l,e,u.shape,a,s,o,i)}}},{kernelName:tC,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{let[r,a]=t,s={x:r,filter:a,dy:e},i={x:r,filter:a,dy:e};return{x:()=>av.runKernel(t$,s,n),filter:()=>av.runKernel(tE,i,n)}}},{kernelName:tA,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=iM(n.shape,r.shape);return{a:()=>{let t=lU(e,s0(r,"float32")),s=iO(n.shape,a);return s.length>0?im(iX(t,s),n.shape):t},b:()=>{let t=iV(e,s0(n,"float32")),s=iO(r.shape,a);return s.length>0&&(t=im(iX(t,s),r.shape)),u7(lU(t,s0(uK(r),"float32")))}}}},{kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{let[n]=t,r={dy:e,y:n};return{x:()=>av.runKernel(tF,r)}}},{kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t,r=iV(l6(u7(uK(n))),2/Math.sqrt(Math.PI));return{x:()=>iV(e,r)}}},{kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(e,n)}}},{kernelName:t_,inputsToSave:["input"],gradFunc:(e,t)=>{let[n]=t;return{input:()=>im(e,n.shape)}}},{kernelName:tO,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(e,l6(n))}}},{kernelName:tP,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=iM(n.shape,r.shape);return{a:()=>{let t=lU(e,s0(r,"float32")),s=iO(n.shape,a);return s.length>0?im(iX(t,s),n.shape):t},b:()=>{let t=iV(e,s0(n,"float32")),s=iO(r.shape,a);return s.length>0&&(t=im(iX(t,s),r.shape)),u7(lU(t,s0(uK(r),"float32")))}}}},{kernelName:tz,gradFunc:e=>({x:()=>uL(e)})},{kernelName:tB,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{let{varianceEpsilon:r}=n,[a,s,i,o]=t,l=null==o?uq(1):o,u=iO(s.shape,a.shape),h=[];if(1===s.rank){for(let e=0;e<a.shape.length-1;++e)h.push(a.shape[e]);h.push(1)}let p=ht(a,s),d=iV(e,l),c=hJ(s4(i,uq(r))),f=iV(iV(iV(c,c),c),uq(-.5));return{x:()=>1===s.rank?im(iV(iV(e,l8(im(c,[1,1,1,s.shape[0]]),h)),l),a.shape):im(iV(iV(e,c),l),a.shape),mean:()=>{let e=iV(iV(c,uq(-1)),d);return 1===s.rank&&(e=iX(e,u)),im(e,s.shape)},variance:()=>{let e=iV(iV(f,p),d);return 1===s.rank&&(e=iX(e,u)),im(e,s.shape)},scale:()=>{let t=iV(p,c),n=iV(e,t);return 1===s.rank&&(n=iX(n,u)),im(n,s.shape)},offset:()=>{let t=e;return 1===s.rank&&(t=iX(t,u)),im(t,s.shape)}}}},{kernelName:tW,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{let[r,a]=t,{axis:s}=n,i=el(s,r.shape)[0];return{x:()=>{let t=r.shape,n=a.size,o=t.slice(0,i),l=o.length,u=t.slice(s,t.length).slice(1),h=u.length,p=cu(0,l),d=cu(l+1,l+1+h),c=im(e,ch([o,[n],u])),f=im(a,[n]),m=ch([[l],p,d]),g=pb(pC(c,m),f,r.shape[i]);return pC(g,iR(m))},indices:()=>a}}},{kernelName:tG,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t;return{a:()=>uL(n),b:()=>uL(r)}}},{kernelName:tH,gradFunc:e=>({x:()=>s0(e,"float32")})},{kernelName:tK,gradFunc:e=>({x:()=>uL(e)})},{kernelName:tX,gradFunc:e=>({x:()=>uL(e)})},{kernelName:tY,gradFunc:e=>({x:()=>uL(e)})},{kernelName:tZ,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{alpha:a}=n,s=uu(r,0);return{x:()=>uM(s,e,iV(e,a))}}},{kernelName:t1,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,s4(n,1))}}},{kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,s0(n,"float32"))}}},{kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r]=t,{axis:a}=n;return{logits:()=>{let t=l6(r);return ht(e,iV(iX(e,a,!0),t))}}}},{kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r,a]=t,{depthRadius:s,bias:i,alpha:o,beta:l}=n;return{x:()=>cp(r,a,e,s,i,o,l)}}},cc,cc,{kernelName:t5,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t;return{a:()=>iV(e,s0(uh(n,r),"float32")),b:()=>iV(e,s0(u2(n,r),"float32"))}}},{kernelName:t9,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r,a]=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>cf(e,r,a,s,i,o,l)}}},{kernelName:t8,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r,a]=t,{filterSize:s,strides:i,pad:o}=n;return{x:()=>cm(e,r,a,s,i,o)}}},{kernelName:nn,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{axis:a}=n,s=el(a,r.shape),i=J(iC(r.shape,s)[1]);return{x:()=>{let t=r.shape.slice();return s.forEach(e=>{t[e]=1}),lU(iV(im(e,t),hy(r.shape,"float32")),i)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let{axis:r}=n,[a,s]=t,i=el(r,a.shape),o=cd(e,s,a,i);return{x:()=>o.x()}}},{kernelName:nr,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t;return{a:()=>iV(e,s0(u3(n,r),"float32")),b:()=>iV(e,s0(uu(n,r),"float32"))}}},{kernelName:na,inputsToSave:["x"],gradFunc:(e,t,n)=>{let r=t[0],{paddings:a}=n,s=a.map(e=>e[0]);return{x:()=>uk(e,s,r.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=iM(n.shape,r.shape);return{a:()=>{let t=iO(n.shape,a);return t.length>0?im(iX(e,t),n.shape):e},b:()=>{let t=iV(e,u7(lG(lU(n,r)))),s=iO(r.shape,a);return s.length>0?im(iX(t,s),r.shape):t}}}},{kernelName:ni,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=iM(n.shape,r.shape);return{a:()=>{let t=iV(e,s0(r,"float32")),s=iO(n.shape,a);return s.length>0?im(iX(t,s),n.shape):t},b:()=>{let t=iV(e,s0(n,"float32")),s=iO(r.shape,a);return s.length>0?im(iX(t,s),r.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>u7(e)})},{kernelName:nd,inputsToSave:["indices"],gradFunc:(e,t)=>{let n=t[0];return{indices:()=>hg(n.shape,"float32")}}},{kernelName:np,gradFunc:e=>({x:()=>uL(e)})},{kernelName:nc,saveAllInputs:!0,gradFunc:(e,t,n)=>{let{axis:r}=n;return px(e,r).map(e=>()=>e)}},cg,cg,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{let[n,r,a]=t,s=iM(n.shape,r.shape);return{a:()=>{let t=s0(r,"float32"),a=iV(e,iV(t,uH(n,ht(t,uq(1))))),i=iO(n.shape,s);return i.length>0&&(a=iX(a,i)),im(a,n.shape)},b:()=>{let t=iV(e,iV(a,uM(uu(n,0),u5(n),uL(n)))),i=iO(r.shape,s);return i.length>0&&(t=iX(t,i)),im(t,r.shape)}}}},{kernelName:nm,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{let[n,r]=t,a=uu(n,0);return{x:()=>uM(a,e,iV(e,r)),alpha:()=>{let t=uM(a,uL(e),iV(e,n)),s=iO(r.shape,e.shape);return s.length>0&&(t=iX(t,s)),im(t,r.shape)}}}},{kernelName:ng,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{axis:a}=n,s=[];return s=null==a?r.shape.map((e,t)=>t):"number"==typeof a?[a]:a,{x:()=>(function(e,t,n){let r=e.shape.length,a=r-n.length,s=iI.getAxesPermutation(n,r),i=e;null!=s&&(i=pC(e,s));let o=i.shape.slice(),l=o.splice(r-n.length,n.length).reduce((e,t)=>e*t,1);o.push(l);let u=function(e,t,n){let r=e.shape.slice();r[n]=1;let a=im(t,r),s=iV(uA(e,n,!0,!1),uA(e,n,!0,!0));return iV(a,s)}(i.reshape(o),t,a);return u=u.reshape(i.shape),null!=s&&(u=pC(u,iI.getUndoAxesPermutation(s))),u})(r,e,s)}}},{kernelName:nk,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,u7(uK(n)))}}},{kernelName:n$,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t,r=iV(u3(n,6),iK(n));return{x:()=>iV(e,s0(r,"float32"))}}},{kernelName:nw,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(e,s0(iK(n),"float32"))}}},{kernelName:nI,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>im(e,n.shape)}}},{kernelName:nT,inputsToSave:["images"],gradFunc:(e,t,n)=>{let[r]=t,a={dy:e,images:r};return{images:()=>av.runKernel(nC,a,n)}}},{kernelName:nS,inputsToSave:["images"],gradFunc:(e,t,n)=>{let[r]=t,a={dy:e,images:r};return{images:()=>av.runKernel(nN,a,n)}}},{kernelName:nE,gradFunc:(e,t,n)=>{let{dims:r}=n,a=el(r,e.shape);return{x:()=>hq(e,a)}}},{kernelName:nA,gradFunc:e=>({x:()=>uL(e)})},{kernelName:nR,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>u7(lU(e,iV(uH(n,1.5),2)))}}},{kernelName:n_,inputsToSave:["condition"],gradFunc:(e,t)=>{let[n]=t;return{condition:()=>s0(uL(n),"float32"),t:()=>iV(e,s0(n,e.dtype)),e:()=>iV(e,s0(hs(n),e.dtype))}}},{kernelName:nO,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>{let t=uu(n,uq(0)),r=uq(oR);return uM(t,iV(e,uq(oF)),iV(iV(e,r),l6(s0(n,"float32"))))}}}},{kernelName:nP,outputsToSave:[!0],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(e,iV(n,ht(uq(1),n)))}}},{kernelName:nz,gradFunc:e=>({x:()=>uL(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(u$(s0(n,"float32")),e)}}},{kernelName:nL,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(uE(s0(n,"float32")),e)}}},{kernelName:nM,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{begin:a,size:s}=n,i=r.shape,[o,l]=oc(r,a,s),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>hE(e,u)}}},{kernelName:nG,outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r]=t,{dim:a}=n,s=iV(e,r);return{logits:()=>ht(s,iV(iX(s,[a],!0),r))}}},{kernelName:nB,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(e,ij(n))}}},cy,cy,cb,cb,{kernelName:nW,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,iV(uj(s0(n,"float32")),2))}}},{kernelName:nY,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=uq(2);return{a:()=>iV(e,iV(a,ht(n,r))),b:()=>iV(e,iV(a,ht(r,n)))}}},{kernelName:nZ,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(e,iV(s0(n,"float32"),2))}}},{kernelName:rt,gradFunc:e=>({x:()=>uL(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=iM(n.shape,r.shape);return{a:()=>{let t=e,r=iO(n.shape,a);return r.length>0&&(t=iX(t,r)),im(t,n.shape)},b:()=>{let t=e,n=iO(r.shape,a);return n.length>0&&(t=iX(t,n)),im(u7(t),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,a=r.shape.slice(),{axis:s}=n;el(s,r.shape).forEach(e=>{a[e]=1});let i=iV(im(e,a),hy(r.shape,"float32"));return{x:()=>i}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lU(e,uK(u$(n)))}}},{kernelName:n2,outputsToSave:[!0],gradFunc:(e,t)=>{let[n]=t;return{x:()=>iV(ht(uq(1),uK(n)),e)}}},{kernelName:n3,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{reps:a}=n;return{x:()=>{let t=uL(r);if(1===r.rank)for(let n=0;n<a[0];++n)t=s4(t,uk(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)t=s4(t,uk(e,[n*r.shape[0],s*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)for(let i=0;i<a[2];++i)t=s4(t,uk(e,[n*r.shape[0],s*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else if(4===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)for(let i=0;i<a[2];++i)for(let o=0;o<a[3];++o)t=s4(t,uk(e,[n*r.shape[0],s*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));else throw Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);return t}}}},{kernelName:n5,gradFunc:(e,t,n)=>{let{perm:r}=n,a=iR(r);return{x:()=>pC(e,a)}}},{kernelName:n7,gradFunc:(e,t,n)=>{let{axis:r}=n;return{value:()=>po(e,r)}}},{kernelName:n9,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>(function(e,t){let n=ul(e,hf(t,uL(t))),r=uh(t,uq(0,"int32")),a=n.rank-r.rank;for(let e=0;e<a;++e)r=l5(r,e+1);r=ha(r,hy(n.shape,"bool"));let s=uL(n);return uM(r,n,s)})(e,n)}}},{kernelName:re,gradFunc:e=>({x:()=>uL(e)})}])!function(e){let{kernelName:t}=e;rp.has(t)&&eM.getBool("DEBUG")&&rl(`Overriding the gradient for '${t}'`),rp.set(t,e)}(e);ai().prototype.abs=function(){return this.throwIfDisposed(),s3(this)},ai().prototype.acos=function(){return this.throwIfDisposed(),ud(this)},ai().prototype.acosh=function(){return this.throwIfDisposed(),uc(this)},ai().prototype.add=function(e){return this.throwIfDisposed(),s4(this,e)},ai().prototype.all=function(e,t){return this.throwIfDisposed(),s6(this,e,t)},ai().prototype.any=function(e,t){return this.throwIfDisposed(),s5(this,e,t)},ai().prototype.argMax=function(e){return this.throwIfDisposed(),s8(this,e)},ai().prototype.argMin=function(e){return this.throwIfDisposed(),um(this,e)},ai().prototype.asScalar=function(){return this.throwIfDisposed(),K(1===this.size,()=>"The array must have only 1 element."),im(this,[])},ai().prototype.asType=function(e){return this.throwIfDisposed(),s0(this,e)},ai().prototype.as1D=function(){return this.throwIfDisposed(),im(this,[this.size])},ai().prototype.as2D=function(e,t){return this.throwIfDisposed(),im(this,[e,t])},ai().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),im(this,[e,t,n])},ai().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),im(this,[e,t,n,r])},ai().prototype.as5D=function(e,t,n,r,a){return this.throwIfDisposed(),im(this,[e,t,n,r,a])},ai().prototype.asin=function(){return this.throwIfDisposed(),ug(this)},ai().prototype.asinh=function(){return this.throwIfDisposed(),uy(this)},ai().prototype.atan=function(){return this.throwIfDisposed(),ub(this)},ai().prototype.atan2=function(e){return this.throwIfDisposed(),ux(this,e)},ai().prototype.atanh=function(){return this.throwIfDisposed(),uv(this)},ai().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),ig(this,e,t,n,r)},ai().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),uS(this,e,t)},ai().prototype.batchNorm=function(e,t,n,r,a){return this.throwIfDisposed(),lm(this,e,t,n,r,a)},ai().prototype.broadcastTo=function(e){return this.throwIfDisposed(),lx(this,e)},ai().prototype.cast=function(e){return this.throwIfDisposed(),s0(this,e)},ai().prototype.ceil=function(){return this.throwIfDisposed(),uC(this)},ai().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),lC(this,e,t)},ai().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof as&&(e=[e]),l$([this,...e],t)},ai().prototype.conv1d=function(e,t,n,r,a,s){return this.throwIfDisposed(),l_(this,e,t,n,r,a,s)},ai().prototype.conv2dTranspose=function(e,t,n,r,a){return this.throwIfDisposed(),lM(this,e,t,n,r,a)},ai().prototype.conv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),lD(this,e,t,n,r,a,s)},ai().prototype.cos=function(){return this.throwIfDisposed(),u$(this)},ai().prototype.cosh=function(){return this.throwIfDisposed(),uE(this)},ai().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),uA(this,e,t,n)},ai().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),uR(this,e,t,n)},ai().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),uD(this,e,t)},ai().prototype.depthwiseConv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),lB(this,e,t,n,r,a,s)},ai().prototype.dilation2d=function(e,t,n,r,a){return this.throwIfDisposed(),uO(this,e,t,n,r,a)},ai().prototype.divNoNan=function(e){return this.throwIfDisposed(),uz(this,e)},ai().prototype.div=function(e){return this.throwIfDisposed(),lU(this,e)},ai().prototype.dot=function(e){return this.throwIfDisposed(),uP(this,e)},ai().prototype.elu=function(){return this.throwIfDisposed(),iW(this)},ai().prototype.equal=function(e){return this.throwIfDisposed(),l4(this,e)},ai().prototype.erf=function(){return this.throwIfDisposed(),uW(this)},ai().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),uY(this,e,t)},ai().prototype.exp=function(){return this.throwIfDisposed(),l6(this)},ai().prototype.expandDims=function(e){return this.throwIfDisposed(),l5(this,e)},ai().prototype.expm1=function(){return this.throwIfDisposed(),uZ(this)},ai().prototype.fft=function(){return this.throwIfDisposed(),pe(this)},ai().prototype.flatten=function(){return this.throwIfDisposed(),im(this,[this.size])},ai().prototype.floor=function(){return this.throwIfDisposed(),lG(this)},ai().prototype.floorDiv=function(e){return this.throwIfDisposed(),lW(this,e)},ai().prototype.gather=function(e,t){return this.throwIfDisposed(),ul(this,e,t)},ai().prototype.greaterEqual=function(e){return this.throwIfDisposed(),uh(this,e)},ai().prototype.greater=function(e){return this.throwIfDisposed(),uu(this,e)},ai().prototype.ifft=function(){return this.throwIfDisposed(),pt(this)},ai().prototype.irfft=function(){return this.throwIfDisposed(),pn(this)},ai().prototype.isFinite=function(){return this.throwIfDisposed(),uQ(this)},ai().prototype.isInf=function(){return this.throwIfDisposed(),u0(this)},ai().prototype.isNaN=function(){return this.throwIfDisposed(),u1(this)},ai().prototype.leakyRelu=function(e){return this.throwIfDisposed(),iU(this,e)},ai().prototype.lessEqual=function(e){return this.throwIfDisposed(),u3(this,e)},ai().prototype.less=function(e){return this.throwIfDisposed(),u2(this,e)},ai().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),u6(this,e,t,n,r)},ai().prototype.logSigmoid=function(){return this.throwIfDisposed(),he(this)},ai().prototype.logSoftmax=function(e){return this.throwIfDisposed(),hn(this,e)},ai().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),hr(this,e,t)},ai().prototype.log=function(){return this.throwIfDisposed(),u5(this)},ai().prototype.log1p=function(){return this.throwIfDisposed(),u8(this)},ai().prototype.logicalAnd=function(e){return this.throwIfDisposed(),ha(this,e)},ai().prototype.logicalNot=function(){return this.throwIfDisposed(),hs(this)},ai().prototype.logicalOr=function(e){return this.throwIfDisposed(),hi(this,e)},ai().prototype.logicalXor=function(e){return this.throwIfDisposed(),ho(this,e)},ai().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),ui(this,e,t,n)},ai().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),hp(this,e,t,n,r)},ai().prototype.max=function(e,t){return this.throwIfDisposed(),uV(this,e,t)},ai().prototype.maximum=function(e){return this.throwIfDisposed(),hf(this,e)},ai().prototype.mean=function(e,t){return this.throwIfDisposed(),hm(this,e,t)},ai().prototype.min=function(e,t){return this.throwIfDisposed(),uG(this,e,t)},ai().prototype.minimum=function(e){return this.throwIfDisposed(),hx(this,e)},ai().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),hv(this,e,t)},ai().prototype.mod=function(e){return this.throwIfDisposed(),hk(this,e)},ai().prototype.mul=function(e){return this.throwIfDisposed(),iV(this,e)},ai().prototype.neg=function(){return this.throwIfDisposed(),u7(this)},ai().prototype.norm=function(e,t,n){return this.throwIfDisposed(),uX(this,e,t,n)},ai().prototype.notEqual=function(e){return this.throwIfDisposed(),hN(this,e)},ai().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),hT(this,e,t,n)},ai().prototype.onesLike=function(){return this.throwIfDisposed(),hC(this)},ai().prototype.pad=function(e,t){return this.throwIfDisposed(),hE(this,e,t)},ai().prototype.pool=function(e,t,n,r,a,s){return this.throwIfDisposed(),hO(this,e,t,n,r,a,s)},ai().prototype.pow=function(e){return this.throwIfDisposed(),uH(this,e)},ai().prototype.prelu=function(e){return this.throwIfDisposed(),iG(this,e)},ai().prototype.prod=function(e,t){return this.throwIfDisposed(),hM(this,e,t)},ai().prototype.reciprocal=function(){return this.throwIfDisposed(),hH(this)},ai().prototype.relu=function(){return this.throwIfDisposed(),iH(this)},ai().prototype.relu6=function(){return this.throwIfDisposed(),iq(this)},ai().prototype.reshapeAs=function(e){return this.throwIfDisposed(),im(this,e.shape)},ai().prototype.reshape=function(e){return this.throwIfDisposed(),im(this,e)},ai().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),p7(this,e,t,n)},ai().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),p9(this,e,t,n)},ai().prototype.reverse=function(e){return this.throwIfDisposed(),hq(this,e)},ai().prototype.rfft=function(){return this.throwIfDisposed(),pa(this)},ai().prototype.round=function(){return this.throwIfDisposed(),hZ(this)},ai().prototype.rsqrt=function(){return this.throwIfDisposed(),hJ(this)},ai().prototype.selu=function(){return this.throwIfDisposed(),hQ(this)},ai().prototype.separableConv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),h0(this,e,t,n,r,a,s)},ai().prototype.sigmoid=function(){return this.throwIfDisposed(),ij(this)},ai().prototype.sign=function(){return this.throwIfDisposed(),h2(this)},ai().prototype.sin=function(){return this.throwIfDisposed(),h3(this)},ai().prototype.sinh=function(){return this.throwIfDisposed(),h4(this)},ai().prototype.slice=function(e,t){return this.throwIfDisposed(),uk(this,e,t)},ai().prototype.softmax=function(e){return this.throwIfDisposed(),h9(this,e)},ai().prototype.softplus=function(){return this.throwIfDisposed(),u9(this)},ai().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),h_(this,e,t)},ai().prototype.split=function(e,t){return this.throwIfDisposed(),pr(this,e,t)},ai().prototype.sqrt=function(){return this.throwIfDisposed(),uj(this)},ai().prototype.square=function(){return this.throwIfDisposed(),uK(this)},ai().prototype.squaredDifference=function(e){return this.throwIfDisposed(),ps(this,e)},ai().prototype.squeeze=function(e){return this.throwIfDisposed(),pi(this,e)},ai().prototype.stack=function(e,t){return this.throwIfDisposed(),po(e instanceof as?[this,e]:[this,...e],t)},ai().prototype.step=function(e){return this.throwIfDisposed(),iK(this,e)},ai().prototype.stridedSlice=function(e,t,n,r,a,s,i,o){return this.throwIfDisposed(),pl(this,e,t,n,r,a,s,i,o)},ai().prototype.sub=function(e){return this.throwIfDisposed(),ht(this,e)},ai().prototype.sum=function(e,t){return this.throwIfDisposed(),iX(this,e,t)},ai().prototype.tan=function(){return this.throwIfDisposed(),pu(this)},ai().prototype.tanh=function(){return this.throwIfDisposed(),uw(this)},ai().prototype.tile=function(e){return this.throwIfDisposed(),l8(this,e)},ai().prototype.toBool=function(){return this.throwIfDisposed(),s0(this,"bool")},ai().prototype.toFloat=function(){return this.throwIfDisposed(),s0(this,"float32")},ai().prototype.toInt=function(){return this.throwIfDisposed(),s0(this,"int32")},ai().prototype.topk=function(e,t){return this.throwIfDisposed(),pm(this,e,t)},ai().prototype.transpose=function(e){return this.throwIfDisposed(),pC(this,e)},ai().prototype.unique=function(e){return this.throwIfDisposed(),py(this,e)},ai().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),pb(this,e,t)},ai().prototype.unstack=function(e){return this.throwIfDisposed(),px(this,e)},ai().prototype.where=function(e,t){return this.throwIfDisposed(),uM(e,this,t)},ai().prototype.zerosLike=function(){return this.throwIfDisposed(),uL(this)};class cx extends Error{constructor(e){super(e),Object.setPrototypeOf(this,cx.prototype)}}class cv extends Error{constructor(e){super(e),Object.setPrototypeOf(this,cv.prototype)}}class ck extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ck.prototype)}}class cw extends Error{constructor(e){super(e),Object.setPrototypeOf(this,cw.prototype)}}class cI extends Error{constructor(e){super(e),Object.setPrototypeOf(this,cI.prototype)}}class cS{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){let e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){let e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function cN(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{let n=Array(t);return n.fill(e),n}}function cT(e,t){if(!e)throw new cI(t)}function cC(e,t){let n=0;for(let r of e)r===t&&n++;return n}function c$(e){return 1===e.length?e[0]:e}function cE(e){return Array.isArray(e)?e:[e]}function cA(e){let t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function cR(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let cF={};function cD(e){if(null==e)return null;let t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function c_(e,t={},n={},r="object",a=!1){if("string"==typeof e){let a;if(e in n)a=n[e];else if(e in cF)a=cF[e];else if(null==(a=t[e]))throw new ck(`Unknown ${r}: ${e}. This may be due to one of the following reasons:
1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{let s,i;if(null==e.className||null==e.config)throw new ck(`${r}: Improper config format: ${JSON.stringify(e)}.
'className' and 'config' must set.`);let o=e.className;if(o in n?[s,i]=n[o]:o in cF?[s,i]=cF.className:o in t&&([s,i]=t[o]),null==s)throw new ck(`Unknown ${r}: ${o}. This may be due to one of the following reasons:
1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=i){let t={};for(let e of Object.keys(cF))t[e]=cF[e];for(let e of Object.keys(n))t[e]=n[e];e.config.customObjects=t;let r=Object.assign({},cF);for(let e of Object.keys(n))cF[e]=n[e];!function e(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach(t=>e(t));else for(let n of Object.keys(t)){let r=t[n];null!=r&&"object"==typeof r&&(Array.isArray(r)||"ndarray"!==r.type||"number"!=typeof r.value?e(r):t[n]=r.value)}}(e.config);let o=i(s,e.config,n,a);return cF=Object.assign({},r),o}{let t=Object.assign({},cF);for(let e of Object.keys(n))cF[e]=n[e];let r=new s(e.config);return cF=Object.assign({},t),r}}}function cO(e,t){return -1*(e<t?-1:+(e>t))}function cM(e){if(null==e)return e;let t=[];for(let n of e)-1===t.indexOf(n)&&t.push(n);return t}function cL(e,t,n){if(null!=n&&0>e.indexOf(n))throw new ck(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function cz(e,t,n=0,r=1/0){return cT(n>=0),cT(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every(e=>typeof e===t)}function cP(e,t){Array.isArray(e)?(rg.assert(e.length>0,()=>`${t} is unexpectedly an empty array.`),e.forEach((e,n)=>cP(e,`element ${n+1} of ${t}`))):rg.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got ${function e(t){return null===t?"null":Array.isArray(t)?"["+t.map(t=>e(t)).join(",")+"]":"string"==typeof t?`"${t}"`:`${t}`}(e)}.`)}function cB(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let cW=0,cU={};function cV(e=""){return e in cU||(cU[e]=0),cU[e]+=1,e+cU[e].toString()}let cG=["channelsFirst","channelsLast"],cH=["nearest","bilinear"],cq=["valid","same","causal"],cj=["max","avg"],cK=["sum","mul","concat","ave"],cX=new Map;function cY(e){cL(cG,"DataFormat",e)}function cZ(e){cL(cq,"PaddingMode",e)}function cJ(e){cL(cj,"PoolMode",e)}let cQ=[];function c0(e,t){cQ.push(e);try{let e=t();return cQ.pop(),e}catch(e){throw cQ.pop(),e}}function c1(e){if(!c4(e))throw Error("Not a valid tensor name: '"+e+"'");return(0===cQ.length?"":cQ.join("/")+"/")+e}function c2(e){if(!c4(e))throw Error("Not a valid tensor name: '"+e+"'");cX.has(e)||cX.set(e,0);let t=cX.get(e);if(cX.set(e,cX.get(e)+1),!(t>0))return e;{let n=`${e}_${t}`;return cX.set(n,1),n}}let c3=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function c4(e){return!!e.match(c3)}function c6(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let a=t;a<n;++a)r*=e[a];return r}function c5(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){let r=e[n];r<t&&(t=r)}return t}function c8(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){let r=e[n];r>t&&(t=r)}return t}function c7(e,t){if(t<e)throw new ck(`end (${t}) < begin (${e}) is forbidden.`);let n=[];for(let r=e;r<t;++r)n.push(r);return n}function c9(){return null==a&&(a=av.backend.epsilon()),a}function fe(){return"channelsLast"}function ft(e,t=-1){let n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),im(e,n)}function fn(e,t,n){return ix(()=>{switch(e.rank){case 1:return h6(e,t,n);case 2:return h5(e,[t,0],[n,e.shape[1]]);case 3:return h8(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return h7(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return uk(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return uk(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new ck(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}})}function fr(e,t,n){return ix(()=>{switch(e.rank){case 1:return h6(e,t,n);case 2:return h5(e,[0,t],[e.shape[0],n]);case 3:return h8(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return h7(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new ck(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function fa(e,t,n,r){return ix(()=>{switch(e.rank){case 1:return h6(e,t,n);case 2:switch(r){case 1:return fn(e,t,n);case 2:return fr(e,t,n);default:throw new ck(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return fn(e,t,n);case 2:return h8(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return fr(e,t,n);default:throw new ck(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return fn(e,t,n);case 2:return h7(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return h7(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return fr(e,t,n);default:throw new ck(`The axis is not within the rank of the tensor ${r}`)}default:throw new ck(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function fs(e,t=-1){let n;return t<0&&(t=0!==(n=e[0].rank)?n:0),t===e[0].rank&&(t=-1),l$(e,t)}function fi(e,t){switch(e.rank){case 1:return lE([e,t]);case 2:return lA([e,t],0);case 3:return lR([e,t],0);case 4:return lF([e,t],0);default:throw new ck(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function fo(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new ck(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return l8(e,t)}function fl(e,t=0,n=1,r,a){return hW(e,t,n,r,a)}function fu(e,t,n,r){if(e.rank<2||t.rank<2)throw new cw(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new cw(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return l9.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?fp(e.rank,r,fe()):null,activation:n});{let a=e.shape.slice();e=im(e,[-1,a.pop()]);let s=t.shape.slice(),i=s.pop(),o=s.pop(),l=[...s,i],u=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=im(pC(t,u),[o,-1]);let h=[...a,...l];return im(l9.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?fp(e.rank,r,fe()):null,activation:n}),h)}}function fh(e,t,n){return ix(()=>ul(e,t=Array.isArray(t)?ph(t,"int32"):s0(t,"int32"),n))}function fp(e,t,n){let r=t.shape;if(1!==t.rank&&t.rank!==e)throw new ck(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)if(1===r.length)return im(t,[1,r[0],1,1,1]);else return im(t,[1,r[3],r[0],r[1],r[2]]);else if("channelsLast"===n)if(1===r.length)return im(t,[1,1,1,1,r[0]]);else return im(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)if(1===r.length)return im(t,[1,r[0],1,1]);else return im(t,[1,r[2],r[0],r[1]]);else if("channelsLast"===n)if(1===r.length)return im(t,[1,1,1,r[0]]);else return im(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)if(1===r.length)return im(t,[1,r[0],1]);else return im(t,[1,r[1],r[0]]);else if("channelsLast"===n)if(1===r.length)return im(t,[1,1,r[0]]);else return im(t,[1].concat(r))}else if(e<3)return t;throw new ck(`Unsupported input rank by biasAdd: ${t.rank}`)}function fd(e,t,n){return ix(()=>(null==n&&(n=fe()),cY(n),s4(e,fp(e.rank,t,n))))}function fc(e,t,n=!1){return n?e():t()}let ff=["fanIn","fanOut","fanAvg"],fm=["normal","uniform","truncatedNormal"];class fg extends d0.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class fy extends fg{apply(e,t){return hg(e,t)}}fy.className="Zeros",d0.registerClass(fy);class fb extends fg{apply(e,t){return hy(e,t)}}fb.className="Ones",d0.registerClass(fb);class fx extends fg{constructor(e){if(super(),"object"!=typeof e)throw new ck(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new ck(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return ix(()=>iV(uq(this.value),hy(e,t)))}getConfig(){return{value:this.value}}}fx.className="Constant",d0.registerClass(fx);class fv extends fg{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return l2(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}fv.className="RandomUniform",d0.registerClass(fv);class fk extends fg{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new cw(`randomNormal does not support dType ${t}.`);return fl(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}fk.className="RandomNormal",d0.registerClass(fk);class fw extends fg{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new cw(`truncatedNormal does not support dType ${t}.`);return pg(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}fw.className="TruncatedNormal",d0.registerClass(fw);class fI extends fg{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return ix(()=>{if(2===e.length&&e[0]===e[1])return iV(this.gain,l7(e[0]));throw new ck("Identity matrix initializer can only be used for 2D square matrices.")})}getConfig(){return{gain:this.gain}}}fI.className="Identity",d0.registerClass(fI);class fS extends fg{constructor(e){if(super(),e.scale<0)throw new ck(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,cL(ff,"FanMode",this.mode),this.distribution=null==e.distribution?"normal":e.distribution,cL(fm,"Distribution",this.distribution),this.seed=e.seed}apply(e,t){let n=function(e,t="channelsLast"){let n,r;if(cY(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){let t=c6(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){let t=c6(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{let t=c6(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],a=n[1],s=this.scale;if("fanIn"===this.mode?s/=Math.max(1,r):"fanOut"===this.mode?s/=Math.max(1,a):s/=Math.max(1,(r+a)/2),"normal"===this.distribution){let n=Math.sqrt(s);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new cw(`${this.getClassName()} does not support dType ${t}.`);return pg(e,0,n,t,this.seed)}{let n=Math.sqrt(3*s);return l2(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}fS.className="VarianceScaling",d0.registerClass(fS);class fN extends fS{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return fS.className}}fN.className="GlorotUniform",d0.registerClass(fN);class fT extends fS{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return fS.className}}fT.className="GlorotNormal",d0.registerClass(fT);class fC extends fS{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return fS.className}}fC.className="HeNormal",d0.registerClass(fC);class f$ extends fS{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return fS.className}}f$.className="HeUniform",d0.registerClass(f$);class fE extends fS{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return fS.className}}fE.className="LeCunNormal",d0.registerClass(fE);class fA extends fS{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return fS.className}}fA.className="LeCunNormal",d0.registerClass(fA);class fR extends fg{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new cw("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return ix(()=>{if(e.length<2)throw new cw("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);let t=fl(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32"),n=dT.gramSchmidt(t);return e[0]>e[1]&&(n=pC(n)),iV(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}fR.className="Orthogonal",d0.registerClass(fR);let fF={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function fD(e,t={}){return c_(e,d0.SerializationMap.getMap().classNameMap,t,"initializer")}function f_(e){if("string"==typeof e){let t=e in fF?fF[e]:e;if("GlorotNormal"===t)return new fT;{if("GlorotUniform"===t)return new fN;if("HeNormal"===t)return new fC;if("HeUniform"===t)return new f$;if("LeCunNormal"===t)return new fE;if("LeCunUniform"===t)return new fA;let e={};return e.className=t,e.config={},fD(e)}}return e instanceof fg?e:fD(e)}function fO(e){return Array.isArray(e)&&Array.isArray(e[0])}function fM(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function fL(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new ck(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function fz(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))return e;if(1===e.length)return e[0];throw new ck(`Expected exactly 1 Shape; got ${e.length}`)}function fP(e){let t=0;for(let n of e)0===n.shape.length?t+=1:t+=n.shape.reduce((e,t)=>e*t);return t}let fB="Variable";class fW{constructor(e,t="float32",n=fB,r=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=cW++,n=null==n?fB:n,this.originalName=c1(n),this.name=c2(this.originalName),this.trainable_=r,this.constraint=a,this.val=pk(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function fU(e){return e.map(e=>e.read())}function fV(e){e.forEach(e=>{e[0].write(e[1])})}class fG{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class fH{constructor(e,t,n,r,a,s,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=a,this.outputTensorIndex=i,this.id=cW++,null!=s&&(this.originalName=c1(s),this.name=c2(this.originalName)),this.rank=t.length}}let fq=0;class fj{constructor(e,t){for(let n of(this.callArgs=t,this.id=fq++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes,e.inboundLayers))null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){let e=[];for(let t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let fK=0;class fX extends d0.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=fK++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){let e=this.getClassName();t=cA(e)+"_"+cV(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new cv(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new ck(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return c$(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return c$(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new cx(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new cx(`Layer ${this.name} is not connected, no input to return.`);return c$(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new cx(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new cx(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return c$(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=cE(e),null==this.inputSpec||0===this.inputSpec.length)return;let t=cE(this.inputSpec);if(e.length!==t.length)throw new ck(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){let r=e[n],a=t[n];if(null==a)continue;let s=r.rank;if(null!=a.ndim&&s!==a.ndim)throw new ck(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${s}`);if(null!=a.maxNDim&&s>a.maxNDim)throw new ck(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${s}`);if(null!=a.minNDim&&s<a.minNDim)throw new ck(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${s}.`);if(null!=a.dtype&&r.dtype!==a.dtype)throw new ck(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${r.dtype}.`);if(a.axes){let e=r.shape;for(let t in a.axes){let r=Number(t),s=a.axes[t],i=r>=0?e[r]:e[e.length+r];if(null!=s&&-1===[s,null].indexOf(i))throw new ck(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${s} but got shape ${e}.`)}}if(null!=a.shape)for(let e=0;e<a.shape.length;++e){let t=a.shape[e],s=r.shape[e];if(null!=t&&null!=s&&t!==s)throw new ck(`Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();let n=cE(e),r=!0;for(let e of n)if(!(e instanceof fH)){r=!1;break}let a=!0;for(let e of n)if(e instanceof fH){a=!1;break}if(r===a)throw new ck("Arguments to apply() must be all SymbolicTensors or all Tensors");return c0(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);let t=[];for(let n of cE(e))t.push(n.shape);this.build(c$(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let r=this.call(e,t),a=cE(r),s=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),s.push(e);if(r=c$(s),null!=this.activityRegularizer)throw new cw("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{var r;let n,a=function(e){e=cE(e);let t=[];for(let n of e)t.push(n.shape);return c$(t)}(e),s=this.computeOutputShape(a),i=(r=0,"float32");if(this.warnOnIncompatibleInputShape(Array.isArray(e)?a[0]:a),n=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,r)=>new fH(i,n,this,cE(e),t,this.name,r)):new fH(i,s,this,cE(e),t,this.name),this.addInboundNode(e,n,null,null,a,s,t),this._refCount++,null!=this.activityRegularizer)throw new cw("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return n}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new cx(`The layer ${this.name} has never been called and thus has no defined output shape.`);let e=[];for(let t of this.inboundNodes){let n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new cx(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new cv(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return fP(this.weights)}build(e){this.built=!0}getWeights(e=!1){return fU(e?this.trainableWeights:this.weights)}setWeights(e){ix(()=>{let t=this.weights;if(t.length!==e.length)throw new ck(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;let n=[],r=fU(t);for(let a=0;a<r.length;++a){let s=r[a],i=t[a],o=e[a];if(!rg.arraysEqual(s.shape,o.shape))throw new ck(`Layer weight shape ${s.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}fV(n)})}addWeight(e,t,n,r,a,s,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new ck(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=o?o():f_("zeros"));let l=r.apply(t,n),u=new fW(l,n,e,s,i);return l.dispose(),null!=a&&this.addLoss(()=>a.apply(u.read())),null==s&&(s=!0),s?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=cE(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t)if(Array.isArray(t))t.forEach(e=>{if(null!=e)throw TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return t}addInboundNode(e,t,n,r,a,s,i=null){let o=cE(e);t=cE(t),n=cE(n),r=cE(r),a=fM(a),s=fM(s);let l=[],u=[],h=[];for(let e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),h.push(e.tensorIndex);new fj({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:h,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:a,outputShapes:s},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){let e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}class fY extends fX{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:cV("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new ck("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t)if(null==e.inputShape)throw new ck("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");else t=[e.batchSize].concat(e.inputShape);else if(null!=e.batchSize)throw new ck("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];let r=new fH(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new fj({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new ck(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}fY.className="InputLayer",d0.registerClass(fY);class fZ{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof fZ)for(let t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(let t of e)this.add(t.key,t.value)}}add(e,t,n){if(null==this.id2Value[e.id])this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return s0(t,e.dtype)}catch(n){throw new ck(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n);else throw new ck(`Duplicate key: name=${e.name}, id=${e.id}`);return this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof fH)if(null!=this.id2Value[e.id])return this.id2Value[e.id];else throw new ck(`Nonexistent key: ${e.name}`);{let t=this.name2Id[e];if(null==t)throw new ck(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof fH)if(null!=this.id2Value[e.id])return this.id2Mask[e.id];else throw new ck(`Nonexistent key: ${e.name}`);{let t=this.name2Id[e];if(null==t)throw new ck(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&iv(this.id2Mask)}}let fJ=new cS,fQ=new cS;function f0(e,t,n,r){let a,s=null!=n&&n.training,i=Array.isArray(e),o=i?e:[e],l=o.map(e=>e.name),u=[],h=t.names();for(let e of l)-1!==h.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);let p=l.join(",")+"|"+t.names().sort().join(","),d=fJ.get(p);if(null==d){let e=function(e,t){rg.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===e.length){let a=f1(e[0],t);n=a.sorted,r=a.recipientMap}else{let a=new Set;for(let s of e){let{sorted:e,recipientMap:i}=f1(s,t);for(let t of e)a.has(t.name)||(n.push(t),a.add(t.name));for(let e in i)null==r[e]&&(r[e]=new Set),i[e].forEach(t=>r[e].add(t))}}return{sorted:n,recipientCounts:function(e){let t={};for(let n in e)t[n]=e[n].size;return t}(r)}}(o,t);d=e.sorted,a=e.recipientCounts,fJ.put(p,d),fQ.put(p,a)}a={},s||Object.assign(a,fQ.get(p));let c=new fZ(t);for(let e=0;e<d.length;++e){if(null!=r){let e=ib().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}let i=d[e],o=i.sourceLayer;if(o instanceof fY)continue;let h=[],p=[],f=[],m=!1;for(let e of i.inputs){let n=c.getValue(e),r=c.getMask(e);h.push(n),p.push(r),null!=r&&(m=!0),!s&&(a[e.name]--,0!==a[e.name]||t.hasKey(e)||-1!==l.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=p[0]);let g=cE(o.apply(h,n)),y=null;o.supportsMasking&&(y=o.computeMask(h,p));let b=function(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(let r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}(i),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){c.hasKey(x[e])||c.add(x[e],g[e],Array.isArray(y)?y[0]:y);let t=l.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}s||iv(f)}return c.disposeMasks(),i?u:u[0]}function f1(e,t){let n=new Set,r=[],a={};for(let e of t.names())n.add(e);let s=[],i=[];for(s.push(e);s.length>0;){let e=s[s.length-1];if(n.has(e.name)){s.pop();continue}let t=i[i.length-1]===s.length-1;if(0===e.inputs.length||t)s.pop(),r.push(e),n.add(e.name),t&&i.pop();else for(let t of(i.push(s.length-1),e.inputs))null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||s.push(t)}return{sorted:r,recipientMap:a}}function f2(e,t){return ix(()=>uj(iX(iV(e,e),t,!0)))}eM.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function(e){null!=fJ&&fJ.setMaxEntries(e),null!=fQ&&fQ.setMaxEntries(e)});class f3 extends d0.Serializable{getConfig(){return{}}}class f4 extends f3{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ix(()=>{let t=f2(e,this.axis);return iV(e,lU(lC(t,0,this.maxValue),s4(c9(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}f4.className="MaxNorm",d0.registerClass(f4);class f6 extends f3{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ix(()=>lU(e,s4(c9(),f2(e,this.axis))))}getConfig(){return{axis:this.axis}}}f6.className="UnitNorm",d0.registerClass(f6);class f5 extends f3{apply(e){return iH(e)}}f5.className="NonNeg",d0.registerClass(f5);class f8 extends f3{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ix(()=>{let t=f2(e,this.axis),n=s4(iV(this.rate,lC(t,this.minValue,this.maxValue)),iV(1-this.rate,t));return iV(e,lU(n,s4(c9(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}f8.className="MinMaxNorm",d0.registerClass(f8);let f7={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function f9(e,t={}){return c_(e,d0.SerializationMap.getMap().classNameMap,t,"constraint")}function me(e){return null==e?null:"string"==typeof e?f9({className:e in f7?f7[e]:e,config:{}}):e instanceof f3?e:f9(e)}async function mt(e){if(null==e)return;let t=[],n=[],r=[];for(let a in e){let s=e[a];"number"!=typeof s&&(t.push(s.data()),n.push(a),r.push(s))}if(t.length>0){let a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];iv(r)}}function mn(e){if(null!=e)for(let t in e){let n=e[t];"number"!=typeof n&&n.dispose()}}!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(w||(w={}));class mr{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class ma{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(let t of this.callbacks)t.setParams(e)}setModel(e){for(let t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){for(let n of(null==t&&(t={}),this.callbacks))await n.onEpochBegin(e,t)}async onEpochEnd(e,t){for(let n of(null==t&&(t={}),this.callbacks))await n.onEpochEnd(e,t)}async onBatchBegin(e,t){for(let n of(null==t&&(t={}),this.callbacks))await n.onBatchBegin(e,t)}async onBatchEnd(e,t){for(let n of(null==t&&(t={}),this.callbacks))await n.onBatchEnd(e,t)}async onTrainBegin(e){for(let t of(null==e&&(e={}),this.callbacks))await t.onTrainBegin(e)}async onTrainEnd(e){for(let t of(null==e&&(e={}),this.callbacks))await t.onTrainEnd(e)}}class ms extends mr{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});let n=null==t.size?0:t.size;for(let e in this.seen+=n,t){let r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;let a=ix(()=>s4(this.totals[e],iV(r,n)));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(let e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:ix(()=>{let n=iV(lU(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),ik(t[e])}))}}class mi extends mr{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){for(let n in null==t&&(t={}),this.epoch.push(e),t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){let e=[],t=[],n=[];for(let r in this.history){let a=this.history[r];for(let s=0;s<a.length;++s)if("number"!=typeof a[s]){let i=a[s];e.push(i.data()),t.push(r),n.push(s)}}let r=await Promise.all(e);for(let e=0;e<r.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}class mo extends mr{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||dQ,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");rg.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,a=null!=n?n():rg.now();return(...s)=>{let i=null!=n?n():rg.now();return i-a<t?r:(a=i,r=e(...s))}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){let r=[];null!=this.yield&&(await mt(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await mt(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){let n=[];null!=this.epochEnd&&(await mt(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await mt(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){let n=[];null!=this.batchEnd&&(await mt(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):rg.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await mt(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await mt(e),await this.trainEnd(e))}}function ml(e,t){return(null==e&&(e={}),e instanceof mr)?[e]:Array.isArray(e)&&e[0]instanceof mr?e:cE(e).map(e=>new mo(e,t))}class mu{constructor(){}static registerCallbackConstructor(e,t){rg.assert(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),mu.checkForDuplicate(t),null==mu.constructors[e]&&(mu.constructors[e]=[]),mu.constructors[e].push(t)}static checkForDuplicate(e){for(let t in mu.constructors)mu.constructors[+t].forEach(t=>{if(t===e)throw new ck("Duplicate callback constructor.")})}static clear(){mu.constructors={}}static createCallbacks(e){let t=[];for(let n in mu.constructors){let r=+n;e>=r&&t.push(...mu.constructors[r])}return t.map(e=>new e)}}function mh(e,t,n,r,a,s,i,o,l){let u=new mi,h=[new ms,...mu.createCallbacks(t)];null!=e&&h.push(...e),h.push(u);let p=new ma(h);return p.setParams({epochs:n,initialEpoch:r,samples:a,steps:s,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:p,history:u}}function mp(e,t={},n=!1){return c_(e,d0.SerializationMap.getMap().classNameMap,t,"layer",n)}function md(e,t){return ix(()=>{var n;"float32"!==e.dtype&&(e=s0(e,"float32"));let r=iX(iV(n=e,n),t,!0),a=lT(r.shape,c9()),s=uj(hf(r,a));return lU(e,s)})}function mc(e,t){return ix(()=>{var n;return hm(iV(n=ht(t,e),n),-1)})}function mf(e,t){return ix(()=>hm(s3(ht(t,e)),-1))}function mm(e,t){return ix(()=>{let n=ht(e,t),r=lC(s3(e),c9(),Number.MAX_VALUE);return iV(100,hm(s3(lU(n,r)),-1))})}function mg(e,t,n=!1){return ix(()=>{if(n)t=h9(t);else{let e=iX(t,t.shape.length-1,!0);t=lU(t,e)}return t=lC(t,c9(),1-c9()),u7(iX(iV(s0(e,"float32"),u5(t)),t.shape.length-1))})}function my(e,t,n=!1){return ix(()=>{let r=s0(lG(function(e){let t=[c6(e.shape)];return im(e,t)}(e)),"int32"),a=(t=lC(t,c9(),1-c9())).shape;return mg(im(hT(r,a[a.length-1]),a),t,n)})}function mb(e,t){return ix(()=>{let n;return hm(function(e,t){if(!rg.arraysEqual(e.shape,t.shape))throw new ck(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return ix(()=>{let n=iH(t),r=u7(s3(t));return s4(ht(n,iV(t,e)),u8(l6(r)))})}(e,n=u5(lU(n=lC(t,c9(),1-c9()),ht(1,n)))),-1)})}function mx(e,t){return ix(()=>u7(iX(iV(md(e,-1),md(t,-1)),-1)))}mu.constructors={};let mv={meanSquaredError:mc,meanAbsoluteError:mf,meanAbsolutePercentageError:mm,meanSquaredLogarithmicError:function(e,t){return ix(()=>{var n;return hm(iV(n=ht(u5(s4(1,lC(t,c9(),Number.MAX_VALUE))),u5(s4(1,lC(e,c9(),Number.MAX_VALUE)))),n),-1)})},squaredHinge:function(e,t){return ix(()=>{let n=hf(0,ht(1,iV(e,t)));return hm(iV(n,n),-1)})},hinge:function(e,t){return ix(()=>hm(hf(0,ht(1,iV(e,t))),-1))},categoricalHinge:function(e,t){return ix(()=>{let n=iX(iV(e,t),-1),r=uV(iV(ht(1,e),t),-1);return hf(0,s4(1,ht(r,n)))})},logcosh:function(e,t){return ix(()=>{let n=Math.log(2),r=ht(t,e);return hm(ht(s4(r,u9(iV(-2,r))),n),-1)})},categoricalCrossentropy:mg,sparseCategoricalCrossentropy:my,binaryCrossentropy:mb,kullbackLeiblerDivergence:function(e,t){return ix(()=>{let n=lC(e,c9(),1);return iX(iV(e,u5(lU(n,lC(t,c9(),1)))),-1)})},poisson:function(e,t){return ix(()=>{let n=u5(s4(c9(),t));return hm(ht(t,iV(e,n)),-1)})},cosineProximity:mx};function mk(e){if("string"!=typeof e)return e;{if(e in mv)return mv[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new ck(t)}}function mw(e,t){return ix(()=>{let n=iV(.5,hC(t)),r=s0(uu(t,n),e.dtype);return hm(l4(e,r),-1)})}function mI(e,t){return ix(()=>s0(l4(s8(e,-1),s8(t,-1)),"float32"))}function mS(e,t){return mb(e,t)}function mN(e,t){return e.rank===t.rank&&(e=pi(e,[e.rank-1])),(t=s8(t,-1)).dtype!==e.dtype&&(t=s0(t,e.dtype)),s0(l4(e,t),"float32")}let mT={binaryAccuracy:mw,categoricalAccuracy:mI,precision:function(e,t){return ix(()=>{var n,r;let a=(n=e,r=t,ix(()=>s0(iX(ha(l4(n,1),l4(r,1))),"float32"))),s=s4(a,ix(()=>s0(iX(ha(l4(e,0),l4(t,1))),"float32")));return s0(uM(uu(s,0),lU(a,s),0),"float32")})},categoricalCrossentropy:mg,sparseCategoricalCrossentropy:my,mse:mc,MSE:mc,mae:mf,MAE:mf,mape:mm,MAPE:mm,cosine:mx};function mC(e){if(cT(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(let n of Object.keys(mv))if(mv[n]===e){t=n;break}if(void 0!==t)return t;for(let n of Object.keys(mT))if(mT[n]===e){t=n;break}return void 0!==t?t:e.name}}function m$(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!function e(t){if(null===t)return!0;if("object"==typeof t)if(Object.getPrototypeOf(t)===Object.prototype){for(let n of Object.keys(t))if("string"!=typeof n||!e(t[n]))return!1;return!0}else{if(!Array.isArray(t))return!1;for(let n of t)if(!e(n))return!1;return!0}{let e=typeof t;return"string"===e||"number"===e||"boolean"===e}}(e))throw Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){let n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function mE(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function mA(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function mR(e,t){if(null===e)return null;if("string"==typeof e)return cR(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){let n=[],r=e.length;for(let a=0;a<r;++a){let r=e[a];mA(t,a,r)?n.push(r):n.push(mR(r,t))}return n}{let t={};for(let n of Object.keys(e)){let r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{let e=cR(n);t[e]=mR(r,e)}}return t}}let mF="3.21.0";class mD extends fX{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){let e=this.getClassName().toLowerCase();this.name=cV(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],cM(this.inputs).length!==this.inputs.length)throw new ck(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(e=>e.name)}`);for(let e of(cM(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(e=>e.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[],this.outputs)){let t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(let e of this.inputs){let t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;cT(0===n,"input layer has >1 nodes"),cT(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){let n=this.inputLayers[t];if(!(n instanceof fY))throw TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(let e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);let t={},n={},r={},a={},s={},i=[],o=(e,t,n,r,a,l)=>{(null==r||null==a||null==l)&&(r=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);let u=r.inboundNodes[a];if(-1!==n.indexOf(u))throw new cv(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(mD.nodeKey(r,a)),r.id in s||(s[r.id]=Object.keys(s).length),-1===n.indexOf(u)&&n.push(u);let h=u.inboundLayers.length;for(let e=0;e<h;e++){let r=u.inputTensors[e],a=u.inboundLayers[e];o(r,t,n,a,u.nodeIndices[e],u.tensorIndices[e])}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(let e of this.outputs)o(e,l,u);for(let e of i.slice().reverse()){n[e.id]=e,e.id in t||(t[e.id]=0);let s=t[e.id];s=Math.max(s,null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id]),r[e.outboundLayer.id]=s,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=s;for(let r=0;r<e.inboundLayers.length;r++){let a=e.inboundLayers[r],i=e.nodeIndices[r],o=a.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(s+1,l),n[o.id]=o}}let h={};for(let e in t){let r=t[e];r in h||(h[r]=[]),h[r].push(n[e])}let p={};for(let e in r){let t=r[e];t in p||(p[t]=[]),p[t].push(a[e])}let d=Object.keys(p).map(e=>parseInt(e,10)).sort(cO);for(let e of(this.layers=[],d)){let t=p[e];for(let e of(t.sort((e,t)=>{let n=s[e.id],r=s[t.id];return n<r?-1:+(n>r)}),t))e instanceof mD&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map(e=>parseInt(e,10)).sort(cO);let c=this.inputs.slice(),f=[];for(let e of d)for(let t of h[e]){let e=t.outboundLayer;if(null!=e){for(let n of t.inputTensors)if(-1===c.indexOf(n))throw new cv(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${f}`);for(let e of t.outputTensors)c.push(e);f.push(e.name)}}this.nodesByDepth=h;let m=this.layers.map(e=>e.name);for(let e of m){let t=m.filter(t=>t===e).length;if(1!==t)throw new cv(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(m))}this.outboundNodes=[],this.inboundNodes=[],new fj({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(let t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(let t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new ck("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(let t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){let n={},r=0;for(let e of this.layers)for(let t of e.weights){if(null!=n[t.originalName])throw new ck(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}let a=[];for(let r in e){let s=r;if(null==n[r]){let e=r.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])a.push([n[s],e[r]]);else if(t)throw new ck(`Provided weight data has no target variable: ${r}`);delete n[s]}if(t){let e=[];for(let t in n)e.push(t);if(e.length>0)throw new ck(`${e.length} of ${r} weights are not set: ${e}`)}fV(a)}updatedConfig(){let e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${mF}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){let n=function e(t,n){if(null==t)return null;if("string"==typeof t)return cA(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){let r=[],a=t.length;for(let s=0;s<a;++s){let a=t[s];mA(n,s,a)?r.push(a):r.push(e(a,n))}return r}{let n={};for(let r of Object.keys(t)){let a=t[r],s=cA(r);("name"===r||"className"===r)&&"string"==typeof a?n[s]=a:n[s]=e(a,r)}return n}}(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return ix(()=>{e=cE(e);let n=new fZ;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return f0(this.outputs,n,t)})}computeMask(e,t){return ix(()=>{let n;return e=cE(e),n=null==t?cN(null,e.length):cE(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){let t=fM(e);if(t.length!==this.inputLayers.length)throw new ck(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);let n={};for(let e=0;e<t.length;e++){let r=this.inputLayers[e],a=t[e];n[r.name+"_0_0"]=a}let r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(cO);if(r.length>1)for(let e of r)for(let t of this.nodesByDepth[e]){let e=t.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(e.id))continue;let r=[];for(let e=0;e<t.inboundLayers.length;e++){let a=t.inboundLayers[e],s=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${a.name}_${s}_${i}`];r.push(o)}let a=fM(e.computeOutputShape(c$(r))),s=e.inboundNodes.indexOf(t);for(let t=0;t<a.length;t++)n[`${e.name}_${s}_${t}`]=a[t]}let a=[],s=[];for(let e=0;e<this.outputLayers.length;e++){let t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${r}`;s.push(a)}for(let e=0;e<s.length;e++){let t=s[e];cT(t in n),a.push(n[t])}return c$(a)}runInternalGraph(e,t){null==t&&(t=cN(null,e.length));let n={};for(let r=0;r<this.inputs.length;++r){let a=this.inputs[r],s=e[r],i=t[r];n[a.id]=[s,i]}for(let e of Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(cO))for(let t of this.nodesByDepth[e]){let e=t.outboundLayer,r=t.inputTensors,a=t.outputTensors,s=[];for(let e of r)e.id in n&&s.push(n[e.id]);if(s.length===r.length){let r,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===s.length){let[t,n]=s[0];null==u.mask&&(u.mask=n),o=cE(e.call(t,u)),l=cE(e.computeMask(t,n)),r=[t],i=[n]}else r=s.map(e=>e[0]),i=s.map(e=>e[1]),null==u.mask&&(u.mask=i),o=cE(e.call(r,u)),l=cE(e.computeMask(r,i));if(e.activityRegularizer)throw new cw("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){let t=a[e],r=o[e],s=l[e];n[t.id]=[r,s]}}}let r=[],a=[],s=[];for(let e of this.outputs){cT(e.id in n,`Could not compute output ${e.name} : ${e.id}`);let[t,i]=n[e.id];s.push(t.shape),r.push(t),a.push(i)}return[r,a,s]}buildNodeConversionMap(e){let t,n={};for(let e of this.layers){t=+(e instanceof mD);for(let r=0;r<e.inboundNodes.length;r++){let a=mD.nodeKey(e,r);this.containerNodes.has(a)&&(n[a]=t,t+=1)}}return n}getLayer(e,t){if(null!=t)if(!(this.layers.length<=t))return this.layers[t];else throw new ck(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);if(null==e)throw new ck("Provide either a layer name or layer index");for(let t of this.layers)if(t.name===e)return t;throw new ck(`No such layer: ${e}`)}calculateLosses(){return ix(()=>{let e=[];for(let t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){let r=mD.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e})}getConfig(){let e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(let e of this.layers){let r=e.getClassName(),a=e.getConfig(),s=[];for(let n=0;n<e.inboundNodes.length;n++){let r=e.inboundNodes[n],a=mD.nodeKey(e,n),i={};if(this.containerNodes.has(a)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(r.inboundLayers.length>0){let e=[];for(let n=0;n<r.inboundLayers.length;n++){let a=r.inboundLayers[n],s=r.nodeIndices[n],o=r.tensorIndices[n],l=t[mD.nodeKey(a,s)];null==l&&(l=0),e.push([a.name,l,o,i])}s.push(e)}}}let i={};i.name=e.name,i.className=r,i.config=a,i.inboundNodes=s,n.push(i)}e.layers=n;let r=[];for(let e=0;e<this.inputLayers.length;e++){let n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],s=mD.nodeKey(n,a);if(!this.containerNodes.has(s))continue;let i=t[s];null==i&&(i=0);let o=this.inputLayersTensorIndices[e];r.push([n.name,i,o])}e.inputLayers=r;let a=[];for(let e=0;e<this.outputLayers.length;e++){let n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],s=mD.nodeKey(n,r);if(!this.containerNodes.has(s))continue;let i=t[s];null==i&&(i=0);let o=this.outputLayersTensorIndices[e];a.push([n.name,i,o])}return e.outputLayers=a,e}static fromConfig(e,t,n={},r=!1){let a={},s={};function i(e,t){e.name in s?s[e.name].push(t):s[e.name]=[t]}let o=t.name,l=t.layers;for(let e of l){let n=e.name,s=mp(e,null!=t.customObjects?t.customObjects:{});s.setFastWeightInitDuringBuild(r),a[n]=s,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new ck(`Corrupted configuration, expected array for nodeData: ${e}`);i(s,e)})}for(;!function(e){if(null==e)throw new ck(`Invalid value in obj: ${JSON.stringify(e)}`);for(let t in e)if(e.hasOwnProperty(t))return!1;return!0}(s);)for(let e of l){let t=a[e.name];if(t.name in s){let e=s[t.name];for(let n of(delete s[t.name],e))!function(e,t){let n,r=[];for(let s of t){let o=s[0],l=s[1],u=s[2];if(n=null==s[3]?{}:s[3],!(o in a))return void i(e,t);let h=a[o];if(h.inboundNodes.length<=l)return void i(e,t);let p=h.inboundNodes[l];r.push(p.outputTensors[u])}r.length>0&&e.apply(c$(r),n)}(t,n)}}let u=[],h=[];for(let e of t.inputLayers){let t=e[0],n=e[1],r=e[2];cT(t in a);let s=a[t].inboundNodes[n].outputTensors;u.push(s[r])}for(let e of t.outputLayers){let t=e[0],n=e[1],r=e[2];cT(t in a);let s=a[t].inboundNodes[n].outputTensors;h.push(s[r])}return new e({inputs:u,outputs:h,name:o})}get stateful(){if(this._stateful)throw new ck("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let e of this.layers)if(e.stateful)return!0;return!1}resetStates(){ix(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function m_(e,t){var n=e,r=t,a="classWeight";let s=r.length;if(null==n||Array.isArray(n)&&0===n.length)return r.map(e=>null);if(1===s)if(Array.isArray(n)&&1===n.length)return n;else if("object"==typeof n&&r[0]in n)return[n[r[0]]];else return[n];if(Array.isArray(n)){if(n.length!==s)throw Error(`Provided ${a} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){let e=[];return r.forEach(t=>{t in n?e.push(n[t]):e.push(null)}),e}throw Error(`The model has multiple (${s}) outputs, so ${a} must be either an array with ${s} elements or an object with ${r} keys. Provided ${a} not understood: ${JSON.stringify(n)}`)}async function mO(e,t,n,r){if(null!=t||null!=r)throw Error("Support sampleWeight is not implemented yet");if(null==n)return null;{let t=ix(()=>{if(1===e.shape.length)return s1(e);if(2===e.shape.length)if(e.shape[1]>1)return s8(e,1);else if(1===e.shape[1])return im(e,[e.shape[0]]);else throw Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);throw Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await t.data());iv(t);let a=[];return r.forEach(e=>{if(null==n[e])throw Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])}),ph(a,"float32")}}function mM(e,t){let n,r;n=t.xs,r=t.ys,rg.assert(null!=n&&null!=r,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let a=mL("input",e.inputNames,n),s=mL("output",e.outputNames,r),i=a[0].shape[0];rg.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`),rg.assert(s.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${s.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);for(let t=0;t<a.length;t++)rg.assert(a[t].shape[0]===i,()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`);for(let t=0;t<s.length;t++)rg.assert(s[t].shape[0]===i,()=>`Batch size mismatch: output ${e.outputNames[t]} has ${s[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`);return{xs:a,ys:s}}function mL(e,t,n){if(n instanceof as)return[n];if(Array.isArray(n))return rg.assert(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{let r=[];for(let a of t){if(null==n[a])throw new ck(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);r.push(n[a])}return r}}async function mz(e,t,n){let r=null!=n.batchesPerEpoch;if(rg.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),rg.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),rg.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`),rg.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`),rg.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{var a,s;let i,o,l,u,h=null!=n.validationData;if(h)if(mP(n.validationData))rg.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);else{let e=function(e){if(3===e.length)throw new cw("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);i=e.xs,o=e.ys}let p=e.makeTrainFunction(),d=e.getDedupedMetricsNames();l=h?d.slice().concat(d.map(e=>"val_"+e)):d.slice();let c=ml(n.callbacks,n.yieldEvery),f=null==n.verbose?1:n.verbose,{callbackList:m,history:g}=mh(c,f,n.epochs,null,null,(a=t,s=n,u=null,null!=s.batchesPerEpoch?u=s.batchesPerEpoch:Number.isFinite(a.size)&&(u=a.size),u),null,h,l);m.setModel(e),e.history=g,await m.onTrainBegin(),e.stopTraining_=!1;let y=null==n.initialEpoch?0:n.initialEpoch,b=await t.iterator();for(;y<n.epochs;){let a={};await m.onEpochBegin(y);let s=0,l=0;for(r||(b=await t.iterator());!r||s<n.batchesPerEpoch;){let t=await b.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${s} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${n.batchesPerEpoch*n.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=t.value){let{xs:r,ys:a}=mM(e,t.value),i={};i.batch=l,i.size=r[0].shape[0],await m.onBatchBegin(l,i);let o=[];if(null!=n.classWeight){let t=m_(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await mO(a[e],null,t[e]))}let u=r.concat(a).concat(o),h=p(u);iv(u);for(let e=0;e<d.length;++e){let t=d[e],n=h[e];i[t]=n,ik(n)}await m.onBatchEnd(l,i),mn(i),l++,s++}if(r?s>=n.batchesPerEpoch:t.done){if(h){let t;t=mP(n.validationData)?cE(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):cE(e.evaluate(i,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)a[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await m.onEpochEnd(y,a),y++,e.stopTraining_)break}return await m.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function mP(e){return"function"==typeof e.iterator}async function mB(e,t,n){let r=null!=(n=n||{}).batches,a=e.testFunction,s=[];if(n.verbose>0)throw new cw("Verbose mode is not implemented yet.");rg.assert(!r||n.batches>0&&Number.isInteger(n.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);let i="function"==typeof t.next?t:await t.iterator(),o=0,l=0;for(;!r||l<n.batches;){let t=await i.next();if(s=ix(()=>{if(t.value){let{xs:n,ys:r}=mM(e,t.value),i=n.concat(r),u=ix(()=>a(i));if(iv(i),0===l)for(let e=0;e<u.length;++e)s.push(uq(0));let h=i[0].shape[0];for(let e=0;e<u.length;++e){let t=u[e],n=s[e];s[e]=ix(()=>s4(s[e],iV(h,t))),l>0&&iv(n)}iv(u),o+=h,++l}return s}),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<s.length;++e){let t=s[e];s[e]=lU(s[e],o),iv(t)}return c$(s)}function mW(e){rg.assert(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function mU(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>fn(e,t,n-t)):fn(e,t,n-t)}function mV(e,t){return ix(()=>null==e?null:Array.isArray(e)?e.map(e=>mV(e,t)):fh(e,"int32"===t.dtype?t:s0(t,"int32")))}function mG(e,t){let n=[],r=0,a=null;for(;r<e;)(a=r+t)>=e&&(a=e),n.push([r,a]),r=a;return n}async function mH(e,t,n,r,a,s,i,o,l,u,h,p,d,c,f){let m;null==a&&(a=32),null==s&&(s=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;if(null!=l&&null!=u&&(g=!0),null!=f&&(g=!0,null==c))throw new ck("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let y=e.checkNumSamples(n,a,c,"steps_per_epoch");null!=y&&(m=c7(0,y)),null==i&&(i=1);let{callbackList:b,history:x}=mh(o,i,s,d,y,c,a,g,p);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=d;i<s;++i){await b.onEpochBegin(i);let s={};if(null!=c)throw new cw("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new cw("batch shuffling is not implemneted yet");h&&rg.shuffle(m);let i=ph(m),o=mG(y,a);for(let h=0;h<o.length;++h){let p={};if(await b.onBatchBegin(h,p),ix(()=>{let d=o[h][0],c=o[h][1],f=fn(i,d,c-d);p.batch=h,p.size=c-d;let m=t(mV(n,f));for(let e=0;e<r.length;++e){let t=r[e],n=m[e];p[t]=n,ik(n)}if(h===o.length-1&&g){let t=e.testLoop(l,u,a);for(let e=0;e<r.length;++e){let n=r[e],a=t[e];ik(a),s["val_"+n]=a}}}),await b.onBatchEnd(h,p),mn(p),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,s),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}async function mq(e,t,n,r={}){let a,s,i,o,l,u,h,p,d;if(e.isTraining)throw Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{let c,f,m,g=null==r.batchSize?32:r.batchSize;mW(g);let y=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,!1,g);a=y[0],s=y[1],d=y[2];let b=!1;if(null!=r.validationData&&r.validationData.length>0){if(b=!0,2===r.validationData.length)l=r.validationData[0],u=r.validationData[1];else if(3===r.validationData.length)throw new cw("validationData including sample weights is not supported yet.");else throw new ck(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);let t=await e.standardizeUserData(l,u,null,null,!0,g);h=t[0],p=t[1],c=h.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){b=!0;let e=Math.floor(a[0].shape[0]*(1-r.validationSplit)),t=a[0].shape[0];h=mU(a,e,t),i=a,a=mU(a,0,e),p=mU(s,e,t),o=s,s=mU(s,0,e),c=h.concat(p)}else null!=r.validationSteps&&(b=!0);let x=a.concat(s).concat(d);e.checkTrainableWeightsConsistency();let v=e.makeTrainFunction(),k=e.getDedupedMetricsNames();b?(e.makeTestFunction(),f=e.testFunction,m=k.slice().concat(k.map(e=>"val_"+e))):(f=null,c=[],m=k.slice());let w=ml(r.callbacks,r.yieldEvery);return await mH(e,v,x,k,g,r.epochs,r.verbose,w,f,c,r.shuffle,m,r.initialEpoch,null,null)}finally{e.isTraining=!1,mK(a,t),mK(s,n),mK(i,t),mK(o,n),mK(h,l),mK(p,u),null!=d&&iv(d)}}function mj(e){let t=[];e instanceof as&&(e=[e]);for(let n=0;n<e.length;++n){let r=e[n];if(1===r.rank)t.push(ft(r,1));else if(0===r.rank)throw Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");else t.push(r)}return t}function mK(e,t){if(null==e)return;let n=[];if(t instanceof as)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(let e in t){let r=t[e];n.push(r.id)}let r=[];if(e instanceof as)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&r.push(e)});else if(null!=e)for(let t in e){let a=e[t];-1===n.indexOf(a.id)&&r.push(a)}r.forEach(e=>{e.isDisposed||e.dispose()})}function mX(e){return Array.isArray(e)}function mY(e){return!(e instanceof as)&&!mX(e)}function mZ(e,t,n,r=!0,a=""){let s;if(null==t||0===t.length){if(null!=e){let t=!1;if(mX(e)&&e.length>0)t=!0;else if(mY(e)){for(let n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new ck(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map(e=>null);if(mY(e))for(let n of(s=[],t)){if(null==e[n])throw new ck(`No data provided for "${n}". Need data for each key in: ${t}`);s.push(e[n])}else if(mX(e)){if(e.length!==t.length)throw new ck(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);s=e}else{if(t.length>1)throw new ck(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);s=[e]}if(s=mj(s),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;let i=s[e];if(i.shape.length!==n[e].length)throw new ck(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;let s=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&s!==o)throw new ck(`${a} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${a} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return s}function mJ(e,t,n,r=!0,a=""){let s;if(Array.isArray(e)){if(e.length!==t.length)throw new ck(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);s=e}else{if(t.length>1)throw new ck(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);s=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;let i=s[e];if(i.shape.length!==n[e].length)throw new ck(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let s=0;s<n[e].length;++s){if(0===s&&!r)continue;let o=i.shape[s],l=n[e][s];if(null!=l&&l!==o)throw new ck(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class mQ extends mD{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new ck("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,r=console.log){var a;let s,i,o=function(e){let t=!0,n=[],r=[];for(let t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(let e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(let n of e.layers){let e=!1;for(let a of n.inboundNodes)if(-1!==r.indexOf(a))if(e){t=!1;break}else e=!0;if(!t)break}return t}(e),l=["Layer (type)","Input Shape","Output shape","Param #"];if(o?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!o)for(let t in l.push("Receives inputs"),s=[],e.nodesByDepth)s.push(...e.nodesByDepth[t]);r("_".repeat(t)),mE(l,n,r),r("=".repeat(t));let u=e.layers;for(let e=0;e<u.length;++e)o?function(e,t,n){let r,a;try{a=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}let s=e.name,i=e.getClassName();mE([`${s} (${i})`,a,r,e.countParams().toString()],t,n)}(u[e],n,r):function(e,t,n,r){let a,s;try{s=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){s="multiple"}try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}let i=[];for(let t of e.inboundNodes)if(null==n||!(n.length>0)||-1!==n.indexOf(t))for(let e=0;e<t.inboundLayers.length;++e){let n=t.inboundLayers[e].name,r=t.nodeIndices[e],a=t.tensorIndices[e];i.push(`${n}[${r}][${a}]`)}let o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];mE([`${o} (${l})`,s,a,e.countParams().toString(),u],t,r);for(let e=1;e<i.length;++e)mE(["","","","",i[e]],t,r)}(u[e],n,s,r),r((e===u.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();let h=null!=(a=e).collectedTrainableWeights?fP(a.collectedTrainableWeights):fP(a.trainableWeights),p=fP(e.nonTrainableWeights);r(`Total params: ${h+p}`),r(`Trainable params: ${h}`),r(`Non-trainable params: ${p}`),r("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){let t={Adagrad:()=>cr.adagrad(.01),Adadelta:()=>cr.adadelta(1,.95,c9()),Adam:()=>cr.adam(.001,.9,.999,c9()),Adamax:()=>cr.adamax(.002,.9,.999,c9(),0),RMSProp:()=>cr.rmsprop(.001,.9,0,c9()),SGD:()=>cr.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new ck(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof d4))throw new ck("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new ck(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(e=>mk(e))}else{let n=mk(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{for(let t in e.loss=e.loss,e.loss)if(-1===this.outputNames.indexOf(t))throw new ck(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(let n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(mk(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){let t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}let n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],c0("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;let t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});let r=function(e,t){let n;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);if("string"==typeof e||"function"==typeof e)n=[e];else if(Array.isArray(e)||"object"==typeof e)n=e;else throw TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);if(Array.isArray(n))return t.map(e=>n);{let e=[];for(let r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};c0("metric",()=>{for(let e=0;e<this.outputs.length;++e){if(-1===n.indexOf(e))(t=>{let n,r,s;for(let i of t){let t;if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){let t,a=this.internalOutputShapes[e];1===a[a.length-1]||this.lossFunctions[e]===mb?-1!==["accuracy","acc"].indexOf(i)?r=mw:-1!==["crossentropy","ce"].indexOf(i)&&(r=mS):this.lossFunctions[e]===my?-1!==["accuracy","acc"].indexOf(i)?r=mN:-1!==["crossentropy","ce"].indexOf(i)&&(r=my):-1!==["accuracy","acc"].indexOf(i)?r=mI:-1!==["crossentropy","ce"].indexOf(i)&&(r=mg),-1!==["accuracy","acc"].indexOf(i)?t="acc":-1!==["crossentropy","ce"].indexOf(i)&&(t="ce"),s=r,n=""+t}else s=function(e){if("string"==typeof e&&e in mT)return mT[e];if("string"!=typeof e&&null!=e)return e;throw new ck(`Unknown metric ${e}`)}(i),n=""+mC(i);c0(n,()=>{t=s}),a(e,n,t)}})(r[e])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){let r=null==n.batchSize?32:n.batchSize;mW(r);let a=this.standardizeUserDataXY(e,t,!0,r);try{let e=a[0].concat(a[1]);this.makeTestFunction();let t=this.testFunction,s=this.testLoop(t,e,r,n.verbose,n.steps);return c$(s)}finally{mK(a[0],e),mK(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),mB(this,e,t)}checkNumSamples(e,t,n,r="steps"){let a;if(null!=n){if(a=null,null!=t)throw new ck(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else if(null!=e)a=Array.isArray(e)?e[0].shape[0]:e.shape[0];else throw new ck(`Either the input data should have a defined shape, or ${r} shoud be specified.`);return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new ck("`outputs` is an empty Array, which is not allowed.");let n=Array.isArray(t),r=n?t:[t],a=this.retrieveSymbolicTensors(r),s=new fZ;if(e instanceof as&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new ck(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)s.add(this.inputs[t],e[t])}else for(let t of this.inputs){let n=e[t.name];if(null==n)throw new ck(`No value is provided for the model's input ${t.name}`);s.add(t,n)}let i=f0(a,s);return n?i:i[0]}retrieveSymbolicTensors(e){let t=cN(null,e.length),n=e.length;for(let r of this.layers){let a=Array.isArray(r.output)?r.output:[r.output],s=a.map(e=>e.name);for(let r=0;r<e.length;++r){let i=s.indexOf(e[r]);if(-1!==i&&(t[r]=a[i],n--),0===n)break}if(0===n)break}if(n>0){let n=[];throw t.forEach((t,r)=>{null==t&&n.push(e[r])}),new ck(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return ix(()=>{let r=this.checkNumSamples(e);if(n)throw new cw("Verbose predictLoop() is not implemented yet.");let a=mG(r,t),s=this.outputs.map(e=>[]);for(let t=0;t<a.length;++t)ix(()=>{let n=mU(e,a[t][0],a[t][1]),r=[];if(Array.isArray(n))for(let e=0;e<n.length;++e)r.push({key:this.inputs[e],value:n[e]});else r.push({key:this.inputs[0],value:n});let s=new fZ(r);return f0(this.outputs,s)}).forEach((e,t)=>s[t].push(e));return c$(s.map(e=>l$(e,0)))})}predict(e,t={}){let n=mj(e);mJ(n,this.inputNames,this.feedInputShapes,!1);try{let e=null==t.batchSize?32:t.batchSize;return mW(e),this.predictLoop(n,e)}finally{mK(n,e)}}predictOnBatch(e){mJ(e,this.inputNames,this.feedInputShapes,!0);let t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new cv("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let a=[];for(let e=0;e<this.feedOutputShapes.length;++e){let t=this.feedOutputShapes[e];this.feedLossFns[e]===my?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}e=mZ(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=mZ(t,this.feedOutputNames,a,!1,"target");var s=e,i=t;let o=cM(s.map(e=>e.shape[0]));o.sort();let l=cM(i.map(e=>e.shape[0]));if(l.sort(),o.length>1)throw new ck(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(s.map(e=>e.shape))}`);if(l.length>1)throw new ck(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(i.map(e=>e.shape))}`);if(o.length>0&&l.length>0&&!rg.arraysEqual(o,l))throw new ck(`Input Tensors should have the same number of samples as target Tensors. Found ${o[0]} input sample(s) and ${l[0]} target sample(s).`);if(!function(e,t,n){let r=[mc,mb,mg];for(let a=0;a<e.length;++a){let s=e[a],i=t[a],o=n[a];if(null!=i){if(i===mg&&1===s.shape[s.shape.length-1])throw new ck(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){let e=s.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){let r=e[n],a=t[n];if(null!=a&&r!==a)throw new ck(`A target Tensor with shape ${s.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new ck(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,a=!0,s){let[i,o]=this.standardizeUserDataXY(e,t,a,s);if(null!=n)throw Error("sample weight is not supported yet.");let l=null;if(null!=r){let e=m_(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await mO(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,r=0,a){return ix(()=>{let s=this.checkNumSamples(t,n,a,"steps"),i=[];if(r>0)throw new cw("Verbose mode is not implemented yet.");if(null!=a)throw new cw("steps mode in testLoop() is not implemented yet");{let r=mG(s,n),a=ph(c7(0,s));for(let n=0;n<r.length;++n){let s=r[n][0],o=r[n][1],l=e(mV(t,fn(a,s,o-s)));if(0===n)for(let e=0;e<l.length;++e)i.push(uq(0));for(let e=0;e<l.length;++e){let t=l[e];i[e]=s4(i[e],iV(o-s,t))}}for(let e=0;e<i.length;++e)i[e]=lU(i[e],s)}return i})}getDedupedMetricsNames(){let e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){let r=e[n],a=r;if(cC(e,r)>1){let t=cC(e.slice(0,n),r);a+=`_${t}`}t.push(a)}return t}makeTrainFunction(){return e=>{let t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),s=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{let e,i=[];for(let e=0;e<this.inputs.length;++e)i.push({key:this.inputs[e],value:n[e]});let o=new fZ(i),l=f0(this.outputs,o,{training:!0});for(let n=0;n<this.lossFunctions.length;++n){let s=(0,this.lossFunctions[n])(r[n],l[n]);null!=a[n]&&(s=iV(s,a[n]));let i=hm(s);t.push(i),e=0===n?s:s4(e,s)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{let t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];n=hm(t(r[a],l[a]))}ik(n),s.push(n)}return e=hm(e),this.calculateLosses().forEach(t=>{e=s4(e,t)}),e},!0,i)].concat(s)}}makeTestFunction(){this.testFunction=e=>ix(()=>{let t,n=[],r=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=[];for(let e=0;e<this.inputs.length;++e)s.push({key:this.inputs[e],value:r[e]});let i=new fZ(s),o=f0(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){let r=hm((0,this.lossFunctions[e])(a[e],o[e]));t=0===e?r:s4(t,r),n.push(t)}for(let e=0;e<this.metricsTensors.length;++e){let t=this.metricsTensors[e][0],r=this.metricsTensors[e][1],s=hm(t(a[r],o[r]));n.push(s)}return n})}async fit(e,t,n={}){return mq(this,e,t,n)}async fitDataset(e,t){return mz(this,e,t)}async trainOnBatch(e,t){let n=await this.standardizeUserData(e,t),r=n[0],a=n[1],s=this.makeTrainFunction()(r.concat(a)),i=[];for(let e of s){let t=await e.data();i.push(t[0])}return iv(s),mK(n[0],e),mK(n[1],t),c$(i)}getNamedWeights(e){let t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<r.length;++e)(!n||r[e].trainable)&&t.push({name:r[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){let e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){let t=ib().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-ib().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=cA(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if("string"!=typeof e)throw Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>cA(e))}else{let t=Object.keys(this.loss);e={};let n=this.loss;for(let r of t)if("string"==typeof n[r])e[r]=cA(n[r]);else throw Error("Serialization of non-string loss is not supported.")}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[cA(mC(this.metrics))];{if(Array.isArray(this.metrics))return this.metrics.map(e=>cA(mC(e)));let e={};for(let t in this.metrics)e[t]=cA(mC(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){let t,n;if(null!=e.weighted_metrics)throw Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw Error("Loading sample_weight_mode is not supported yet.");let r=mp(mR(e.optimizer_config));if("string"==typeof e.loss)t=cR(e.loss);else if(Array.isArray(e.loss))t=e.loss.map(e=>cR(e));else if(null!=e.loss)for(let n in t={},e.loss)t[n]=cR(e.loss[n]);if(Array.isArray(e.metrics))n=e.metrics.map(e=>cR(e));else if(null!=e.metrics)for(let t in n={},e.metrics)n[t]=cR(e.metrics[t]);this.compile({loss:t,metrics:n,optimizer:r})}async save(e,t){if("string"==typeof e){let t=dA.getSaveHandlers(e);if(0===t.length)throw new ck(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new ck(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new ck("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let n=await dA.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${mF}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();let{data:e,specs:t}=await dA.encodeWeights(await this.optimizer.getWeights(),"optimizer");n.specs.push(...t),n.data=dA.concatenateArrayBuffers([n.data,e])}return null!=this.userDefinedMetadata&&(m$(this.userDefinedMetadata,this.name,!0),r.userDefinedMetadata=this.userDefinedMetadata),r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){m$(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}mQ.className="Model",d0.registerClass(mQ);class m0 extends mQ{}async function m1(e,t){if(null==t&&(t={}),"string"==typeof e){let n=dA.getLoadHandlers(e,t);if(0===n.length)n.push(dA.browserHTTPRequest(e,t));else if(n.length>1)throw new ck(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return m2(e,void 0,t)}async function m2(e,t,n){if(null==n&&(n={}),null==e.load)throw new ck("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let r=await e.load(),a=r.modelTopology;null!=a.model_config&&(a=a.model_config);let s=null==n.strict||n.strict,i=null!=r.weightData&&null!=r.weightSpecs&&s,o=mp(mR(a),t,i),l=r.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata),null!=r.weightData){if(null==r.weightSpecs)throw new ck("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");let{modelWeights:e,optimizerWeights:t}=function(e,t){let n=dA.decodeWeights(e,t),r={},a=[];return t.forEach(e=>{"optimizer"===e.group?a.push({name:e.name,tensor:n[e.name]}):r[e.name]=n[e.name]}),{modelWeights:r,optimizerWeights:a}}(r.weightData,r.weightSpecs);o.loadWeights(e,s),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),iv(e),iv(t.map(e=>e.tensor))}return o}m0.className="Functional",d0.registerClass(m0);class m3 extends mQ{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:cV("sequential_"),null!=e.layers)for(let t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new ck(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){let t,n=e instanceof m3||e instanceof mQ;if(n){if(1!==(t=e).outputs.length)throw new ck("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==t.inputs.length)throw new ck("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new ck("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let t=function(e){if(null==e.batchShape&&null==e.shape)throw Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new ck("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new fY({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(n)this.outputs=t.outputs,this.inputs=t.inputs;else{if(1!==e.inboundNodes.length)throw new ck(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new ck("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=function e(t,n,r){if((null==n||null!=r&&r>0)&&(n=t.sourceLayer,r=t.nodeIndex),0===n.inboundNodes.length)return[t];{let t=n.inboundNodes[r];if(0===t.inboundLayers.length)return t.inputTensors;{let n=[];for(let r=0;r<t.inboundLayers.length;r++){let a=t.inputTensors[r];for(let s of e(a,t.inboundLayers[r],t.nodeIndices[r]))-1===n.indexOf(s)&&n.push(s)}return n}}}(this.outputs[0])}this.inboundNodes=[],new fj({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:cN(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{let t=e.apply(this.outputs[0]);if(Array.isArray(t))throw TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(fz(e),0===this.inputs.length||0===this.outputs.length)throw TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new mQ({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new cv("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new cv("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new cv("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new cv("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let a,s={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new ck("Legacy serialization format not supported yet.");a=t}else rg.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,s=t;let i=new e(s);if(!(i instanceof m3))throw new cw(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(let e of a){let t=mp(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new ck("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new ck("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let e=[];for(let t of this.layers){let n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}m3.className="Sequential",d0.registerClass(m3);class m4 extends d0.Serializable{getConfig(){return{}}}class m6 extends m4{apply(e,t=1){return function(e,t=1){if(1!==t)throw new cw(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return iW(e)}(e,t)}}m6.className="elu",d0.registerClass(m6);class m5 extends m4{apply(e){return hQ(e)}}m5.className="selu",d0.registerClass(m5);class m8 extends m4{apply(e){return iH(e)}}m8.className="relu",d0.registerClass(m8);class m7 extends m4{apply(e){return ix(()=>hx(6,iH(e)))}}m7.className="relu6",d0.registerClass(m7);class m9 extends m4{apply(e){return e}}m9.className="linear",d0.registerClass(m9);class ge extends m4{apply(e){return ij(e)}}ge.className="sigmoid",d0.registerClass(ge);class gt extends m4{apply(e){return ix(()=>lC(s4(.5,iV(.2,e)),0,1))}}gt.className="hardSigmoid",d0.registerClass(gt);class gn extends m4{apply(e){return u9(e)}}gn.className="softplus",d0.registerClass(gn);class gr extends m4{apply(e){return ix(()=>lU(e,s4(s3(e),1)))}}gr.className="softsign",d0.registerClass(gr);class ga extends m4{apply(e){return uw(e)}}ga.className="tanh",d0.registerClass(ga);class gs extends m4{apply(e,t=-1){return h9(e,t)}}gs.className="softmax",d0.registerClass(gs);class gi extends m4{apply(e,t=-1){return hn(e,t)}}gi.className="logSoftmax",d0.registerClass(gi);class go extends m4{apply(e,t=1){return ix(()=>iV(ij(iV(e,t)),e))}}go.className="swish",d0.registerClass(go);class gl extends m4{apply(e){return ix(()=>iV(e,uw(u9(e))))}}function gu(e){return e.getClassName()}function gh(e,t={}){return c_(e,d0.SerializationMap.getMap().classNameMap,t,"activation")}function gp(e){if(null==e){let e={};return e.className="linear",e.config={},gh(e)}if("string"==typeof e){let t={};return t.className=e,t.config={},gh(t)}return e instanceof m4?e:gh(e)}gl.className="mish",d0.registerClass(gl);class gd extends d0.Serializable{}class gc extends gd{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return ix(()=>{let t=hg([1]);return this.hasL1&&(t=s4(t,iX(iV(this.l1,s3(e))))),this.hasL2&&(t=s4(t,iX(iV(this.l2,iV(e,e))))),im(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}gc.className="L1L2",d0.registerClass(gc);let gf={l1l2:"L1L2"};function gm(e,t={}){return c_(e,d0.SerializationMap.getMap().classNameMap,t,"regularizer")}function gg(e){return null==e?null:"string"==typeof e?gm({className:e in gf?gf[e]:e,config:{}}):e instanceof gd?e:gm(e)}class gy extends fX{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){let n=iH(e=fL(e));return null!=this.maxValue&&(n=lC(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){let e={maxValue:this.maxValue};return Object.assign(e,super.getConfig()),e}}gy.className="ReLU",d0.registerClass(gy);class gb extends fX{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){return iU(fL(e),this.alpha)}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha};return Object.assign(e,super.getConfig()),e}}gb.className="LeakyReLU",d0.registerClass(gb);class gx extends fX{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=f_(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=gg(e.alphaRegularizer),this.alphaConstraint=me(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else if("number"==typeof e.sharedAxes)this.sharedAxes=[e.sharedAxes];else throw new ck(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`)}build(e){let t=(e=fz(e)).slice(1);if(null!=this.sharedAxes)for(let e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new fG({ndim:e.length,axes:n})],this.built=!0}call(e,t){return iG(e=fL(e),this.alpha.read())}getConfig(){let e={alphaInitializer:cD(this.alphaInitializer),alphaRegularizer:cD(this.alphaRegularizer),alphaConstraint:cD(this.alphaConstraint),sharedAxes:this.sharedAxes};return Object.assign(e,super.getConfig()),e}}gx.className="PReLU",d0.registerClass(gx);class gv extends fX{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new cw(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){return iW(fL(e))}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha};return Object.assign(e,super.getConfig()),e}}gv.className="ELU",d0.registerClass(gv);class gk extends fX{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){let n=fL(e);return iV(n,s0(uu(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){let e={theta:this.theta};return Object.assign(e,super.getConfig()),e}}gk.className="ThresholdedReLU",d0.registerClass(gk);class gw extends fX{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=new gs().apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){let n=fL(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){let e={axis:this.axis};return Object.assign(e,super.getConfig()),e}}function gI(e,t,n){if("number"==typeof e)return cN(e,t);if(e.length!==t)throw new ck(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){let a=e[r];if(a!==parseInt(a.toString(),10))throw new ck(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e}function gS(e,t,n,r,a=1){let s;return null==e?e:Math.floor((("same"===n?e:e-(t+(t-1)*(a-1))+1)+r-1)/r)}function gN(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+c8([n-t,0]);else if("same"===r)e*=t;else throw new ck(`Unsupport padding mode: ${r}.`);return e}function gT(e,t){return ix(()=>(cY(t),"channelsFirst"===t)?pC(e,[0,2,3,1]):e)}function gC(e,t){return ix(()=>(cY(t),"channelsFirst"===t)?pC(e,[0,2,3,4,1]):e)}function g$(e,t,n,r=[1,1],a="valid",s,i,o=null){return ix(()=>{if(null==s&&(s=fe()),cY(s),3!==e.rank&&4!==e.rank)throw new ck(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new ck(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=gT(e,s);if("causal"===a)throw new cw("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=l9.conv2d({x:l,filter:t,strides:r,pad:"same"===a?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===s&&(l=pC(l,[0,3,1,2])),l})}gw.className="Softmax",d0.registerClass(gw);class gE extends fX{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",gE.verifyArgs(t),this.rank=e,cP(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new cw(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=gI(t.kernelSize,e,"kernelSize"),this.strides=gI(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,cZ(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,cY(this.dataFormat),this.activation=gp(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=f_(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=me(t.biasConstraint),this.biasRegularizer=gg(t.biasRegularizer),this.activityRegularizer=gg(t.activityRegularizer),this.dilationRate=gI(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new ck(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new ck(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new ck(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(e){if(cT("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!cz(e.kernelSize,"number",1,3))throw new ck(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){let e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:gu(this.activation),useBias:this.useBias,biasInitializer:cD(this.biasInitializer),biasRegularizer:cD(this.biasRegularizer),activityRegularizer:cD(this.activityRegularizer),biasConstraint:cD(this.biasConstraint)};return Object.assign(e,super.getConfig()),e}}class gA extends gE{constructor(e,t){super(e,t),this.kernel=null,gA.verifyArgs(t),this.filters=t.filters,cP(this.filters,"filters"),this.kernelInitializer=f_(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=me(t.kernelConstraint),this.kernelRegularizer=gg(t.kernelRegularizer)}build(e){e=fz(e);let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new ck(`The channel dimension of the input should be defined. Found ${e[t]}`);let n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return ix(()=>{let t;e=fL(e);let n=null==this.bias?null:this.bias.read(),r=cB(this.activation.getClassName());if(null!=r&&2===this.rank)t=g$(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,a="valid",s,i=1){return ix(()=>{if(null==s&&(s=fe()),cY(s),3!==e.shape.length)throw new ck(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new ck(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new ck(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===s&&(e=pC(e,[0,2,1])),"causal"===a)throw new cw("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=l_(e,t,r,"same"===a?"same":"valid","NWC",i);return null!=n&&(o=fd(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=g$(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(3===this.rank)t=function(e,t,n,r=[1,1,1],a="valid",s,i){return ix(()=>{if(null==s&&(s=fe()),cY(s),4!==e.rank&&5!==e.rank)throw new ck(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new ck(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=gC(e,s);if("causal"===a)throw new cw("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=lL(o,t,r,"same"===a?"same":"valid","NDHWC",i),null!=n&&(o=fd(o,n)),"channelsFirst"===s&&(o=pC(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new cw("convolutions greater than 3D are not implemented yet.");null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=fz(e);let t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){let r=gS(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t)).push(this.filters):(r.push(this.filters),r=r.concat(t)),r}getConfig(){let e={filters:this.filters,kernelInitializer:cD(this.kernelInitializer),kernelRegularizer:cD(this.kernelRegularizer),kernelConstraint:cD(this.kernelConstraint)};return Object.assign(e,super.getConfig()),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new ck(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class gR extends gA{constructor(e){super(2,e),gR.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!cz(e.kernelSize,"number",1,2))throw new ck(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}gR.className="Conv2D",d0.registerClass(gR);class gF extends gA{constructor(e){super(3,e),gF.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!(Array.isArray(e.kernelSize)&&(1===e.kernelSize.length||3===e.kernelSize.length)))throw new ck(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}gF.className="Conv3D",d0.registerClass(gF);class gD extends gR{constructor(e){if(super(e),this.inputSpec=[new fG({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new ck(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=fz(e)).length)throw new ck("Input should have rank 4; Received input shape: "+JSON.stringify(e));let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new ck("The channel dimension of the inputs should be defined. Found `None`.");let n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new fG({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return ix(()=>{let t,n,r=fL(e);if(4!==r.shape.length)throw new ck(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);let a=r.shape,s=a[0];"channelsFirst"===this.dataFormat?(t=2,n=3):(t=1,n=2);let i=a[t],o=a[n],l=this.kernelSize[0],u=this.kernelSize[1],h=this.strides[0],p=this.strides[1],d=[s,gN(i,h,l,this.padding),gN(o,p,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=pC(r,[0,2,3,1]));let c=lM(r,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(c=pC(c,[0,3,1,2])),null!=this.bias&&(c=fd(c,this.bias.read(),this.dataFormat)),null!=this.activation&&(c=this.activation.apply(c)),c})}computeOutputShape(e){let t,n,r,a=(e=fz(e)).slice();"channelsFirst"===this.dataFormat?(t=1,n=2,r=3):(t=3,n=1,r=2);let s=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return a[t]=this.filters,a[n]=gN(a[n],o,s,this.padding),a[r]=gN(a[r],l,i,this.padding),a}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}}gD.className="Conv2DTranspose",d0.registerClass(gD);class g_ extends gF{constructor(e){if(super(e),this.inputSpec=[new fG({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new ck(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=fz(e)).length)throw new ck("Input should have rank 5; Received input shape: "+JSON.stringify(e));let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new ck("The channel dimension of the inputs should be defined. Found `None`.");let n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new fG({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return ix(()=>{let t,n,r,a=fL(e);if(5!==a.shape.length)throw new ck(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${a.shape.length}`);let s=a.shape,i=s[0];"channelsFirst"===this.dataFormat?(r=2,t=3,n=4):(r=1,t=2,n=3);let o=s[r],l=s[t],u=s[n],h=this.kernelSize[0],p=this.kernelSize[1],d=this.kernelSize[2],c=this.strides[0],f=this.strides[1],m=this.strides[2],g=gN(o,c,h,this.padding),y=[i,g,gN(l,f,p,this.padding),gN(u,m,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(a=pC(a,[0,2,3,4,1]));let b=lP(a,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=pC(b,[0,4,1,2,3])),null!==this.bias&&(b=fd(b,this.bias.read(),this.dataFormat)),null!==this.activation&&(b=this.activation.apply(b)),b})}computeOutputShape(e){let t,n,r,a,s=(e=fz(e)).slice();"channelsFirst"===this.dataFormat?(t=1,n=2,r=3,a=4):(t=4,n=1,r=2,a=3);let i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],h=this.strides[1],p=this.strides[2];return s[t]=this.filters,s[n]=gN(s[n],u,i,this.padding),s[r]=gN(s[r],h,o,this.padding),s[a]=gN(s[a],p,l,this.padding),s}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}}g_.className="Conv3DTranspose",d0.registerClass(g_);class gO extends gA{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new ck("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new ck("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new ck(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=f_(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=gg(t.depthwiseRegularizer),this.depthwiseConstraint=me(t.depthwiseConstraint),this.pointwiseInitializer=f_(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=gg(t.pointwiseRegularizer),this.pointwiseConstraint=me(t.pointwiseConstraint)}build(e){if((e=fz(e)).length<this.rank+2)throw new ck(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new ck(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);let n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new fG({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return ix(()=>{let t;if(e=fL(e),1===this.rank)throw new cw("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=pC(e,[0,2,3,1])),t=h0(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=fd(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=pC(t,[0,3,1,2])),t})}getConfig(){let e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=cD(this.depthwiseInitializer),e.pointwiseInitializer=cD(this.pointwiseInitializer),e.depthwiseRegularizer=cD(this.depthwiseRegularizer),e.pointwiseRegularizer=cD(this.pointwiseRegularizer),e.depthwiseConstraint=cD(this.depthwiseConstraint),e.pointwiseConstraint=cD(this.pointwiseConstraint),e}}gO.className="SeparableConv";class gM extends gO{constructor(e){super(2,e)}}gM.className="SeparableConv2D",d0.registerClass(gM);class gL extends gA{constructor(e){super(1,e),gL.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){let e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!cz(e.kernelSize,"number",1,1))throw new ck(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}gL.className="Conv1D",d0.registerClass(gL);class gz extends fX{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return ix(()=>{if(e=fL(e),"channelsLast"===this.dataFormat){let t=fa(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return fa(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{let t=fa(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return fa(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let e={cropping:this.cropping,dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}gz.className="Cropping2D",d0.registerClass(gz);class gP extends fX{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cY(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,cL(cH,"InterpolationFormat",this.interpolation)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){let t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{let t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return ix(()=>{let t=fL(e),n=t.shape;if("channelsFirst"===this.dataFormat){t=pC(t,[0,2,3,1]);let e=this.size[0]*n[2],r=this.size[1]*n[3];return pC("nearest"===this.interpolation?dN.resizeNearestNeighbor(t,[e,r]):dN.resizeBilinear(t,[e,r]),[0,3,1,2])}{let e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?dN.resizeNearestNeighbor(t,[e,r]):dN.resizeBilinear(t,[e,r])}})}getConfig(){let e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation};return Object.assign(e,super.getConfig()),e}}gP.className="UpSampling2D",d0.registerClass(gP);class gB extends gE{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=f_(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=me(e.depthwiseConstraint),this.depthwiseRegularizer=gg(e.depthwiseRegularizer)}build(e){if((e=fz(e)).length<4)throw new ck(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);let t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new ck(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);let n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ix(()=>{let t=function(e,t,n=[1,1],r="valid",a,s){return ix(()=>{null==a&&(a=fe()),cY(a);let s=gT(e,a);if(4!==e.rank)throw new ck(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new ck(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return s=lB(s,t,n,"same"===r?"same":"valid","NHWC",null),"channelsFirst"===a&&(s=pC(s,[0,3,1,2])),s})}(e=fL(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,0);return this.useBias&&(t=fd(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=fz(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=gS(t,this.kernelSize[0],this.padding,this.strides[0]),s=gS(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,a,s]:[e[0],a,s,r]}getConfig(){let e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=cD(this.depthwiseInitializer),e.depthwiseRegularizer=cD(this.depthwiseRegularizer),e.depthwiseConstraint=cD(this.depthwiseRegularizer),e}}function gW(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new ck("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function gU(e,t,n,r=!1,a,s,i=!1,o=!1){return ix(()=>{let l,u,h,p=t.shape.length;if(p<3)throw new ck(`Input should be at least 3D, but is ${p}D.`);let d=[1,0].concat(c7(2,p));if(t=pC(t,d),null!=s)throw new cw("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=s0(s0(a,"bool"),"float32")).rank===p-1&&(a=l5(a,-1)),a=pC(a,d)),r&&(t=hq(t,0),null!=a&&(a=hq(a,0)));let c=[],f=n,m=t.shape[0],g=px(t);null!=a&&(u=px(a));for(let t=0;t<m;++t){let n=g[t],r=ix(()=>e(n,f));if(null==a)l=r[0],f=r[1];else{let e=ix(()=>{let e=u[t],n=ht(hC(e),e);return{output:s4(iV(r[0],e),iV(f[0],n)),newStates:f.map((t,a)=>s4(iV(r[1][a],e),iV(t,n)))}});l=e.output,f=e.newStates}o&&c.push(l)}return o&&(h=po(c,1)),[l,h,f]})}gB.className="DepthwiseConv2D",d0.registerClass(gB);class gV extends fX{constructor(e){let t;if(super(e),null==e.cell)throw new ck("cell property is missing for the constructor of RNN.");if(null==(t=Array.isArray(e.cell)?new gZ({cells:e.cell}):e.cell).stateSize)throw new ck("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new fG({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?c7(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){let t;fO(e)&&(e=e[0]);let n=this.cell.stateSize;Array.isArray(n)||(n=[n]);let r=n[0];if(t=this.returnSequences?[e[0],e[1],r]:[e[0],r],!this.returnState)return t;{let r=[];for(let t of n)r.push([e[0],t]);return[t].concat(r)}}computeMask(e,t){return ix(()=>{Array.isArray(t)&&(t=t[0]);let e=this.returnSequences?t:null;return this.returnState?[e].concat(this.states.map(e=>null)):e})}get states(){if(null!=this.states_)return this.states_;{let e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}}set states(e){this.states_=e}build(e){let t;if(null!=this.numConstants)throw new cw("Constants support is not implemented in RNN yet.");fO(e)&&(e=e[0]);let n=this.stateful?e[0]:null,r=e.slice(2);this.inputSpec[0]=new fG({shape:[n,null,...r]});let a=[e[0]].concat(e.slice(2));if(this.cell.build(a),t=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!rg.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),t))throw new ck(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=t.map(e=>new fG({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){ix(()=>{if(!this.stateful)throw new cx("Cannot call resetStates() on an RNN Layer that is not stateful.");let n=this.inputSpec[0].shape[0];if(null==n)throw new ck("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>hg([n,e])):this.states_=[hg([n,this.cell.stateSize])];else if(null==e)iv(this.states_),null!=this.keptStates&&(iv(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>hg([n,e])):this.states_[0]=hg([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new ck(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):iv(this.states_);for(let t=0;t<this.states_.length;++t){let r=e[t],a=[n,Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize];if(!rg.arraysEqual(r.shape,a))throw new ck(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map(e=>ik(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});let a=gW(e,n,r,this.numConstants);e=a.inputs,n=a.initialState,r=a.constants;let s=[],i=[];if(null!=n){for(let e of(t.initialState=n,s=s.concat(n),this.stateSpec=[],n))this.stateSpec.push(new fG({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(t.constants=r,s=s.concat(r),this.numConstants=r.length),!(s[0]instanceof fH))return super.apply(e,t);{let n=[e].concat(s),r=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=r;let o=super.apply(n,t);return this.inputSpec=a,o}}call(e,t){return ix(()=>{let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;e=fL(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));let s=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==s)throw new ck(`RNN Layer has ${s} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let i={training:r},o=gU((e,t)=>{let n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,a,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],h=o[2];this.stateful&&this.resetStates(h,r);let p=this.returnSequences?u:l;return this.returnState?[p].concat(h):p})}getInitialState(e){return ix(()=>{let t=hg(e.shape);return(t=ft(t=iX(t,[1,2])),Array.isArray(this.cell.stateSize))?this.cell.stateSize.map(e=>e>1?fo(t,[1,e]):t):this.cell.stateSize>1?[fo(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){let e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);let n=this.cell.getConfig();return this.getClassName()===gV.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){let r=mp(t.cell,n);return new e(Object.assign(t,{cell:r}))}}gV.className="RNN",d0.registerClass(gV);class gG extends fX{}class gH extends gG{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,cP(this.units,"units"),this.activation=gp(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=f_(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=f_(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=f_(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=gg(e.kernelRegularizer),this.recurrentRegularizer=gg(e.recurrentRegularizer),this.biasRegularizer=gg(e.biasRegularizer),this.kernelConstraint=me(e.kernelConstraint),this.recurrentConstraint=me(e.recurrentConstraint),this.biasConstraint=me(e.biasConstraint),this.dropout=c5([1,c8([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=c5([1,c8([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=fz(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ix(()=>{let n;if(2!==e.length)throw new ck(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];let a=null!=t.training&&t.training;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gJ({ones:()=>hC(e),rate:this.dropout,training:a,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gJ({ones:()=>hC(r),rate:this.recurrentDropout,training:a,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,i=this.recurrentDropoutMask;n=null!=s?fu(iV(e,s),this.kernel.read()):fu(e,this.kernel.read()),null!=this.bias&&(n=fd(n,this.bias.read())),null!=i&&(r=iV(r,i));let o=s4(n,fu(r,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){return Object.assign({},super.getConfig(),{units:this.units,activation:gu(this.activation),useBias:this.useBias,kernelInitializer:cD(this.kernelInitializer),recurrentInitializer:cD(this.recurrentInitializer),biasInitializer:cD(this.biasInitializer),kernelRegularizer:cD(this.kernelRegularizer),recurrentRegularizer:cD(this.recurrentRegularizer),biasRegularizer:cD(this.biasRegularizer),activityRegularizer:cD(this.activityRegularizer),kernelConstraint:cD(this.kernelConstraint),recurrentConstraint:cD(this.recurrentConstraint),biasConstraint:cD(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout})}}gH.className="SimpleRNNCell",d0.registerClass(gH);class gq extends gV{constructor(e){e.cell=new gH(e),super(e)}call(e,t){return ix(()=>{null!=this.cell.dropoutMask&&(iv(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(iv(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})})}static fromConfig(e,t){return new e(t)}}gq.className="SimpleRNN",d0.registerClass(gq);class gj extends gG{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new ck("GRUCell does not support reset_after parameter set to true.");this.units=e.units,cP(this.units,"units"),this.activation=gp(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=gp(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=f_(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=f_(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=f_(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=gg(e.kernelRegularizer),this.recurrentRegularizer=gg(e.recurrentRegularizer),this.biasRegularizer=gg(e.biasRegularizer),this.kernelConstraint=me(e.kernelConstraint),this.recurrentConstraint=me(e.recurrentConstraint),this.biasConstraint=me(e.biasConstraint),this.dropout=c5([1,c8([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=c5([1,c8([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){let t=(e=fz(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ix(()=>{let n,r;if(2!==e.length)throw new ck(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);let a=null!=t.training&&t.training,s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gJ({ones:()=>hC(e),rate:this.dropout,training:a,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gJ({ones:()=>hC(s),rate:this.recurrentDropout,training:a,count:3,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,o=this.recurrentDropoutMask;0<this.dropout&&this.dropout<1&&(e=iV(e,i[0]));let l=fu(e,this.kernel.read());this.useBias&&(l=fd(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=iV(s,o[0]));let u=this.recurrentKernel.read(),[h,p]=pr(u,[2*this.units,this.units],u.rank-1),d=fu(s,h),[c,f,m]=pr(l,3,l.rank-1),[g,y]=pr(d,2,d.rank-1);n=this.recurrentActivation.apply(s4(c,g));let b=fu(iV(this.recurrentActivation.apply(s4(f,y)),s),p);r=this.activation.apply(s4(m,b));let x=s4(iV(n,s),iV(s4(1,u7(n)),r));return[x,x]})}getConfig(){return Object.assign({},super.getConfig(),{units:this.units,activation:gu(this.activation),recurrentActivation:gu(this.recurrentActivation),useBias:this.useBias,kernelInitializer:cD(this.kernelInitializer),recurrentInitializer:cD(this.recurrentInitializer),biasInitializer:cD(this.biasInitializer),kernelRegularizer:cD(this.kernelRegularizer),recurrentRegularizer:cD(this.recurrentRegularizer),biasRegularizer:cD(this.biasRegularizer),activityRegularizer:cD(this.activityRegularizer),kernelConstraint:cD(this.kernelConstraint),recurrentConstraint:cD(this.recurrentConstraint),biasConstraint:cD(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1})}}gj.className="GRUCell",d0.registerClass(gj);class gK extends gV{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new gj(e),super(e)}call(e,t){return ix(()=>{null!=this.cell.dropoutMask&&(iv(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(iv(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}gK.className="GRU",d0.registerClass(gK);class gX extends gG{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,cP(this.units,"units"),this.activation=gp(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=gp(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=f_(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=f_(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=f_(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=gg(e.kernelRegularizer),this.recurrentRegularizer=gg(e.recurrentRegularizer),this.biasRegularizer=gg(e.biasRegularizer),this.kernelConstraint=me(e.kernelConstraint),this.recurrentConstraint=me(e.recurrentConstraint),this.biasConstraint=me(e.biasConstraint),this.dropout=c5([1,c8([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=c5([1,c8([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let n,r=(e=fz(e))[e.length-1];if(this.kernel=this.addWeight("kernel",[r,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){let e=this.biasInitializer,r=this.units;n=new((t=class extends fg{apply(t,n){let a=e.apply([r]),s=new fb().apply([r]),i=e.apply([2*r]);return fi(fi(a,s),i)}}).className="CustomInit",t)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return ix(()=>{let n,r,a=null!=t.training&&t.training;if(3!==e.length)throw new ck(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1],i=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gJ({ones:()=>hC(e),rate:this.dropout,training:a,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gJ({ones:()=>hC(s),rate:this.recurrentDropout,training:a,count:4,dropoutFunc:this.dropoutFunc}));let o=this.dropoutMask,l=this.recurrentDropoutMask;0<this.dropout&&this.dropout<1&&(e=iV(e,o[0]));let u=fu(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=iV(s,l[0])),u=s4(u,fu(s,this.recurrentKernel.read())),this.useBias&&(u=fd(u,this.bias.read()));let[h,p,d,c]=pr(u,4,u.rank-1);n=this.recurrentActivation.apply(h),r=s4(iV(this.recurrentActivation.apply(p),i),iV(n,this.activation.apply(d)));let f=iV(this.recurrentActivation.apply(c),this.activation.apply(r));return[f,f,r]})}getConfig(){return Object.assign({},super.getConfig(),{units:this.units,activation:gu(this.activation),recurrentActivation:gu(this.recurrentActivation),useBias:this.useBias,kernelInitializer:cD(this.kernelInitializer),recurrentInitializer:cD(this.recurrentInitializer),biasInitializer:cD(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:cD(this.kernelRegularizer),recurrentRegularizer:cD(this.recurrentRegularizer),biasRegularizer:cD(this.biasRegularizer),activityRegularizer:cD(this.activityRegularizer),kernelConstraint:cD(this.kernelConstraint),recurrentConstraint:cD(this.recurrentConstraint),biasConstraint:cD(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation})}}gX.className="LSTMCell",d0.registerClass(gX);class gY extends gV{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new gX(e),super(e)}call(e,t){return ix(()=>{null!=this.cell.dropoutMask&&(iv(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(iv(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}gY.className="LSTM",d0.registerClass(gY);class gZ extends gG{constructor(e){super(e),this.cells=e.cells}get stateSize(){let e=[];for(let t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return ix(()=>{let n,r=e.slice(1),a=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?a.push(r.splice(0,e.stateSize.length)):a.push(r.splice(0,1));a.reverse();let s=[];for(let i=0;i<this.cells.length;++i){let o=this.cells[i];r=a[i],n=0===i?[e[0]].concat(r):[n[0]].concat(r),n=o.call(n,t),s.push(n.slice(1))}for(let e of(r=[],s.slice().reverse()))r.push(...e);return[n[0]].concat(r)})}build(e){let t;fO(e)&&(e=e[0]),this.cells.forEach((n,r)=>{c0(`RNNCell_${r}`,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){let e=super.getConfig();return Object.assign({},e,{cells:this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}))})}static fromConfig(e,t,n={}){let r=[];for(let e of t.cells)r.push(mp(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];let e=[];for(let t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){let e=[];for(let t of this.cells)e.push(...t.weights);return fU(e)}setWeights(e){let t=[];for(let n of this.cells){let r=n.weights.length,a=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}fV(t)}}function gJ(e){let{ones:t,rate:n,training:r=!1,count:a=1,dropoutFunc:s}=e,i=()=>{var e;return null!=s?s(t(),n):(e=t(),ix(()=>l3(e,n,void 0,void 0)))},o=()=>fc(i,t,r);return!a||a<=1?ik(o().clone()):Array(a).fill(void 0).map(o).map(e=>ik(e.clone()))}gZ.className="StackedRNNCells",d0.registerClass(gZ);var gQ=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&0>t.indexOf(r)&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var a=0,r=Object.getOwnPropertySymbols(e);a<r.length;a++)0>t.indexOf(r[a])&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]]);return n};class g0 extends gV{constructor(e){if(e.unroll)throw new cw("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new cw("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new fG({ndim:5})]}call(e,t){return ix(()=>{if(null!=this.cell.dropoutMask&&(iv(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(iv(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new ck("ConvRNN2D cell does not support constants");let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...[,,].fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return ix(()=>{let{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),a=hg([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(a):[a]})}resetStates(e,t=!1){ix(()=>{if(!this.stateful)throw new cx("Cannot call resetStates() on an RNN Layer that is not stateful.");let n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),a=[r[0],...r.slice(2)];if(null==n[0])throw new ck("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>hg(a)):this.states_=[hg(a)];else if(null==e)iv(this.states_),null!=this.keptStates&&(iv(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>hg(a)):this.states_[0]=hg(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new ck(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):iv(this.states_);for(let t=0;t<this.states_.length;++t){let n=e[t];if(!rg.arraysEqual(n.shape,a))throw new ck(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>ik(e.clone()))})}computeSingleOutputShape(e){let{dataFormat:t,filters:n,kernelSize:r,padding:a,strides:s,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],h=gS(l,r[0],a,s[0],i[0]),p=gS(u,r[1],a,s[1],i[1]);return[...e.slice(0,2),...o?[n,h,p]:[h,p,n]]}}g0.className="ConvRNN2D";class g1 extends gX{constructor(e){let{filters:t,kernelSize:n,strides:r,padding:a,dataFormat:s,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,cP(this.filters,"filters"),this.kernelSize=gI(n,2,"kernelSize"),this.kernelSize.forEach(e=>cP(e,"kernelSize")),this.strides=gI(r||1,2,"strides"),this.strides.forEach(e=>cP(e,"strides")),this.padding=a||"valid",cZ(this.padding),this.dataFormat=s||"channelsLast",cY(this.dataFormat),this.dilationRate=gI(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>cP(e,"dilationRate"))}build(e){var t;e=fz(e);let n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new ck(`The channel dimension of the input should be defined. Found ${e[n]}`);let r=e[n],a=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let s=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",s,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){let n=this.biasInitializer,r=this.filters;e=new((t=class extends fg{apply(e,t){let a=n.apply([r]);return fs([a,hy([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return ix(()=>{if(3!==e.length)throw new ck(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let n=t.training||!1,r=e[0],a=e[1],s=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gJ({ones:()=>hC(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?iV(t[n],e):e,l=o(r,i,0),u=o(r,i,1),h=o(r,i,2),p=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gJ({ones:()=>hC(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));let d=this.recurrentDropoutMask,c=o(a,d,0),f=o(a,d,1),m=o(a,d,2),g=o(a,d,3),[y,b,x,v]=pr(this.kernel.read(),4,3),[k,w,I,S]=this.useBias?pr(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,w,this.padding),h=this.inputConv(h,x,I,this.padding),p=this.inputConv(p,v,S,this.padding);let[N,T,C,$]=pr(this.recurrentKernel.read(),4,3);c=this.recurrentConv(c,N),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$);let E=this.recurrentActivation.apply(s4(l,c)),A=this.recurrentActivation.apply(s4(u,f)),R=s4(iV(A,s),iV(E,this.activation.apply(s4(h,m)))),F=iV(this.recurrentActivation.apply(s4(p,g)),this.activation.apply(R));return[F,F,R]})}getConfig(){let e=super.getConfig(),{units:t}=e;return Object.assign({},gQ(e,["units"]),{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}inputConv(e,t,n,r){let a=lD(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?fd(a,n,this.dataFormat):a}recurrentConv(e,t){return lD(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}g1.className="ConvLSTM2DCell",d0.registerClass(g1);class g2 extends g0{constructor(e){super(Object.assign({},e,{cell:new g1(e)}))}static fromConfig(e,t){return new e(t)}}g2.className="ConvLSTM2D",d0.registerClass(g2);class g3 extends fX{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;let t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return ix(()=>{this.invokeCallHook(e,t);let n=fL(e);if(0<this.rate&&this.rate<1){let e=null!=t.training&&t.training,r=this.getNoiseShape(n);return fc(()=>{var e,t;return e=this.rate,t=this.seed,ix(()=>l3(n,e,r,t))},()=>n,e)}return e})}getConfig(){let e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed};return Object.assign(e,super.getConfig()),e}dispose(){return super.dispose()}}g3.className="Dropout",d0.registerClass(g3);class g4 extends g3{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){let t=e.shape;return[t[0],1,t[2]]}}g4.className="SpatialDropout1D",d0.registerClass(g4);class g6 extends fX{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,cP(this.units,"units"),this.activation=gp(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=f_(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=f_(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=me(e.kernelConstraint),this.biasConstraint=me(e.biasConstraint),this.kernelRegularizer=gg(e.kernelRegularizer),this.biasRegularizer=gg(e.biasRegularizer),this.activityRegularizer=gg(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){let t=(e=fz(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){let t=(e=fz(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return ix(()=>{let n;this.invokeCallHook(e,t);let r=fL(e),a=cB(this.activation.getClassName());return null!=a?n=fu(r,this.kernel.read(),a,this.bias?this.bias.read():null):(n=fu(r,this.kernel.read()),null!=this.bias&&(n=fd(n,this.bias.read())),null!=this.activation&&(n=this.activation.apply(n))),n})}getConfig(){let e={units:this.units,activation:gu(this.activation),useBias:this.useBias,kernelInitializer:cD(this.kernelInitializer),biasInitializer:cD(this.biasInitializer),kernelRegularizer:cD(this.kernelRegularizer),biasRegularizer:cD(this.biasRegularizer),activityRegularizer:cD(this.activityRegularizer),kernelConstraint:cD(this.kernelConstraint),biasConstraint:cD(this.biasConstraint)};return Object.assign(e,super.getConfig()),e}}g6.className="Dense",d0.registerClass(g6);class g5 extends fX{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){for(let t of(e=fz(e)).slice(1))if(null==t)throw new ck(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],c6(e,1)]}call(e,t){return ix(()=>{this.invokeCallHook(e,t);let n=fL(e);if("channelsFirst"===this.dataFormat&&n.rank>1){let e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=pC(n,e)}var r=n;if(r.rank<=1)throw new ck(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);let a=[r.shape[0],c6(r.shape,1)];return im(r,a)})}getConfig(){let e={};return null!=this.dataFormat&&(e.dataFormat=this.dataFormat),Object.assign(e,super.getConfig()),e}}g5.className="Flatten",d0.registerClass(g5);class g8 extends fX{constructor(e){super(e),this.supportsMasking=!0,this.activation=gp(e.activation)}call(e,t){return ix(()=>{this.invokeCallHook(e,t);let n=fL(e);return this.activation.apply(n)})}getConfig(){let e={activation:gu(this.activation)};return Object.assign(e,super.getConfig()),e}}g8.className="Activation",d0.registerClass(g8);class g7 extends fX{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return ix(()=>{var t,n;return t=e=fL(e),n=this.n,ix(()=>{if(2!==t.shape.length)throw new ck(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return fo(ft(t,1),[1,n,1])})})}getConfig(){let e={n:this.n};return Object.assign(e,super.getConfig()),e}}g7.className="RepeatVector",d0.registerClass(g7);class g9 extends fX{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){let n="Total size of new array must be unchanged.",r=t.slice(),a=1,s=null;for(let e=0;e<r.length;++e){let t=r[e];if(this.isUnknown(t))if(null===s)s=e;else throw new ck("Can only specifiy one unknown dimension.");else a*=t}let i=c6(e);if(null!==s){if(0===a||i%a!=0)throw new ck(n);r[s]=i/a}else if(i!==a)throw new ck(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return ix(()=>{this.invokeCallHook(e,t);let n=fL(e),r=n.shape;return im(n,r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape)))})}getConfig(){let e={targetShape:this.targetShape};return Object.assign(e,super.getConfig()),e}}g9.className="Reshape",d0.registerClass(g9);class ye extends fX{constructor(e){if(super(e),null==e.dims)throw Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);let t=c7(1,e.dims.length+1);if(!rg.arraysEqual(e.dims.slice().sort(),t))throw Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new fG({ndim:this.dims.length+1})]}computeOutputShape(e){let t=(e=fz(e)).slice();return this.dims.forEach((n,r)=>{t[r+1]=e[n]}),t}call(e,t){return pC(fL(e),this.dimsIncludingBatch)}getConfig(){let e={dims:this.dims};return Object.assign(e,super.getConfig()),e}}ye.className="Permute",d0.registerClass(ye);class yt extends fX{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e?this.maskValue=null==e.maskValue?0:e.maskValue:this.maskValue=0}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){return s5(hN(fL(e),this.maskValue),-1)}call(e,t){return ix(()=>{this.invokeCallHook(e,t);let n=fL(e),r=s5(hN(n,this.maskValue),-1,!0);return iV(n,s0(r,n.dtype))})}}yt.className="Masking",d0.registerClass(yt);class yn extends fX{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(cE(e.inputLength))}this.inputDim=e.inputDim,cP(this.inputDim,"inputDim"),this.outputDim=e.outputDim,cP(this.outputDim,"outputDim"),this.embeddingsInitializer=f_(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=gg(e.embeddingsRegularizer),this.activityRegularizer=gg(e.activityRegularizer),this.embeddingsConstraint=me(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return ix(()=>this.maskZero?hN(e=fL(e),uL(e)):null)}computeOutputShape(e){if(e=fz(e),null==this.inputLength)return[...e,this.outputDim];let t=cE(this.inputLength);if(t.length!==e.length-1)throw new ck(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){let a=t[r],s=e[r+1];if(null!=a&&null!=s&&a!==s)throw new ck(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=s),n++}}return[e[0],...t,this.outputDim]}call(e,t){return ix(()=>{this.invokeCallHook(e,t);let n=fL(e);"int32"!==n.dtype&&(n=s0(n,"int32"));let r=fh(this.embeddings.read(),im(n,[n.size]));return im(r,fz(this.computeOutputShape(n.shape)))})}getConfig(){let e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:cD(this.embeddingsInitializer),embeddingsRegularizer:cD(this.embeddingsRegularizer),activityRegularizer:cD(this.activityRegularizer),embeddingsConstraint:cD(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength};return Object.assign(e,super.getConfig()),e}}yn.className="Embedding",d0.registerClass(yn);class yr extends fX{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new cw}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;let n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){let a=e[e.length-t.length+r],s=t[r];if(null==a||null==s||a<0||s<0)n.push(null);else if(1===a)n.push(s);else if(1===s)n.push(a);else{if(a!==s)throw new ck("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[fz(e)]),e.length<2)throw new ck(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(let n of e)null!=n&&null!==n[0]&&t.push(n[0]);if((t=cM(t)).length>1)throw new ck(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){let r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}let r=e.map(e=>e.length);-1===e.indexOf(null)&&1===cM(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return ix(()=>{if(!this.reshapeRequired)return this.mergeFunction(e);{let t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){let r=c8(n);for(let n of e){let e=n.rank;for(let t=0;t<r-e;++t)n=ft(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(let r of e){let e=r.rank;if(null==e){let e=r.shape,a=e[0],s=e.slice(1).concat([a]),i=im(r,[a].concat(c6(e.slice(1))));i=im(i=pC(i,[1,0]),s),t.push(i),n=!0}else if(e>1){let a=c7(1,e).concat([0]);t.push(pC(r,a)),n=!0}else t.push(r)}let r=this.mergeFunction(t),a=r.rank;if(n)if(null==a){let e=r.shape,t=e.length,n=e[t-1],a=[n].concat(e.slice(0,e.length-1));r=im(pC(im(r,[-1,n]),[1,0]),a)}else a>1&&(r=pC(r,[a-1].concat(c7(0,a-1))));return r}}})}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){let r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(let t of e)null!=t&&null!==t[0]&&n.push(t[0]);return 1===(n=cM(n)).length?n.concat(t):[null].concat(t)}computeMask(e,t){return ix(()=>{if(null==t)return null;if(!Array.isArray(t))throw new ck("`mask` should be an Array");if(!Array.isArray(e))throw new ck("`inputs` should be an Array");if(t.length!==e.length)throw new ck(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:l5(e,0)))[0];for(let e=1;e<t.length-1;++e)n=ha(n,t[e]);return n})}}class ya extends yr{constructor(e){super(e)}mergeFunction(e){return ix(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=s4(t,e[n]);return t})}}ya.className="Add",d0.registerClass(ya);class ys extends yr{constructor(e){super(e)}mergeFunction(e){return ix(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=iV(t,e[n]);return t})}}ys.className="Multiply",d0.registerClass(ys);class yi extends yr{constructor(e){super(e)}mergeFunction(e){return ix(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=s4(t,e[n]);return iV(1/e.length,t)})}}yi.className="Average",d0.registerClass(yi);class yo extends yr{constructor(e){super(e)}mergeFunction(e){return ix(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=hf(t,e[n]);return t})}}yo.className="Maximum",d0.registerClass(yo);class yl extends yr{constructor(e){super(e)}mergeFunction(e){return ix(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=hx(t,e[n]);return t})}}yl.className="Minimum",d0.registerClass(yl);class yu extends yr{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!(Array.isArray(e)&&Array.isArray(e[0]))||1===e.length)throw new ck("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(let n of e)if(null!=n){t=!1;break}if(t)return;let n=[];for(let t=0;t<e.length;++t){let r=e[t].slice();r.splice(this.axis,1);let a=!1;for(let e of n)if(rg.arraysEqual(e,r)){a=!0;break}a||n.push(r)}if(n.length>1)throw new ck("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return ix(()=>fs(e,this.axis))}computeOutputShape(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))throw new ck("A `Concatenate` layer should be called on a list of inputs.");let t=e[0].slice(),n=this.axis<0?t.length+this.axis:this.axis;for(let r of e.slice(1)){if(null==t[n]||null==r[n]){t[n]=null;break}t[n]+=r[n]}return t}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new ck("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new ck("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new ck(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return ix(()=>{let n=!0;if(t.forEach(e=>{if(null!=e){n=!1;return}}),n)return null;let r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(s0(hC(e[n]),"bool")):t[n].rank<e[n].rank?r.push(l5(t[n],-1)):r.push(t[n]);return s6(l$(r,this.axis),-1,!1)})}getConfig(){let e={axis:this.axis};return Object.assign(e,super.getConfig()),e}}function yh(e,t){for(;e<0;)e+=t;return e}yu.className="Concatenate",d0.registerClass(yu);class yp extends yr{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){rg.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0],n=e[1];if(t.length>3||n.length>3)throw new cw("Dot layer does not support tensors of 4D or higher rank yet.");let r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new ck(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){let t;if(2!==e.length)throw new ck(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let n=e[0],r=e[1];t=Array.isArray(this.axes)?this.axes.map((t,n)=>yh(t,e[n].shape.length)):[yh(this.axes,n.shape.length),yh(this.axes,r.shape.length)],this.normalize&&(n=md(n,t[0]),r=md(r,t[1]));var a=n,s=r,i=t;if(a.shape.length>3||s.shape.length>3)throw new cw("batchDot is not implemented for tensors of 4D or higher rank yet");if(rg.assert(a.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${a.shape.length}`),rg.assert(a.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${s.shape.length}`),"number"==typeof i&&(i=[i,i]),"complex64"===a.dtype||"complex64"===s.dtype)throw new cw("batchDot is not implemented for complex64-type Tensors yet.");let o=a.shape.length,l=s.shape.length;null==i&&(i=[o-1,l-2]);let u=i;return ix(()=>{let e,t;if(o>l){e=o-l;let t=[];for(let n=0;n<e;++n)t.push(1);s=im(s,s.shape.concat(t))}else if(l>o){e=l-o;let t=[];for(let n=0;n<e;++n)t.push(1);a=im(a,a.shape.concat(t))}else e=0;if(2===a.shape.length&&2===s.shape.length)t=u[0]===u[1]?iX(iV(a,s),u[0]):iX(iV(pC(a,[1,0]),s),u[1]);else{let e=u[0]!==a.shape.length-1,n=u[1]===s.shape.length-1;t=ui(a,s,e,n)}if(e>0){let n;n=o>l?o+l-3:o-1;let r=[];for(let t=n;t<n+e;++t)r.push(t);t=pi(t,r)}return 1===t.shape.length&&(t=l5(t,1)),t})}interpretAxes(e,t){let n;return Array.isArray(this.axes)?this.axes:[yh(this.axes,e.length),yh(this.axes,t.length)]}computeOutputShape(e){rg.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new cw("Dot layer does not support tensors of 4D or higher rank yet.");let r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);let a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){let e={axes:this.axes,normalize:this.normalize};return Object.assign(e,super.getConfig()),e}}yp.className="Dot",d0.registerClass(yp);class yd extends fX{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return ix(()=>{this.invokeCallHook(e,t);let n=fL(e);return fc(()=>s4(fl(n.shape,0,this.stddev),n),()=>n,t.training||!1)})}}yd.className="GaussianNoise",d0.registerClass(yd);class yc extends fX{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ix(()=>{this.invokeCallHook(e,t);let n=fL(e);return this.rate>0&&this.rate<1?fc(()=>{let e=Math.sqrt(this.rate/(1-this.rate));return iV(n,fl(n.shape,1,e))},()=>n,t.training||!1):n})}}yc.className="GaussianDropout",d0.registerClass(yc);class yf extends fX{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||fL(e).shape}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ix(()=>{if(this.rate<1&&this.rate>0){let n=this._getNoiseShape(e);return fc(()=>{let t=fL(e),r=uh(l2(n),this.rate);r=s0(r,"float32");let a=((1-this.rate)*(1+3.09091329228798*this.rate))**-.5,s=-(-1.7580993408473766*a)*this.rate,i=s4(iV(t,r),iV(s4(r,-1),-1.7580993408473766));return s4(iV(i,a),s)},()=>fL(e),t.training||!1)}return e})}}function ym(e,t,n,r,a,s=.001){let i;if(2===e.rank)i=lg(e,t,n,r,a,s);else if(3===e.rank)i=ly(e,t,n,r,a,s);else if(4===e.rank)i=lb(e,t,n,r,a,s);else throw new cw(`batchNormalization is not implemented for array of rank ${e.rank} yet`);return i}yf.className="AlphaDropout",d0.registerClass(yf);class yg extends fX{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=f_(e.betaInitializer||"zeros"),this.gammaInitializer=f_(e.gammaInitializer||"ones"),this.movingMeanInitializer=f_(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=f_(e.movingVarianceInitializer||"ones"),this.betaConstraint=me(e.betaConstraint),this.gammaConstraint=me(e.gammaConstraint),this.betaRegularizer=gg(e.betaRegularizer),this.gammaRegularizer=gg(e.gammaRegularizer)}build(e){e=fz(e);let t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new ck(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new fG({ndim:e.length,axes:{[t]:n}})];let r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return ix(()=>{let n=null!=t.training&&t.training,r=fL(e),a=r.shape,s=a.length,i=c7(0,s),o=this.axis>=0?this.axis:this.axis+s;i.splice(o,1);let l=cN(1,s);l[o]=a[o];let u=i.slice();u.sort();let h=!rg.arraysEqual(u,c7(0,s).slice(0,s-1));if(!n){if(!h)return ym(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon);{let e=im(this.movingMean.read(),l),t=im(this.movingVariance.read(),l);return ym(r,e,t,this.center?im(this.beta.read(),l):null,this.scale?im(this.gamma.read(),l):null,this.epsilon)}}let[p,d,c]=function(e,t,n,r,a=.001){return rg.arraysEqual(r.slice().sort(),c7(0,e.rank-1))?function(e,t,n,r,a=.001){return ix(()=>{let s=hw(e,r),i=s.mean,o=s.variance;return[ym(e,i,o,n,t,a),i,o]})}(e,t,n,r,a):function(e,t,n,r,a=.001){return ix(()=>{let s=hw(e,r),i=s.mean,o=s.variance,l=[];for(let t of c7(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);let u=im(i,l),h=im(o,l),p=null==t?null:im(t,l);return[ym(e,u,h,null==n?null:im(n,l),p,a),i,o]})}(e,t,n,r,a)}(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{ix(()=>{let r=e.read(),a=iV(ht(r,t),1-n);e.write(ht(r,a))})};return f(this.movingMean,d,this.momentum),f(this.movingVariance,c,this.momentum),p})}getConfig(){let e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:cD(this.betaInitializer),gammaInitializer:cD(this.gammaInitializer),movingMeanInitializer:cD(this.movingMeanInitializer),movingVarianceInitializer:cD(this.movingVarianceInitializer),betaRegularizer:cD(this.betaRegularizer),gammaRegularizer:cD(this.gammaRegularizer),betaConstraint:cD(this.betaConstraint),gammaConstraint:cD(this.gammaConstraint)};return Object.assign(e,super.getConfig()),e}}yg.className="BatchNormalization",d0.registerClass(yg);class yy extends fX{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=f_(e.betaInitializer||"zeros"),this.gammaInitializer=f_(e.gammaInitializer||"ones"),this.betaRegularizer=gg(e.betaRegularizer),this.gammaRegularizer=gg(e.gammaRegularizer),this.supportsMasking=!0}build(e){let t=(e=fz(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(let e of this.axis)if(e<0||e>=t)throw Error(`Invalid axis: ${e}`);if(this.axis.length!==cM(this.axis).length)throw Error(`Found duplicate axes in: ${this.axis}`);let n=this.axis.map(t=>e[t]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){let n=fL(e),r=n.shape,a=r.length;return ix(()=>{let{mean:e,variance:t}=hw(n,this.axis,!0),s=cN(1,a);for(let e of this.axis)s[e]=r[e];let i=e=>null!=e&&e.shape.length!==a?im(e,s):e,o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null,u=[],h=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(u.push(r[e]),h.push(1)):(u.push(1),h.push(r[e]));return e=l8(e,u),t=l8(t,u),null!=o&&(o=l8(o,h)),null!=l&&(l=l8(l,h)),ym(n,e,t,l,o,this.epsilon)})}getConfig(){let e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:cD(this.betaInitializer),gammaInitializer:cD(this.gammaInitializer),betaRegularizer:cD(this.betaRegularizer),gammaRegularizer:cD(this.gammaRegularizer)};return Object.assign(e,super.getConfig()),e}}yy.className="LayerNormalization",d0.registerClass(yy);class yb extends fX{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?fe():e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{let t,n;if(e.padding=e.padding,2!==e.padding.length)throw new ck(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new ck(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new ck(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new fG({ndim:4})]}computeOutputShape(e){let t,n;return(e=fz(e),"channelsFirst"===this.dataFormat)?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return ix(()=>{var t,n,r;return t=fL(e),n=this.padding,r=this.dataFormat,ix(()=>{let e;if(4!==t.rank)throw new ck(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new ck("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r=fe()),"channelsLast"!==r&&"channelsFirst"!==r)throw new ck(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);return hE(t,"channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]])})})}getConfig(){let e={padding:this.padding,dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}function yx(e,t,n,r,a,s){return ix(()=>{let i;cY(a),cJ(s),cZ(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==a&&(a=fe()),null==s&&(s="max"),e=gT(e,a);let o="same"===r?"same":"valid";return i="max"===s?hp(e,t,n,o):ig(e,t,n,o),"channelsFirst"===a&&(i=pC(i,[0,3,1,2])),i})}function yv(e,t,n,r,a,s){return ix(()=>{let i;cY(a),cJ(s),cZ(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==a&&(a=fe()),null==s&&(s="max"),e=gC(e,a);let o="same"===r?"same":"valid";return i="max"===s?hd(e,t,n,o):iy(e,t,n,o),"channelsFirst"===a&&(i=pC(i,[0,4,1,2,3])),i})}yb.className="ZeroPadding2D",d0.registerClass(yb);class yk extends fX{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else if(Array.isArray(e.poolSize)&&1===e.poolSize.length&&"number"==typeof e.poolSize[0])this.poolSize=e.poolSize;else throw new ck(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);if(cP(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else if(Array.isArray(e.strides)&&1===e.strides.length&&"number"==typeof e.strides[0])this.strides=e.strides;else throw new ck(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);cP(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,cZ(this.padding),this.inputSpec=[new fG({ndim:3})]}computeOutputShape(e){let t=gS((e=fz(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return ix(()=>(this.invokeCallHook(e,t),e=ft(fL(e),2),pi(this.poolingFunction(fL(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast"),[2])))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides};return Object.assign(e,super.getConfig()),e}}class yw extends yk{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return cY(a),cZ(r),yx(e,t,n,r,a,"max")}}yw.className="MaxPooling1D",d0.registerClass(yw);class yI extends yk{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return cY(a),cZ(r),yx(e,t,n,r,a,"avg")}}yI.className="AveragePooling1D",d0.registerClass(yI);class yS extends fX{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new ck(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];cP(this.poolSize,"poolSize"),cP(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cY(this.dataFormat),cZ(this.padding),this.inputSpec=[new fG({ndim:4})]}computeOutputShape(e){e=fz(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return(t=gS(t,this.poolSize[0],this.padding,this.strides[0]),n=gS(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat)?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return ix(()=>(this.invokeCallHook(e,t),this.poolingFunction(fL(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}class yN extends yS{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return cY(a),cZ(r),yx(e,t,n,r,a,"max")}}yN.className="MaxPooling2D",d0.registerClass(yN);class yT extends yS{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return cY(a),cZ(r),yx(e,t,n,r,a,"avg")}}yT.className="AveragePooling2D",d0.registerClass(yT);class yC extends fX{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new ck(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];cP(this.poolSize,"poolSize"),cP(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cY(this.dataFormat),cZ(this.padding),this.inputSpec=[new fG({ndim:5})]}computeOutputShape(e){e=fz(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return(t=gS(t,this.poolSize[0],this.padding,this.strides[0]),n=gS(n,this.poolSize[1],this.padding,this.strides[1]),r=gS(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat)?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return ix(()=>(this.invokeCallHook(e,t),this.poolingFunction(fL(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}class y$ extends yC{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return cY(a),cZ(r),yv(e,t,n,r,a,"max")}}y$.className="MaxPooling3D",d0.registerClass(y$);class yE extends yC{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return cY(a),cZ(r),yv(e,t,n,r,a,"avg")}}yE.className="AveragePooling3D",d0.registerClass(yE);class yA extends fX{constructor(e){super(e),this.inputSpec=[new fG({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new cw}}class yR extends yA{constructor(e){super(e||{})}call(e,t){return ix(()=>hm(fL(e),1))}}yR.className="GlobalAveragePooling1D",d0.registerClass(yR);class yF extends yA{constructor(e){super(e||{})}call(e,t){return ix(()=>uV(fL(e),1))}}yF.className="GlobalMaxPooling1D",d0.registerClass(yF);class yD extends fX{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cY(this.dataFormat),this.inputSpec=[new fG({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new cw}getConfig(){let e={dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}class y_ extends yD{call(e,t){return ix(()=>{let t=fL(e);return"channelsLast"===this.dataFormat?hm(t,[1,2]):hm(t,[2,3])})}}y_.className="GlobalAveragePooling2D",d0.registerClass(y_);class yO extends yD{call(e,t){return ix(()=>{let t=fL(e);return"channelsLast"===this.dataFormat?uV(t,[1,2]):uV(t,[2,3])})}}yO.className="GlobalMaxPooling2D",d0.registerClass(yO);class yM extends fX{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){let e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}};return Object.assign(e,super.getConfig()),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){let r=mp(t.layer,n);delete t.layer;let a={layer:r};return Object.assign(a,t),new e(a)}}class yL extends yM{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=fz(e)).length<3)throw new ck(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];let t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){let t=[(e=fz(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return ix(()=>gU((e,n)=>[fL(this.layer.call(e,t)),[]],e=fL(e),[],!1,null,null,!1,!0)[1])}}yL.className="TimeDistributed",d0.registerClass(yL);class yz extends yM{constructor(e){super(e);let t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=mp(n),t.goBackwards=!0!==t.goBackwards;let r={};if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=mp(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,cL(cK,"BidirectionalMergeMode",this.mergeMode),e.weights)throw new cw("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){let t=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,t)),this.backwardLayer.setWeights(e.slice(t))}computeOutputShape(e){let t,n,r,a=this.forwardLayer.computeOutputShape(e);return(Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),this.returnState&&(r=a.slice(1)),t=a[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState)?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):c$(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});let a=gW(e,n,r,this.numConstants);if(e=a.inputs,n=a.initialState,r=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);let s=[],i=[];if(null!=n){let e=n.length;if(e%2>0)throw new ck("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,s.push(...n);let r=n.map(e=>new fG({shape:e.shape}));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new cw("Support for constants in Bidirectional layers is not implemented yet.");let o=s[0]instanceof fH;for(let e of s)if(e instanceof fH!==o)throw new ck("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(!o)return super.apply(e,t);{let n=[e].concat(s),r=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=r;let o=super.apply(n,t);return this.inputSpec=a,o}}call(e,t){return ix(()=>{let n,r,a,s,i=t.initialState;if(null==i)n=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{let a=i.slice(0,i.length/2),s=i.slice(i.length/2);n=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:s}))}return(this.returnState&&(Array.isArray(n)&&(a=n.slice(1).concat(r.slice(1))),n=n[0],r=r[0]),this.returnSequences&&(r=hq(r,1)),"concat"===this.mergeMode?s=fs([n,r]):"sum"===this.mergeMode?s=s4(n,r):"ave"===this.mergeMode?s=iV(.5,s4(n,r)):"mul"===this.mergeMode?s=iV(n,r):null==this.mergeMode&&(s=[n,r]),this.returnState)?null==this.mergeMode?s.concat(a):[s].concat(a):s})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){c0(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),c0(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,!this.returnState)return n;{let e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){let e={mergeMode:this.mergeMode};return Object.assign(e,super.getConfig()),e}static fromConfig(e,t){let n=mp(t.layer);if(delete t.layer,null!=t.numConstants)throw new cw("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");return t.layer=n,new e(t)}}yz.className="Bidirectional",d0.registerClass(yz);class yP extends fX{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){let e={scale:this.scale,offset:this.offset};return Object.assign(e,super.getConfig()),e}call(e,t){return ix(()=>("float32"!==(e=fL(e)).dtype&&(e=s0(e,"float32")),s4(iV(e,this.scale),this.offset)))}}yP.className="Rescaling",d0.registerClass(yP);class yB extends mr{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof mQ))throw Error("model must be a LayersModel, not some other Container");this.model=e}}function yW(e,t){return e<t}function yU(e,t){return e>t}eM.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(I||(I={})),function(e){var t;(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(S||(S={}));let yV={};function yG(e,t,n,r,a){let s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){let e=s.inputIndexStart,i=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return yH(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type)return t.inputNames.slice(e,i).map(e=>yH(e,n,r,a));let o=yH(t.inputNames.slice(e)[0],n,r,a),l=o.dataSync();return"number"===s.type?l[0]:rg.toNestedArray(o.shape,l)}let i=t.attrParams[e];return i&&i.value}function yH(e,t,n,r){let[a,s]=yK(e);if(null!=r){let e=r.getHashTableHandleByName(a);if(null!=e)return e}let i=n.currentContextIds.find(e=>!!t[yj(a,e)]);return void 0!==i?t[yj(a,i)][s]:void 0}function yq(e,t){let[n,r,a]=yK(e);return[yj(n,t&&t.currentContextId),r,a]}function yj(e,t){return t?`${e}-${t}`:e}function yK(e){let t=e.split(":");if(1===t.length)return[e,0,void 0];let n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function yX(e,t,n){let r=yG("pad",e,t,n);if("explicit"===r){r=yG("explicitPaddings",e,t,n);let a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function yY(e){return e.kept?e:s1(e)}var yZ={};l(yZ,"json",()=>yJ);let yJ=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var yQ={};l(yQ,"json",()=>y0);let y0=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var y1={};l(y1,"json",()=>y2);let y2=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var y3={};l(y3,"json",()=>y4);let y4=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var y6={};l(y6,"json",()=>y5);let y5=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var y8={};l(y8,"json",()=>y7);let y7=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var y9={};l(y9,"json",()=>be);let be=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var bt={};l(bt,"json",()=>bn);let bn=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var br={};l(br,"json",()=>ba);let ba=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var bs={};l(bs,"json",()=>bi);let bi=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var bo={};l(bo,"json",()=>bl);let bl=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var bu={};l(bu,"json",()=>bh);let bh=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var bp={};l(bp,"json",()=>bd);let bd=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var bc={};l(bc,"json",()=>bf);let bf=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var bm={};l(bm,"json",()=>bg);let bg=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var by={};l(by,"json",()=>bb);let bb=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var bx={};l(bx,"json",()=>bv);let bv=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var bk={};l(bk,"json",()=>bw);let bw=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var bI={};l(bI,"json",()=>bS);let bS=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class bN{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let e=[].concat(...[yZ,yQ,y1,y3,y6,y8,y9,bt,br,bs,bo,bu,bp,bc,bm,by,bx,bk,bI].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){let n=e.node,r=[],a=[],s=[],i=n.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):(null==t.input||0===t.input.length)&&s.push(e[t.name]),e),{}),o=[],l=[],u={},h={};null!=t&&(u=this.mapSignatureEntries(t.inputs),h=this.mapSignatureEntries(t.outputs));let p=Object.keys(i);p.forEach(e=>{let t=i[e];t.inputNames.forEach((e,n)=>{let[r,,a]=yq(e),s=i[r];if(null!=s.outputs){let e=s.outputs.indexOf(a);if(-1!==e){let a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)})}),0===Object.keys(h).length?p.forEach(e=>{let t=i[e];0===t.children.length&&l.push(t)}):Object.keys(h).forEach(e=>{let[t]=yq(e),n=i[t];null!=n&&(n.signatureKey=h[e],l.push(n))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{let[t]=yq(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))}):o=r;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));let c={nodes:i,inputs:o,outputs:l,weights:a,placeholders:r,signature:t,functions:d};return s.length>0&&(c.initNodes=s),c}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){let t=yV[e.op]||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});let n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{let r,a=n.type;switch(n.type){case"string":void 0===(r=bC(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":void 0===(r=bL(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bL(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":void 0===(r=bE(e.attr,n.tfName,n.defaultValue||0))&&n.tfDeprecatedName&&(r=bE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":void 0===(r=bM(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bM(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":void 0===(r=b$(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=b$(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":void 0===(r=bP(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":void 0===(r=bO(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bO(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":void 0===(r=bz(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":void 0===(r=bF(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bF(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":void 0===(r=bD(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bD(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":void 0===(r=bR(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=bR(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:a},t},{})),n}mapFunction(e){let t=e.nodeDef,n=[],r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));let a=[],s=[];e.signature.inputArg.forEach(e=>{let[t]=yq(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:bA(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n}),Object.keys(r).forEach(e=>{let t=r[e];t.inputNames.forEach((e,n)=>{let[a,,s]=yq(e),i=r[a];if(null!=i.outputs){let e=i.outputs.indexOf(s);if(-1!==e){let r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(i),i.children.push(t)})});let i=e.ret;e.signature.outputArg.forEach(e=>{let[t,n]=yq(i[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))});let o=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function bT(e,t){let n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){let t=eM.global;return void 0!==t.atob?t.atob(e):new aq(e,"base64").toString()}(e);return t?n:n.toLowerCase()}function bC(e,t,n,r=!1){let a=e[t];return null!=a?bT(a.s,r):n}function b$(e,t,n){let r=e[t];return r?r.b:n}function bE(e,t,n){let r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function bA(e){switch("string"==typeof e&&(e=I[e]),e){case I.DT_FLOAT:case I.DT_HALF:return"float32";case I.DT_INT32:case I.DT_INT64:case I.DT_INT8:case I.DT_UINT8:return"int32";case I.DT_BOOL:return"bool";case I.DT_DOUBLE:return"float32";case I.DT_STRING:return"string";default:return null}}function bR(e,t,n){let r=e[t];return r&&r.func?r.func.name:n}function bF(e,t,n){let r=e[t];return r&&r.type?bA(r.type):n}function bD(e,t,n){let r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>bA(e)):n}function b_(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function bO(e,t,n){let r=e[t];return r&&r.shape?b_(r.shape):n}function bM(e,t,n){let r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function bL(e,t,n,r=!1){let a=e[t];return a&&a.list&&a.list.s?a.list.s.map(e=>bT(e,r)):n}function bz(e,t,n){let r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>b_(e)):n}function bP(e,t,n){let r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class bB{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return yH(e,this.tensorMap,this.context)}getAttr(e,t){let n=this.node.rawAttrs[e];if(null!=n.tensor)return yH(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return bE(this.node.rawAttrs,e,t);if(null!=n.s)return bC(this.node.rawAttrs,e,t);if(null!=n.b)return b$(this.node.rawAttrs,e,t);if(null!=n.shape)return bO(this.node.rawAttrs,e,t);if(null!=n.type)return bF(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return bM(this.node.rawAttrs,e,t);if(null!=n.list.s)return bL(this.node.rawAttrs,e,t);if(null!=n.list.shape)return bz(this.node.rawAttrs,e,t);if(null!=n.list.b)return bP(this.node.rawAttrs,e,t);if(null!=n.list.type)return bD(this.node.rawAttrs,e,t)}return t}}var bW={};R(bW,up);let bU=(e,t,n,r=bW)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(yG("a",e,t,n),yG("b",e,t,n))];case"AddN":return[r.addN(yG("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(yG("a",e,t,n),yG("b",e,t,n))];case"Mul":return[r.mul(yG("a",e,t,n),yG("b",e,t,n))];case"RealDiv":case"Div":return[r.div(yG("a",e,t,n),yG("b",e,t,n))];case"DivNoNan":return[r.divNoNan(yG("a",e,t,n),yG("b",e,t,n))];case"FloorDiv":return[r.floorDiv(yG("a",e,t,n),yG("b",e,t,n))];case"Sub":return[r.sub(yG("a",e,t,n),yG("b",e,t,n))];case"Minimum":return[r.minimum(yG("a",e,t,n),yG("b",e,t,n))];case"Maximum":return[r.maximum(yG("a",e,t,n),yG("b",e,t,n))];case"Pow":return[r.pow(yG("a",e,t,n),yG("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(yG("a",e,t,n),yG("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},bV=(e,t,n,r=bW)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(yG("x",e,t,n))];case"Acos":return[r.acos(yG("x",e,t,n))];case"Acosh":return[r.acosh(yG("x",e,t,n))];case"Asin":return[r.asin(yG("x",e,t,n))];case"Asinh":return[r.asinh(yG("x",e,t,n))];case"Atan":return[r.atan(yG("x",e,t,n))];case"Atan2":return[r.atan2(yG("x",e,t,n),yG("y",e,t,n))];case"Atanh":return[r.atanh(yG("x",e,t,n))];case"Ceil":return[r.ceil(yG("x",e,t,n))];case"Complex":return[r.complex(yG("real",e,t,n),yG("imag",e,t,n))];case"Cos":return[r.cos(yG("x",e,t,n))];case"Cosh":return[r.cosh(yG("x",e,t,n))];case"Elu":return[r.elu(yG("x",e,t,n))];case"Erf":return[r.erf(yG("x",e,t,n))];case"Exp":return[r.exp(yG("x",e,t,n))];case"Expm1":return[r.expm1(yG("x",e,t,n))];case"Floor":return[r.floor(yG("x",e,t,n))];case"Log":return[r.log(yG("x",e,t,n))];case"Log1p":return[r.log1p(yG("x",e,t,n))];case"Imag":return[r.imag(yG("x",e,t,n))];case"Neg":return[r.neg(yG("x",e,t,n))];case"Reciprocal":return[r.reciprocal(yG("x",e,t,n))];case"Real":return[r.real(yG("x",e,t,n))];case"Relu":return[r.relu(yG("x",e,t,n))];case"Round":return[r.round(yG("x",e,t,n))];case"Selu":return[r.selu(yG("x",e,t,n))];case"Sigmoid":return[r.sigmoid(yG("x",e,t,n))];case"Sin":return[r.sin(yG("x",e,t,n))];case"Sign":return[r.sign(yG("x",e,t,n))];case"Sinh":return[r.sinh(yG("x",e,t,n))];case"Softplus":return[r.softplus(yG("x",e,t,n))];case"Sqrt":return[r.sqrt(yG("x",e,t,n))];case"Square":return[r.square(yG("x",e,t,n))];case"Tanh":return[r.tanh(yG("x",e,t,n))];case"Tan":return[r.tan(yG("x",e,t,n))];case"ClipByValue":return[r.clipByValue(yG("x",e,t,n),yG("clipValueMin",e,t,n),yG("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(yG("x",e,t,n))];case"Rsqrt":return[r.rsqrt(yH(e.inputNames[0],t,n))];case"Prod":return[r.prod(yG("x",e,t,n),yG("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(yG("x",e,t,n),yG("alpha",e,t,n))];case"Prelu":return[r.prelu(yG("x",e,t,n),yG("alpha",e,t,n))];case"IsNan":return[r.isNaN(yH(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function bG(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){rg.assert(e.length===t.length,()=>n+` Shapes ${e} and ${t} must match`);for(let r=0;r<e.length;r++){let a=e[r],s=t[r];rg.assert(a<0||s<0||a===s,()=>n+` Shapes ${e} and ${t} must match`)}}}function bH(e){return!("number"==typeof e||e.some(e=>e<0))}function bq(e,t,n){let r=bj(e,n),a=!bH(r);if(a&&0===t.length)throw Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(a&&t.forEach(e=>{r=bj(e.shape,r)}),!bH(r))throw Error(`Non-fully-defined elementShape: ${r}`);return r}function bj(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw Error(`Incompatible ranks during merge: ${e} vs. ${t}`);let n=[];for(let r=0;r<e.length;++r){let a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class bK{constructor(e,t,n,r,a,s,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=uq(0),ik(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);let t=this.tensors[e];if(t.cleared)throw Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);let n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=t.shape),bG(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,ik(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return aO([],[0].concat(this.elementShape));let n=this.readMany(e);return bG(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),po(n,0)}concat(e){if(e&&e!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return aO([],[0].concat(this.elementShape));let t=[];for(let e=0;e<this.size();e++)t.push(e);let n=this.readMany(t);return bG(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),l$(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);let n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,px(t,0))}split(e,t){if(t.dtype!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0,r=e.map(e=>n+=e);if(n!==t.shape[0])throw Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);let a=0===n?0:t.size/n,s=[];ix(()=>{t=im(t,[1,n,a]);for(let n=0;n<e.length;++n){let i=[0,0===n?0:r[n-1],0],o=[1,e[n],a];s[n]=im(uk(t,i,o),this.elementShape)}return s});let i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,s)}}class bX{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);bG(t,e.shape,"TensorList shape mismatch: "),ik(e)}),this.idTensor=uq(0),this.maxNumElements=r,ik(this.idTensor)}get id(){return this.idTensor.id}copy(){return new bX([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);bG(e,this.elementShape,"TensorList shape mismatch: ");let r=bq(this.elementShape,this.tensors,e);return ix(()=>po(this.tensors.map(e=>im(e,r)),0))}popBack(e,t){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw Error("Trying to pop from an empty list.");let n=bq(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,bG(r.shape,e,"TensorList shape mismatch: "),im(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(bG(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw Error("Trying to push element into a full list.");ik(e),this.tensors.push(e)}resize(e){if(e<0)throw Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);let t=new bX([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw Error(`element at index ${e} is null.`);bG(this.tensors[e].shape,t,"TensorList shape mismatch: ");let r=bq(this.elementShape,this.tensors,t);return im(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);bG(this.elementShape,t.shape,"TensorList shape mismatch: "),ik(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);bG(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());let r=bq(this.elementShape,this.tensors,n);return 0===e.length?aO([],[0].concat(r)):ix(()=>po(e.map(e=>im(this.tensors[e],r)),0))}concat(e,t){if(e&&e!==this.elementDtype)throw Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);bG(this.elementShape,t,"TensorList shape mismatch: ");let n=bq(this.elementShape,this.tensors,t);return 0===this.size()?aO([],[0].concat(n)):ix(()=>l$(this.tensors.map(e=>im(e,n)),0))}}let bY=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{let r=yG("thenBranch",e,t,n),a=yG("elseBranch",e,t,n),s=yG("cond",e,t,n),i=yG("args",e,t,n);if((await s.data())[0])return n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap);return n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{let r=yG("body",e,t,n),a=yG("cond",e,t,n),s=yG("args",e,t,n),i=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),o=s.map(e=>e.id),l=await i[0].data();i.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()});let u=s;for(;l[0];){let e=u,t=(u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap)).map(e=>e.id);e.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});let s=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await s[0].data(),s.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return u}case"LoopCond":return[yY(yG("pred",e,t,n))];case"Switch":{let r=yG("pred",e,t,n),a=yG("data",e,t,n);return a.kept||(a=yY(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{let r=e.inputNames.find(e=>void 0!==yH(e,t,n));if(r)return[yY(yH(r,t,n))];return}case"Enter":{let r=yG("frameName",e,t,n),a=yG("tensor",e,t,n);return n.enterFrame(r),[yY(a)]}case"Exit":{let r=yG("tensor",e,t,n);return n.exitFrame(),[yY(r)]}case"NextIteration":{let r=yG("tensor",e,t,n);return n.nextIteration(),[yY(r)]}case"TensorArrayV3":{let r=yG("size",e,t,n),a=yG("dtype",e,t,n),s=yG("elementShape",e,t,n),i=yG("dynamicSize",e,t,n),o=yG("clearAfterRead",e,t,n),l=yG("identicalElementShapes",e,t,n),u=new bK(yG("name",e,t,n),a,r,s,l,i,o);return n.addTensorArray(u),[u.idTensor,uq(1)]}case"TensorArrayWriteV3":{let r=yG("tensorArrayId",e,t,n),a=yG("index",e,t,n),s=yG("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(a,s),[i.idTensor]}case"TensorArrayReadV3":{let r=yG("tensorArrayId",e,t,n),a=yG("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{let r=yG("tensorArrayId",e,t,n),a=yG("indices",e,t,n),s=yG("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{let r=yG("tensorArrayId",e,t,n),a=yG("indices",e,t,n),s=yG("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(a,s),[i.idTensor]}case"TensorArrayConcatV3":{let r=yG("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=yG("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{let r=yG("tensorArrayId",e,t,n),a=yG("tensor",e,t,n),s=yG("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(s,a),[i.idTensor]}case"TensorArraySizeV3":{let r=yG("tensorArrayId",e,t,n);return[uq(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{let r=yG("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{let r=yG("tensorListId",e,t,n),a=yG("index",e,t,n),s=yG("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(a,s),[i.idTensor]}case"TensorListGetItem":{let r=yG("tensorListId",e,t,n),a=yG("index",e,t,n),s=yG("elementShape",e,t,n),i=yG("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{let r=yG("indices",e,t,n),a=yG("tensor",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw Error(`Max index must be < array size (${a}  vs. ${r})`);let s=new bX([],n,e.dtype,r),i=px(e,0);return t.forEach((e,t)=>{s.setItem(e,i[t])}),s}(a,r,yG("elementShape",e,t,n),yG("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let r,a=yG("elementShape",e,t,n),s=yG("elementDType",e,t,n),i=yG("TensorListReserve"===e.op?"numElements":"maxNumElements",e,t,n),o=new bX([],a,s,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{let r=yG("tensorListId",e,t,n),a=yG("indices",e,t,n),s=yG("elementShape",e,t,n),i=yG("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,i,s)]}case"TensorListStack":{let r=yG("tensorListId",e,t,n),a=yG("elementShape",e,t,n),s=yG("elementDType",e,t,n),i=yG("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,i)]}case"TensorListFromTensor":{let r=yG("tensor",e,t,n),a=function(e,t,n){let r=e.dtype;if(e.shape.length<1)throw Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);return bG(e.shape.slice(1),t,"TensorList shape mismatch: "),new bX(px(e),t,r)}(r,yG("elementShape",e,t,n),yG("elementDType",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let r=yG("tensorListId",e,t,n),a=n.getTensorList(r.id),s=yG("dtype",e,t,n),i=yG("elementShape",e,t,n);return[a.concat(s,i)]}case"TensorListPushBack":{let r=yG("tensorListId",e,t,n),a=yG("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{let r=yG("tensorListId",e,t,n),a=yG("elementShape",e,t,n),s=yG("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{let r=yG("tensor",e,t,n),a=yG("elementShape",e,t,n),s=function(e,t,n){let r=0,a=t.map(e=>r+=e);if(r!==e.shape[0])throw Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${r}, and tensor's shape is: ${e.shape}`);let s=bj(e.shape.slice(1),n),i=0===r?0:e.size/r,o=ix(()=>{let n=[];e=im(e,[1,r,i]);for(let r=0;r<t.length;++r){let o=[0,0===r?0:a[r-1],0],l=[1,t[r],i];n[r]=im(uk(e,o,l),s)}return e.dispose(),n}),l=new bX([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(r,yG("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}case"TensorListLength":{let r=yG("tensorListId",e,t,n);return[uq(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{let r=yG("tensorListId",e,t,n),a=yG("size",e,t,n),s=n.getTensorList(r.id).resize(a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function bZ(e,t,n){let[r,a]=yG("fusedOps",e,t,n),s="biasadd"===r,i="prelu"===a,o=yG("numArgs",e,t,n);if(s){if(i&&2!==o)throw Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==o)throw Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if("fusedbatchnorm"===r)throw Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let l=yG("strides",e,t,n),u=yX(e,t,n),h=yG("dataFormat",e,t,n).toUpperCase(),p=yG("dilations",e,t,n),[d,c]=yG("args",e,t,n);return s||(c=d,d=void 0),{stride:l,pad:u,dataFormat:h,dilations:p,biasArg:d,preluArg:c,activationFunc:a,leakyreluAlpha:yG("leakyreluAlpha",e,t,n)}}let bJ=(e,t,n,r=bW)=>{switch(e.op){case"Conv1D":{let a=yG("stride",e,t,n),s=yG("pad",e,t,n),i=yG("dataFormat",e,t,n).toUpperCase(),o=yG("dilation",e,t,n);return[r.conv1d(yG("x",e,t,n),yG("filter",e,t,n),a,s,i,o)]}case"Conv2D":{let a=yG("strides",e,t,n),s=yX(e,t,n),i=yG("dataFormat",e,t,n).toUpperCase(),o=yG("dilations",e,t,n);return[r.conv2d(yG("x",e,t,n),yG("filter",e,t,n),[a[1],a[2]],s,i,[o[1],o[2]])]}case"_FusedConv2D":{let{stride:a,pad:s,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:h,leakyreluAlpha:p}=bZ(e,t,n);return[r.fused.conv2d({x:yG("x",e,t,n),filter:yG("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:h,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:a,pad:s,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:h,leakyreluAlpha:p}=bZ(e,t,n);return[r.fused.depthwiseConv2d({x:yG("x",e,t,n),filter:yG("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:h,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let a=yG("outputShape",e,t,n),s=yG("strides",e,t,n),i=yX(e,t,n);return[r.conv2dTranspose(yG("x",e,t,n),yG("filter",e,t,n),a,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let a=yG("strides",e,t,n),s=yX(e,t,n),i=yG("dilations",e,t,n),o=yG("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(yG("input",e,t,n),yG("filter",e,t,n),[a[1],a[2]],s,o,[i[1],i[2]])]}case"Conv3D":{let a=yG("strides",e,t,n),s=yG("pad",e,t,n),i=yG("dataFormat",e,t,n).toUpperCase(),o=yG("dilations",e,t,n);return[r.conv3d(yG("x",e,t,n),yG("filter",e,t,n),[a[1],a[2],a[3]],s,i,[o[1],o[2],o[3]])]}case"AvgPool":{let a=yG("strides",e,t,n),s=yG("pad",e,t,n),i=yG("kernelSize",e,t,n);return[r.avgPool(yG("x",e,t,n),[i[1],i[2]],[a[1],a[2]],s)]}case"MaxPool":{let a=yG("strides",e,t,n),s=yG("pad",e,t,n),i=yG("kernelSize",e,t,n);return[r.maxPool(yG("x",e,t,n),[i[1],i[2]],[a[1],a[2]],s)]}case"MaxPoolWithArgmax":{let a=yG("strides",e,t,n),s=yG("pad",e,t,n),i=yG("kernelSize",e,t,n),o=yG("includeBatchInIndex",e,t,n),{result:l,indexes:u}=r.maxPoolWithArgmax(yG("x",e,t,n),[i[1],i[2]],[a[1],a[2]],s,o);return[l,u]}case"AvgPool3D":{let a=yG("strides",e,t,n),s=yG("pad",e,t,n),i=yG("kernelSize",e,t,n);return[r.avgPool3d(yG("x",e,t,n),[i[1],i[2],i[3]],[a[1],a[2],a[3]],s)]}case"MaxPool3D":{let a=yG("strides",e,t,n),s=yG("pad",e,t,n),i=yG("kernelSize",e,t,n);return[r.maxPool3d(yG("x",e,t,n),[i[1],i[2],i[3]],[a[1],a[2],a[3]],s)]}case"Dilation2D":{let a=yG("strides",e,t,n),s=yG("pad",e,t,n),i=yG("dilations",e,t,n),o=a[1],l=a[2],u=i[1],h=i[2];return[r.dilation2d(yG("x",e,t,n),yG("filter",e,t,n),[o,l],s,[u,h],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},bQ=(e,t,n,r=bW)=>{switch(e.op){case"Fill":{let a=yG("shape",e,t,n),s=yG("dtype",e,t,n),i=yG("value",e,t,n);return[r.fill(a,i,s)]}case"LinSpace":{let a=yG("start",e,t,n),s=yG("stop",e,t,n),i=yG("num",e,t,n);return[r.linspace(a,s,i)]}case"Multinomial":{let a=yG("logits",e,t,n),s=yG("numSamples",e,t,n),i=yG("seed",e,t,n);return[r.multinomial(a,s,i)]}case"OneHot":{let a=yG("indices",e,t,n),s=yG("depth",e,t,n),i=yG("onValue",e,t,n),o=yG("offValue",e,t,n),l=yG("dtype",e,t,n);return[r.oneHot(a,s,i,o,l)]}case"Ones":return[r.ones(yG("shape",e,t,n),yG("dtype",e,t,n))];case"OnesLike":return[r.onesLike(yG("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(yG("shape",e,t,n),yG("dtype",e,t,n),yG("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(yG("shape",e,t,n),yG("minval",e,t,n),yG("maxval",e,t,n),yG("dtype",e,t,n))];case"Range":{let a=yG("start",e,t,n),s=yG("stop",e,t,n),i=yG("step",e,t,n);return[r.range(a,s,i,yG("dtype",e,t,n))]}case"TruncatedNormal":{let a=yG("shape",e,t,n),s=yG("mean",e,t,n),i=yG("stdDev",e,t,n),o=yG("seed",e,t,n);return[r.truncatedNormal(a,s,i,yG("dtype",e,t,n),o)]}case"Zeros":return[r.zeros(yG("shape",e,t,n),yG("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(yG("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function b0(e,t,n){let r=yG("boxes",e,t,n),a=yG("scores",e,t,n),s=yG("maxOutputSize",e,t,n),i=yG("iouThreshold",e,t,n);return{boxes:r,scores:a,maxOutputSize:s,iouThreshold:i,scoreThreshold:yG("scoreThreshold",e,t,n),softNmsSigma:yG("softNmsSigma",e,t,n)}}let b1=async(e,t,n,r,a=bW)=>{switch(e.op){case"NonMaxSuppressionV5":{let{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=b0(e,t,n),h=await a.image.nonMaxSuppressionWithScoreAsync(r,s,i,o,l,u);return[h.selectedIndices,h.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=b0(e,t,n),u=yG("padToMaxOutputSize",e,t,n),h=await a.image.nonMaxSuppressionPaddedAsync(r,s,i,o,l,u);return[h.selectedIndices,h.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=b0(e,t,n);return[await a.image.nonMaxSuppressionAsync(r,s,i,o,l)]}case"Where":{let r=a.cast(yG("condition",e,t,n),"bool"),s=[await a.whereAsync(r)];return r.dispose(),s}case"ListDiff":return a.setdiff1dAsync(yG("x",e,t,n),yG("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}},b2=(e,t,n,r=bW)=>{switch(e.op){case"LowerBound":{let a=yG("sortedSequence",e,t,n),s=yG("values",e,t,n);return[r.lowerBound(a,s)]}case"TopKV2":{let a=yG("x",e,t,n),s=yG("k",e,t,n),i=yG("sorted",e,t,n),o=r.topk(a,s,i);return[o.values,o.indices]}case"UpperBound":{let a=yG("sortedSequence",e,t,n),s=yG("values",e,t,n);return[r.upperBound(a,s)]}case"Unique":{let a=yG("x",e,t,n),s=r.unique(a);return[s.values,s.indices]}case"UniqueV2":{let a=yG("x",e,t,n),s=yG("axis",e,t,n),i=r.unique(a,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},b3=(e,t,n,r=bW)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":let a=yG("default",e,t,n);return[yH(e.name,t,n)||a];case"Placeholder":return[yH(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[yY(yG("x",e,t,n))];case"IdentityN":return yG("x",e,t,n).map(e=>yY(e));case"Shape":return[r.tensor1d(yG("x",e,t,n).shape,"int32")];case"ShapeN":return yG("x",e,t,n).map(e=>r.tensor1d(e.shape));case"Size":return[r.scalar(yG("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(yG("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":let s=yG("x",e,t,n),i=yG("data",e,t,n),o=yG("message",e,t,n),l=yG("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,l));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}};class b4{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=uq(0),this.tensorMap=new Map,ik(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return uq(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);let n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),ix(()=>{let e=px(t),r=n.length,a=e.length;rg.assert(r===a,()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`);for(let t=0;t<r;t++){let r=n[t],a=e[t];ik(a),this.tensorMap.set(r,a)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);let n=await e.data();return ix(()=>{let e=[];for(let r=0;r<n.length;r++){let a=n[r],s=this.findWithDefault(a,t);e.push(s)}return po(e)})}findWithDefault(e,t){let n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}let b6=async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{let a=new b4(yG("keyDType",e,t,n),yG("valueDType",e,t,n));return r.addHashTable(e.name,a),[a.handle]}case"LookupTableImport":case"LookupTableImportV2":{let a=yG("tableHandle",e,t,n,r),s=yG("keys",e,t,n),i=yG("values",e,t,n),o=r.getHashTableById(a.id);return[await o.import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{let a=yG("tableHandle",e,t,n,r),s=yG("keys",e,t,n),i=yG("defaultValue",e,t,n),o=r.getHashTableById(a.id);return[await o.find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{let a=yG("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},b5=(e,t,n,r=bW)=>{switch(e.op){case"ResizeBilinear":{let a=yG("images",e,t,n),s=yG("size",e,t,n),i=yG("alignCorners",e,t,n),o=yG("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(a,[s[0],s[1]],i,o)]}case"ResizeNearestNeighbor":{let a=yG("images",e,t,n),s=yG("size",e,t,n),i=yG("alignCorners",e,t,n),o=yG("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(a,[s[0],s[1]],i,o)]}case"CropAndResize":{let a=yG("image",e,t,n),s=yG("boxes",e,t,n),i=yG("boxInd",e,t,n),o=yG("cropSize",e,t,n),l=yG("method",e,t,n),u=yG("extrapolationValue",e,t,n);return[r.image.cropAndResize(a,s,i,o,l,u)]}case"ImageProjectiveTransformV3":{let a=yG("images",e,t,n),s=yG("transforms",e,t,n),i=yG("outputShape",e,t,n),o=yG("fillValue",e,t,n),l=yG("interpolation",e,t,n),u=yG("fillMode",e,t,n);return[r.image.transform(a,s,l.toLowerCase(),u.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},b8=(e,t,n,r=bW)=>{switch(e.op){case"Equal":return[r.equal(yG("a",e,t,n),yG("b",e,t,n))];case"NotEqual":return[r.notEqual(yG("a",e,t,n),yG("b",e,t,n))];case"Greater":return[r.greater(yG("a",e,t,n),yG("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(yG("a",e,t,n),yG("b",e,t,n))];case"Less":return[r.less(yG("a",e,t,n),yG("b",e,t,n))];case"LessEqual":return[r.lessEqual(yG("a",e,t,n),yG("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(yG("a",e,t,n),yG("b",e,t,n))];case"LogicalNot":return[r.logicalNot(yG("a",e,t,n))];case"LogicalOr":return[r.logicalOr(yG("a",e,t,n),yG("b",e,t,n))];case"Select":case"SelectV2":return[r.where(yG("condition",e,t,n),yG("a",e,t,n),yG("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},b7=(e,t,n,r=bW)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(yG("a",e,t,n),yG("b",e,t,n),yG("transposeA",e,t,n),yG("transposeB",e,t,n))];case"Einsum":return[r.einsum(yG("equation",e,t,n),...yG("tensors",e,t,n))];case"Transpose":return[r.transpose(yG("x",e,t,n),yG("perm",e,t,n))];case"_FusedMatMul":let[a,s]=yG("fusedOps",e,t,n),i="prelu"===s,o=yG("numArgs",e,t,n),l=yG("leakyreluAlpha",e,t,n);if("biasadd"===a){if(i&&2!==o)throw Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[u,h]=yG("args",e,t,n);return[r.fused.matMul({a:yG("a",e,t,n),b:yG("b",e,t,n),transposeA:yG("transposeA",e,t,n),transposeB:yG("transposeB",e,t,n),bias:u,activation:s,preluActivationWeights:h,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}},b9=(e,t,n,r=bW)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(yG("x",e,t,n),yG("axis",e,t,n),yG("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(yG("x",e,t,n),yG("mean",e,t,n),yG("variance",e,t,n),yG("offset",e,t,n),yG("scale",e,t,n),yG("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(yG("x",e,t,n),yG("radius",e,t,n),yG("bias",e,t,n),yG("alpha",e,t,n),yG("beta",e,t,n))];case"Softmax":return[r.softmax(yG("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(yG("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(yG("sparseIndices",e,t,n),yG("outputShape",e,t,n),yG("sparseValues",e,t,n),yG("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},xe=(e,t,n,r=bW)=>{switch(e.op){case"Max":{let a=yG("axis",e,t,n),s=yG("keepDims",e,t,n);return[r.max(yG("x",e,t,n),a,s)]}case"Mean":{let a=yG("axis",e,t,n),s=yG("keepDims",e,t,n);return[r.mean(yG("x",e,t,n),a,s)]}case"Min":{let a=yG("axis",e,t,n),s=yG("keepDims",e,t,n);return[r.min(yG("x",e,t,n),a,s)]}case"Sum":{let a=yG("axis",e,t,n),s=yG("keepDims",e,t,n);return[r.sum(yG("x",e,t,n),a,s)]}case"All":{let a=yG("axis",e,t,n),s=yG("keepDims",e,t,n);return[r.all(yG("x",e,t,n),a,s)]}case"Any":{let a=yG("axis",e,t,n),s=yG("keepDims",e,t,n);return[r.any(yG("x",e,t,n),a,s)]}case"ArgMax":{let a=yG("axis",e,t,n);return[r.argMax(yG("x",e,t,n),a)]}case"ArgMin":{let a=yG("axis",e,t,n);return[r.argMin(yG("x",e,t,n),a)]}case"Prod":{let a=yG("axis",e,t,n),s=yG("keepDims",e,t,n);return[r.prod(yG("x",e,t,n),a,s)]}case"Cumprod":{let a=yG("axis",e,t,n),s=yG("exclusive",e,t,n),i=yG("reverse",e,t,n);return[r.cumprod(yG("x",e,t,n),a,s,i)]}case"Cumsum":{let a=yG("axis",e,t,n),s=yG("exclusive",e,t,n),i=yG("reverse",e,t,n);return[r.cumsum(yG("x",e,t,n),a,s,i)]}case"Bincount":let a=yG("x",e,t,n),s=yG("weights",e,t,n),i=yG("size",e,t,n);return[r.bincount(a,s,i)];case"DenseBincount":{let a=yG("x",e,t,n),s=yG("weights",e,t,n),i=yG("size",e,t,n),o=yG("binaryOutput",e,t,n);return[r.denseBincount(a,s,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},xt=(e,t,n,r=bW)=>{switch(e.op){case"ConcatV2":case"Concat":{let a=yG("n",e,t,n),s=yG("axis",e,t,n),i=yG("tensors",e,t,n);return i=i.slice(0,a),[r.concat(i,s)]}case"Gather":{let a=yG("x",e,t,n),s=yG("indices",e,t,n);return[r.gather(a,r.cast(s,"int32"),0)]}case"GatherV2":{let a=yG("axis",e,t,n),s=yG("batchDims",e,t,n),i=yG("x",e,t,n),o=yG("indices",e,t,n);return[r.gather(i,r.cast(o,"int32"),a,s)]}case"Reverse":{let a=yG("dims",e,t,n),s=[];for(let e=0;e<a.length;e++)a[e]&&s.push(e);let i=yG("x",e,t,n);return[r.reverse(i,s)]}case"ReverseV2":{let a=yG("axis",e,t,n),s=yG("x",e,t,n);return[r.reverse(s,a)]}case"Slice":{let a=yG("begin",e,t,n),s=yG("size",e,t,n);return[r.slice(yG("x",e,t,n),a,s)]}case"StridedSlice":{let a=yG("begin",e,t,n),s=yG("end",e,t,n),i=yG("strides",e,t,n),o=yG("beginMask",e,t,n),l=yG("endMask",e,t,n),u=yG("ellipsisMask",e,t,n),h=yG("newAxisMask",e,t,n),p=yG("shrinkAxisMask",e,t,n),d=yG("x",e,t,n);return[r.stridedSlice(d,a,s,i,o,l,u,h,p)]}case"Pack":return ix(()=>{let a=yG("axis",e,t,n),s=yG("tensors",e,t,n),i=s[0].shape,o=r.squeeze(s[0]).shape,l=s.map(e=>{let t=rg.arraysEqual(e.shape,i);if(!t&&!rg.arraysEqual(r.squeeze(e).shape,o))throw Error("the input tensors shape does not match");return t?e:r.reshape(e,i)});return[r.stack(l,a)]});case"Unpack":{let a=yG("axis",e,t,n),s=yG("tensor",e,t,n);return r.unstack(s,a)}case"Tile":{let a=yG("reps",e,t,n);return[r.tile(yG("x",e,t,n),a)]}case"Split":case"SplitV":{let a=yG("axis",e,t,n),s=yG("numOrSizeSplits",e,t,n),i=yG("x",e,t,n);return r.split(i,s,a)}case"ScatterNd":{let a=yG("indices",e,t,n),s=yG("values",e,t,n),i=yG("shape",e,t,n);return[r.scatterND(a,s,i)]}case"GatherNd":{let a=yG("x",e,t,n),s=yG("indices",e,t,n);return[r.gatherND(a,s)]}case"SparseToDense":{let a=yG("sparseIndices",e,t,n),s=yG("outputShape",e,t,n),i=yG("sparseValues",e,t,n),o=yG("defaultValue",e,t,n);return[r.sparseToDense(a,i,s,i.dtype===o.dtype?o:r.cast(o,i.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},xn=(e,t,n,r=bW)=>{switch(e.op){case"SparseFillEmptyRows":{let{outputIndices:a,outputValues:s,emptyRowIndicator:i,reverseIndexMap:o}=r.sparse.sparseFillEmptyRows(yG("indices",e,t,n),yG("values",e,t,n),yG("denseShape",e,t,n),yG("defaultValue",e,t,n));return[a,s,i,o]}case"SparseReshape":{let{outputIndices:a,outputShape:s}=r.sparse.sparseReshape(yG("inputIndices",e,t,n),yG("inputShape",e,t,n),yG("newShape",e,t,n));return[a,s]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(yG("data",e,t,n),yG("indices",e,t,n),yG("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(yG("data",e,t,n),yG("indices",e,t,n),yG("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},xr=(e,t,n,r=bW)=>{switch(e.op){case"FFT":return[r.fft(yG("x",e,t,n))];case"IFFT":return[r.ifft(yG("x",e,t,n))];case"RFFT":return[r.rfft(yG("x",e,t,n))];case"IRFFT":return[r.irfft(yG("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},xa=(e,t,n,r=bW)=>{switch(e.op){case"StringNGrams":{let{nGrams:a,nGramsSplits:s}=r.string.stringNGrams(yG("data",e,t,n),yG("dataSplits",e,t,n),yG("separator",e,t,n),yG("nGramWidths",e,t,n),yG("leftPad",e,t,n),yG("rightPad",e,t,n),yG("padWidth",e,t,n),yG("preserveShortSequences",e,t,n));return[a,s]}case"StringSplit":{let{indices:a,values:s,shape:i}=r.string.stringSplit(yG("input",e,t,n),yG("delimiter",e,t,n),yG("skipEmpty",e,t,n));return[a,s,i]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(yG("input",e,t,n),yG("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},xs=(e,t,n,r=bW)=>{switch(e.op){case"Cast":return[r.cast(yG("x",e,t,n),yG("dtype",e,t,n))];case"ExpandDims":{let a=yG("axis",e,t,n);return[r.expandDims(yG("x",e,t,n),a)]}case"Squeeze":{let a=yG("axis",e,t,n);return[r.squeeze(yG("x",e,t,n),a)]}case"Reshape":return[r.reshape(yG("x",e,t,n),yG("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(yG("x",e,t,n),yG("padding",e,t,n),yG("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(yG("x",e,t,n),yG("padding",e,t,n),yG("constantValue",e,t,n))];case"SpaceToBatchND":{let a=yG("blockShape",e,t,n),s=yG("paddings",e,t,n);return[r.spaceToBatchND(yG("x",e,t,n),a,s)]}case"BatchToSpaceND":{let a=yG("blockShape",e,t,n),s=yG("crops",e,t,n);return[r.batchToSpaceND(yG("x",e,t,n),a,s)]}case"DepthToSpace":{let a=yG("blockSize",e,t,n),s=yG("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(yG("x",e,t,n),a,s)]}case"BroadcastTo":return[r.broadcastTo(yG("x",e,t,n),yG("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(yG("s0",e,t,n),yG("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function xi(e,t,n,r,a=ix){let s=((e,t,n)=>{switch(e.category){case"arithmetic":return a(()=>bU(e,t,n));case"basic_math":return a(()=>bV(e,t,n));case"control":return bY(e,t,n);case"convolution":return a(()=>bJ(e,t,n));case"creation":return a(()=>bQ(e,t,n));case"dynamic":return b1(e,t,n);case"evaluation":return a(()=>b2(e,t,n));case"image":return a(()=>b5(e,t,n));case"graph":return a(()=>b3(e,t,n));case"logical":return a(()=>b8(e,t,n));case"matrices":return a(()=>b7(e,t,n));case"normalization":return a(()=>b9(e,t,n));case"reduction":return a(()=>xe(e,t,n));case"slice_join":return a(()=>xt(e,t,n));case"sparse":return a(()=>xn(e,t,n));case"spectral":return a(()=>xr(e,t,n));case"string":return a(()=>xa(e,t,n));case"transformation":return a(()=>xs(e,t,n));case"hash_table":return b6(e,t,n,r);case"custom":let s=yV[e.op];if(s&&s.customExecutor)return s.customExecutor(new bB(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return rg.isPromise(s)?s.then(e=>[].concat(e)):[].concat(s)}class xo{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let e=[];for(let t=0;t<this.contexts.length-1;t++){let n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw Error("Cannot increase frame iteration, the context is empty")}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(let t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(let t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function xl(e,t,n,r){let a=new Set,s=[],i=null,o=null,l=new Set,u=Object.keys(e).map(e=>yK(e)[0]),h=[];null!=r&&(h=r.map(e=>yK(e.name)[0]));let p=[...t];for(;p.length>0;){let e=p.pop();if((xd(e)||xh.indexOf(e.op)>=0||xp.indexOf(e.op)>=0)&&null==i&&(o=(i=e).children.map(e=>e.name).filter(e=>a.has(e))),a.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===h.indexOf(e.name)){if(0===e.inputs.length){s.push(e.name);continue}e.inputs.forEach(e=>{l.has(e.name)||(l.add(e.name),p.push(e))})}}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:i,syncInputs:o}}let xu=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],xh=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],xp=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function xd(e){return xu.indexOf(e.op)>=0}class xc{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new xc(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){let t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{let t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){let n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){let n=xl(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){let n=t.map(e=>e.name),a=Object.keys(e);throw Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){let{usedNodes:r,inputs:a}=n,s=[],i=Object.keys(a).map(e=>yK(e)[0]).map(t=>e.nodes[t]),o=e.initNodes;i.forEach(e=>{r.has(e.name)&&s.push(e)}),e.weights.forEach(e=>{r.has(e.name)&&s.push(e)}),null!=o&&o.forEach(e=>{r.has(e.name)&&s.push(e)});let l=new Set,u=[];for(;s.length>0;){let e=s.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach(e=>{!l.has(e.name)&&r.has(e.name)&&e.inputs.every(e=>l.has(e.name))&&s.push(e)})}return u}(this.graph,this.weightMap,n)}execute(e,t){let n=Object.keys(e=this.mapInputs(e)).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);let r=n.map(e=>this.graph.nodes[yK(e)[0]]),a=t.map(e=>yK(e)[0]),s=a.map(e=>this.graph.nodes[e]);this.resetIntermediateTensors(),0===s.length&&(s=this._outputs);let i=this.getCompilationKey(r,s),o=this.compiledMap.get(i);null==o&&(o=this.compile(e,s),this.compiledMap.set(i,o));let l={},u={};return ix(()=>{let n=new xo(this.weightMap,l,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{let[n,a]=yK(t),s=[];s[a]=e[t],r[n]=s});let s=this.getFrozenTensorIds(r),i={};for(let e=0;e<o.length;e++){let t=o[e];if(!r[t.name]){let e=xi(t,r,n,this._resourceManager);if(rg.isPromise(e))throw Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,i)}}return null==this.parent&&n.dispose(s),t.map(e=>yH(e,r,n))})}getFrozenTensorIds(e){return new Set([].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id))))}checkTensorForDisposal(e,t,n,r,a,s,i){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach(e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){let s=n[yj(e.name,r.currentContextId)];null!=s&&s.forEach(e=>{if(e&&!e.kept&&!a.has(e.id)){let n=i[e.id];if(1===n){if(this.keepTensorForDebug){let[n,a]=yq(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach(e=>this.intermediateTensors[e].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach(e=>{this.tensorsMap[e].forEach(e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(let e in this.intermediateTensors)this.intermediateTensors[e].forEach(e=>e.dispose()),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=eM.getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();let s=new xo(this.weightMap,r,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,s,t,n);let i=t.map(e=>yH(e,this.tensorsMap,s)),o=i.map(e=>e.id),l=Object.keys(e).map(t=>e[t].id);return this.keepIds=new Set([...o,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&s.dispose(this.keepIds),i}async executeFunctionAsync(e,t,n){let r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){let a=Object.keys(e),s=a.map(e=>this.graph.nodes[yK(e)[0]]),i=n.map(e=>yK(e)[0]),o=i.map(e=>this.graph.nodes[e]);0===o.length&&(o=this._outputs);let{usedNodes:l,missingInputs:u,dynamicNode:h,syncInputs:p}=xl(e,o,this.weightMap,this._initNodes),d=[...s,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),c=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{let[n,r]=yK(t),a=[];a[r]=e[t],c[n]=a});let f={},m=this.getFrozenTensorIds(c),g={};for(;d.length>0;){let e=this.processStack(s,d,t,c,g,m,i,f,l);await Promise.all(e)}null!=h||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let y=o.filter(e=>!xd(e)&&!yH(e.name,c,t)).map(e=>e.name);if(y.length>0){let e="";throw null!=h&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${u}]. ${e}`)}return c}processStack(e,t,n,r,a,s,i,o,l){let u=[];for(;t.length>0;){let e=t.pop();n.currentContext=e.contexts;let h="";if("Enter"===e.node.op&&yG("isConstant",e.node,r,n)&&([h]=yq(e.node.name,n)),null==r[e.node.name]){let p=xi(e.node,r,n,this._resourceManager);h||([h]=yq(e.node.name,n));let d=n.currentContext;rg.isPromise(p)?u.push(p.then(u=>(r[h]=u,n.currentContext=d,this.checkTensorForDisposal(h,e.node,r,n,s,i,o),this.processChildNodes(e.node,t,n,r,a,l),u))):(r[h]=p,this.checkTensorForDisposal(h,e.node,r,n,s,i,o),this.processChildNodes(e.node,t,n,r,a,l))}else this.processChildNodes(e.node,t,n,r,a,l)}return u}processChildNodes(e,t,n,r,a,s){e.children.forEach(e=>{let[i]=yq(e.name,n);!a[i]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!yH(e,r,n))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!yH(e,r,n))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{let n=e[t],[r]=yK(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){let e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t);rg.assert(t,()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&rg.assert(n.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){let t={};for(let n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){let t=Object.keys(e).filter(e=>{let[t]=yK(e);return null==this.graph.nodes[t]});if(t.length>0)throw Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e,{})}checkOutputs(e){e.forEach(e=>{let[t]=yK(e);if(!this.graph.nodes[t])throw Error(`The output '${e}' is not found in the graph`)})}}class xf{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(let e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(let e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}function xm(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw Error("Circular references are not supported.");if(n.has(e))return n.get(e);let a=t(e);if(a.recurse&&null!==a.value)throw Error("A deep map function may not return both a value and recurse=true.");if(!a.recurse)return n.set(e,a.value),a.value;if(xb(e)){let a=Array.isArray(e)?[]:{};for(let s in r.add(e),e){let i=xm(e[s],t,n,r);a[s]=i}return r.delete(e),e.__proto__&&(a.__proto__=e.__proto__),a}throw Error(`Can't recurse into non-iterable type: ${e}`)}function xg(e){return null===e?null:xb(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function xy(e,t){let n=new Map;for(let r of(xm(e,t,n),Array.from(n.keys()))){let e=n.get(r);if(rg.isPromise(e)){let t=await e;n.set(r,t)}}return xm(e,t,n)}function xb(e){let t=!1;if(eM.get("IS_BROWSER"))t=e instanceof TextDecoder;else{let{StringDecoder:n}=_("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof as)&&!(e instanceof Promise)&&!t)}function xx(e){return e instanceof as?{value:e.clone(),recurse:!1}:xb(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class xv{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw RangeError("Can't create ring buffer of capacity < 1.");this.data=Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(let t of e)this.push(t)}pop(){if(this.isEmpty())throw RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw RangeError("Ring buffer is empty.");let e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw RangeError("Ring buffer is empty.");let t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class xk extends xv{constructor(){super(xk.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){let e=2*this.capacity,t=Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}xk.INITIAL_CAPACITY=32;class xw{async toArray(){let e=[],t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){let e=this.prefetch(100),t=[],n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)n=e((t=await this.next()).value)}handleErrors(e){return new xR(this,e)}filter(e){return new xE(this,e)}map(e){return new xA(this,e)}mapAsync(e){return new xF(this,e)}serialMapAsync(e){return new xF(this,e).serial()}flatmap(e){return new x_(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new x$(this,e,t)}columnMajorBatch(e,t=!0,n=xg){return this.rowMajorBatch(e,t).map(e=>(function(e,t=xg){return function e(t,n,r=new Set){let a=t[0];if(r.has(a))throw Error("Circular references are not supported.");let s=n(t);if(s.recurse&&null!==s.value)throw Error("A deep zip function may not return both a value and recurse=true.");if(!s.recurse)return s.value;if(xb(a)){let s=Array.isArray(a)?[]:{};for(let i in r.add(a),a){let a=e(t.map(e=>e[i]),n,r);s[i]=a}return r.delete(a),s}throw Error(`Can't recurse into non-iterable type: ${a}`)}(e,t)})(e,n))}concatenate(e,t){return new xO(new xI([this,e]),t)}take(e){return e<0||null==e?this:new xC(this,e)}skip(e){return e<0||null==e?this:new xT(this,e)}prefetch(e){return new xM(this,e)}shuffle(e,t){return new xL(this,e,t)}serial(){return new xN(this)}}class xI extends xw{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let e=this.items[this.trav];return this.trav++,{value:xm(e,xx),done:!1}}}class xS extends xw{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class xN extends xw{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class xT extends xw{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let e=await this.upstream.next();if(e.done)return e;iv(e.value)}return this.upstream.next()}}class xC extends xw{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class x$ extends xw{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let e=[];for(;e.length<this.batchSize;){let t=await this.upstream.next();if(t.done){if(this.enableSmallLastBatch&&e.length>0)return{value:e,done:!1};return{value:null,done:!0}}e.push(t.value)}return{value:e,done:!1}}}class xE extends xw{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;iv(e.value)}}}class xA extends xw{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){let e=await this.upstream.next();if(e.done)return{value:null,done:!0};let t=al.getTensorsInContainer(e.value),n=this.transform(e.value),r=al.getTensorsInContainer(n);for(let e of t)al.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class xR extends xw{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class xF extends xw{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let e=await this.upstream.next();if(e.done)return{value:null,done:!0};let t=al.getTensorsInContainer(e.value),n=await this.transform(e.value),r=al.getTensorsInContainer(n);for(let e of t)al.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class xD extends xw{constructor(){super(),this.outputQueue=new xk,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class x_ extends xD{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let e=await this.upstream.next();if(e.done)return!1;let t=al.getTensorsInContainer(e.value),n=this.transform(e.value),r=al.getTensorsInContainer(n);for(let e of(this.outputQueue.pushAll(n),t))al.isTensorInList(e,r)||e.dispose();return!0}}class xO extends xw{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){let e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(N||(N={}));class xM extends xw{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new xv(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class xL extends xM{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=lH.alea(n||rg.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class xz{constructor(){this.size=null}batch(e,t=!0){let n,r=this;return rg.assert(e>0,()=>`batchSize needs to be positive, but it is
      ${e}`),xP(async()=>(await r.iterator()).columnMajorBatch(e,t,xB),this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e))}concatenate(e){let t,n=this;return xP(async()=>(await n.iterator()).concatenate(await e.iterator()),this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null)}filter(e){let t,n=this;return xP(async()=>(await n.iterator()).filter(t=>ix(()=>e(t))),this.size===1/0?1/0:null)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){let t=this;return xP(async()=>(await t.iterator()).map(t=>ix(()=>e(t))),this.size)}mapAsync(e){let t=this;return xP(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let t=this;return xP(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){let t,n=this;return xP(async()=>new xO(new xS(async()=>({value:await n.iterator(),done:!1})).take(e),void 0),null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null)}skip(e){let t,n=this;return xP(async()=>(await n.iterator()).skip(e),null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null)}shuffle(e,t,n=!0){if(null==e||e<0)if(null==this.size)throw RangeError("`Dataset.shuffle()` requires bufferSize to be specified.");else throw RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);let r=this,a=lH.alea(t||rg.now().toString());return xP(async()=>{let t=a.int32();return n&&(t+=a.int32()),(await r.iterator()).shuffle(e,t.toString())},this.size)}take(e){let t,n=this;return xP(async()=>(await n.iterator()).take(e),null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null)}async toArray(){if(this.size===1/0)throw Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function xP(e,t=null){return new class extends xz{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function xB(e){var t,n;if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof as||rg.isTypedArray(t)?{value:function(e){if(0===e.length)throw Error("Can't make a batch of zero elements.");return e[0]instanceof as?po(e):aO(e)}(e),recurse:!1}:{value:null,recurse:!0}}xz.MAX_BUFFER_SIZE=1e4;class xW extends xz{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e))}}let xU=Symbol("out"),xV=Symbol("field"),xG=Symbol("quote"),xH=Symbol("quoteafterquote"),xq=Symbol("quoteinquote");class xj extends xw{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;let t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(!eM.get("IS_BROWSER"))throw Error("microphone API is only supported in browser environment.");let t=new xj(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw Error("Could not obtain audio from microphone.");let e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;let t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){let e,t;if(this.isClosed)return{value:null,done:!0};let n=await this.getAudioData();if(this.includeSpectrogram){let t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){let e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){let e=[],t=[],n=0;return new Promise(r=>{let a=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(a),r({freqDataQueue:e,timeDataQueue:t}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){!this.isClosed&&(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){let t=e[0].length,n=new Float32Array(e.length*t);return e.forEach((e,r)=>n.set(e,r*t)),n}getTensorFromAudioDataArray(e,t){let n=new Float32Array(rg.sizeFromShape(t));return n.set(e,n.length-e.length),aO(n,t)}}class xK extends xw{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=ph([0],"int32"),this.webcamConfig.centerCrop){let e=+this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=+this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,r=(1-t)/2;this.cropBox=pp([r,n,t+r,n+e],[1,4])}else this.cropBox=pp([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(!eM.get("IS_BROWSER"))throw Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}let n=new xK(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&rg.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}})}async next(){let e;if(this.isClosed)return{value:null,done:!0};try{e=lv.fromPixels(this.webcamVideoElement)}catch(e){throw Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!!this.webcamConfig.resizeWidth&&!!this.webcamConfig.resizeHeight&&(this.webcamVideoElement.width!==this.webcamConfig.resizeWidth||this.webcamVideoElement.height!==this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return ix(()=>{let t,n=l5(s0(e,"float32"),0),r=(t=dN.cropAndResize(n,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear")).shape;return im(t,r.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw Error("Can not convert infinite video stream to array.")}}class xX{}class xY extends xw{split(e){return new xZ(this,e)}}class xZ extends xY{constructor(e,t){super(),this.upstream=e,this.impl=new xJ(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class xJ extends xD{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){let e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);let t=e.value.split(this.separator);for(let e of(t[0]=this.carryover+t[0],t.slice(0,-1)))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class xQ extends xw{decodeUTF8(){return new x0(this)}}class x0 extends xY{constructor(e){super(),this.upstream=e,this.impl=new x1(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class x1 extends xD{constructor(e){if(super(),this.upstream=e,eM.get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{let{StringDecoder:e}=_("foUwZ");this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){let e,t,n=await this.upstream.next();return!n.done&&(e=n.value,t=eM.get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(aq.from(e.buffer)),this.outputQueue.push(t),!0)}}class x2 extends xQ{constructor(e,t={}){super(),this.file=e,this.options=t,rg.assert(e instanceof Uint8Array||!!eM.get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};let e=new Promise((e,t)=>{let n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{let r=new FileReader;r.onload=n=>{let a=r.result;if(a instanceof ArrayBuffer&&(a=new Uint8Array(a)),!(a instanceof Uint8Array))return t(TypeError("FileReader returned unknown type."));e(a)},r.onabort=e=>t(Error("Aborted")),r.onerror=e=>t(Error(e.type));let a=this.file.slice(this.offset,n);r.readAsArrayBuffer(a)}this.offset=n});return{value:await e,done:!1}}}async function x3(e,t={},n){let r,a;"string"==typeof e?r=e:(r=e.url,a=x4(e));let s=await (n||rg.fetch)(r,a);if(s.ok)return new x2(new Uint8Array(await s.arrayBuffer()),t);throw Error(s.statusText)}let x4=e=>({method:e.method,headers:e.headers,body:e.body,mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity});function x6(e){return"string"==typeof e&&"file://"===e.slice(0,7)}class x5 extends xX{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(x6(this.input)&&eM.get("IS_NODE")){let e=_("foUwZ");this.input=e.readFileSync(this.input.slice(7))}return new x2(this.input,this.options)}}function x8(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&rg.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}let x7=dZ.whereImpl;class x9 extends L{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new M(this,av)}nextDataId(){return x9.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,eM.get("IS_NODE")&&iI.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));let r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&rg.isString(n[0])){let a=n.map(e=>rg.encodeString(e));r=this.write(a,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){let t=this.data.get(e);t.refCount++}decRef(e){if(this.data.has(e)){let t=this.data.get(e);t.refCount--}}move(e,t,n,r,a){this.data.set(e,{values:t,dtype:r,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){let{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){let e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return iI.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let n=t.map(e=>rg.decodeString(e));return sQ(e.shape,e.dtype,n)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return sQ(e.shape,e.dtype,t)}makeOutput(e,t,n){return av.makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;let{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){let t=rg.now();return e(),{kernelMs:rg.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){x8([e],"where");let t=this.readSync(e.dataId);return x7(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function ve(e,t,n){return({inputs:r,attrs:a,backend:s})=>{let{x:i}=r;if(x8(i,e),"string"===i.dtype||"string"===n)throw Error("unaryKernelFunc does not support string input/output");let o=s.data.get(i.dataId).values,l=rg.sizeFromShape(i.shape),u=n||i.dtype,h=rg.getArrayFromDType(u,l);for(let e=0;e<l;++e)h[e]=t(o[e],a);return s.makeTensorInfo(i.shape,u,h)}}function vt(e,t,n){return({inputs:r,attrs:a,backend:s})=>{let{x:i}=r;if(x8(i,e),"string"===i.dtype||"string"===n)throw Error("unaryKernelFunc does not support string input/output");let o=s.data.get(i.dataId).values,l=n||i.dtype,u=t(o,l,a);return s.makeTensorInfo(i.shape,l,u)}}x9.nextDataId=0,iw("cpu",()=>new x9,1);let vn=ve("Elu",e=>e>=0?e:Math.exp(e)-1);function vr(e){let{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function va(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r;x8([a],"leakyRelu");let i=rg.sizeFromShape(a.shape),o=n.data.get(a.dataId).values,l=rg.getTypedArrayFromDType("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?s*o[e]:o[e];return n.makeTensorInfo(a.shape,"float32",l)}function vs(e){return(t,n,r,a,s)=>{let i=iI.assertAndGetBroadcastShape(t,n),o=i.length,l=rg.computeStrides(i),u=rg.sizeFromShape(i),h=rg.getTypedArrayFromDType(s,u),p=t.length,d=n.length,c=rg.computeStrides(t),f=rg.computeStrides(n),m=iI.getBroadcastDims(t,i),g=iI.getBroadcastDims(n,i);if(m.length+g.length===0)for(let t=0;t<h.length;++t)h[t]=e(r[t%r.length],a[t%a.length]);else for(let t=0;t<h.length;++t){let n=rg.indexToLoc(t,o,l),s=n.slice(-p);m.forEach(e=>s[e]=0);let i=rg.locToIndex(s,p,c),u=n.slice(-d);g.forEach(e=>u[e]=0);let y=rg.locToIndex(u,d,f);h[t]=e(r[i],a[y])}return[h,i]}}let vi=vs((e,t)=>e<0?t*e:e);function vo(e){let{inputs:t,backend:n}=e,{x:r,alpha:a}=t;x8([r,a],"prelu");let s=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,[o,l]=vi(r.shape,a.shape,s,i,"float32");return n.makeTensorInfo(l,"float32",o)}let vl=ve(nw,e=>Math.max(0,e)),vu=ve(n$,e=>Math.min(Math.max(0,e),6));function vh(e){return(t,n,r)=>{let a=rg.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],r);return a}}let vp=vh(e=>1/(1+Math.exp(-e))),vd=ve(nP,e=>1/(1+Math.exp(-e)));function vc(e,t,n,r,a){if("linear"===n)return vr({inputs:{x:t},backend:e});if("relu"===n)return vl({inputs:{x:t},backend:e});if("elu"===n)return vn({inputs:{x:t},backend:e});if("relu6"===n)return vu({inputs:{x:t},backend:e});if("prelu"===n)return vo({inputs:{x:t,alpha:r},backend:e});else if("leakyrelu"===n)return va({inputs:{x:t},backend:e,attrs:{alpha:a}});else if("sigmoid"===n)return vd({inputs:{x:t},backend:e});throw Error(`Activation ${n} has not been implemented for the CPU backend.`)}function vf(e){let{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",i)},o}function vm(e,t,n="float32"){if("complex64"===n)return vf({inputs:{real:vm(e,t,"float32"),imag:vm(e,t,"float32")},backend:e});let r=rg.makeZerosTypedArray(rg.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function vg(e){let{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}function vy(e,t,n,r){if("int32"===r)return[t,"int32",Int32Array.from(e)];if("bool"===r){let r=rg.toTypedArray([0],n),[a,s]=vs((e,t)=>+(e!==t))(t,[],e,r,"bool");return[s,"bool",a]}throw Error(`Error in Cast: failed to cast ${n} to ${r}`)}function vb(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dtype:s}=r;if("complex64"===s){if("complex64"===a.dtype)return vr({inputs:{x:a},backend:n});let e=vm(n,a.shape,a.dtype),t=vb({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=vf({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){let e=vg({inputs:{input:a},backend:n}),t=vb({inputs:{x:e},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(e),t}if(!rg.hasEncodingLoss(a.dtype,s)){let e=vr({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}let[i,o,l]=vy(n.data.get(a.dataId).values,a.shape,a.dtype,s);return n.makeTensorInfo(i,o,l)}function vx(e,t,n,r){return null==n?({inputs:n,backend:a})=>{let{a:s,b:i}=n;x8([s,i],e);let o=a.data.get(s.dataId).values,l=a.data.get(i.dataId).values,u="string"===s.dtype?iI.fromUint8ToStringArray(o):o,h="string"===s.dtype?iI.fromUint8ToStringArray(l):l,p=r||s.dtype,[d,c]=t(s.shape,i.shape,u,h,p);return a.makeTensorInfo(c,p,d)}:({inputs:e,backend:a})=>{let{a:s,b:i}=e;if("complex64"===s.dtype||"complex64"===i.dtype){let e=vb({inputs:{x:s},backend:a,attrs:{dtype:"complex64"}}),t=a.data.get(e.dataId),r=t.complexTensorInfos.real,o=t.complexTensorInfos.imag,l=a.data.get(r.dataId).values,u=a.data.get(o.dataId).values,h=vb({inputs:{x:i},backend:a,attrs:{dtype:"complex64"}}),p=a.data.get(h.dataId),d=p.complexTensorInfos.real,c=p.complexTensorInfos.imag,f=a.data.get(d.dataId).values,m=a.data.get(c.dataId).values,[g,y,b]=n(s.shape,i.shape,l,u,f,m),x=a.makeTensorInfo(b,"float32",g),v=a.makeTensorInfo(b,"float32",y),k=vf({inputs:{real:x,imag:v},backend:a});return a.disposeIntermediateTensorInfo(e),a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(v),k}{let e=a.data.get(s.dataId).values,n=a.data.get(i.dataId).values,o=r||s.dtype,[l,u]=t(s.shape,i.shape,e,n,o);return a.makeTensorInfo(u,o,l)}}}function vv(e){return(t,n,r,a,s,i)=>{let o=iI.assertAndGetBroadcastShape(t,n),l=rg.sizeFromShape(o),u=o.length,h=rg.computeStrides(o),p=rg.getTypedArrayFromDType("float32",l),d=rg.getTypedArrayFromDType("float32",l),c=iI.getBroadcastDims(t,o),f=iI.getBroadcastDims(n,o),m=iI.mergeRealAndImagArrays(r,a),g=iI.mergeRealAndImagArrays(s,i),y=t.length,b=rg.computeStrides(t),x=n.length,v=rg.computeStrides(n);if(c.length+f.length===0)for(let t=0;t<p.length;t++){let n=t%m.length,r=t%g.length,a=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=a.real,d[t]=a.imag}else for(let t=0;t<p.length;t++){let n=rg.indexToLoc(t,u,h),r=n.slice(-y);c.forEach(e=>r[e]=0);let a=rg.locToIndex(r,y,b),s=n.slice(-x);f.forEach(e=>s[e]=0);let i=rg.locToIndex(s,x,v),o=e(m[2*a],m[2*a+1],g[2*i],g[2*i+1]);p[t]=o.real,d[t]=o.imag}return[p,d,o]}}let vk=vs((e,t)=>e+t),vw=vx("Add",vk,vv((e,t,n,r)=>({real:e+n,imag:t+r})));function vI(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,i=rg.sizeFromShape(a.shape),o=rg.inferFromImplicitShape(s,i),l=rg.sizeFromShape(o);rg.assert(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(a.dataId);let u=n.data.get(a.dataId);if(null!=u.complexTensorInfos){let e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:a.dataId,shape:o,dtype:a.dtype}}function vS(e){let{inputs:t,backend:n,attrs:r}=e,{a:a,b:s}=t,{transposeA:i,transposeB:o}=r;x8([a,s],"matMul");let l=a.shape.length,u=s.shape.length,h=i?a.shape[l-2]:a.shape[l-1],p=o?s.shape[u-1]:s.shape[u-2],d=i?a.shape[l-1]:a.shape[l-2],c=o?s.shape[u-2]:s.shape[u-1],f=a.shape.slice(0,-2),m=s.shape.slice(0,-2),g=rg.sizeFromShape(f),y=rg.sizeFromShape(m),b=iD.assertAndGetBroadcastShape(a.shape.slice(0,-2),s.shape.slice(0,-2)).concat([d,c]);rg.assert(h===p,()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${a.shape} and ${s.shape} and transposeA=${i} and transposeB=${o} must match.`);let x=vI({inputs:{x:a},backend:n,attrs:{shape:i?[g,h,d]:[g,d,h]}}),v=vI({inputs:{x:s},backend:n,attrs:{shape:o?[y,c,p]:[y,p,c]}}),k=i?x.shape[1]:x.shape[2],w=i?x.shape[2]:x.shape[1],I=o?v.shape[1]:v.shape[2],S=Math.max(g,y),N=n.data.get(x.dataId).values,T=n.data.get(v.dataId).values,C=rg.computeStrides(x.shape),$=rg.computeStrides(v.shape),[E,A,R]=i?[C[0],1,C[1]]:[C[0],C[1],1],[F,D,_]=o?[1,$[1],$[0]]:[$[1],1,$[0]],O=w*I,M=sQ([S,w,I],x.dtype),L=M.values,z=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<w;t+=z)for(let n=0;n<I;n+=z)for(let r=0;r<k;r+=z){let a=Math.min(t+z,w),s=Math.min(n+z,I),i=Math.min(r+z,k);for(let o=t;o<a;o++)for(let t=n;t<s;t++){let n=0;for(let a=r;a<i;a++){let r=Math.min(e,g-1)*E,s=Math.min(e,y-1)*_;n+=N[r+o*A+a*R]*T[a*F+t*D+s]}L[e*O+(o*I+t)]+=n}}return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,M.dtype,M.values)}function vN(e){let t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}let vT=ve(eZ,e=>Math.acos(e)),vC=ve(eJ,e=>Math.acosh(e));function v$(e,t,n,r,a){let s=t.length,i=rg.sizeFromShape(t),o=rg.computeStrides(t),l=rg.computeStrides(a),u=rg.getTypedArrayFromDType(n,rg.sizeFromShape(a));for(let t=0;t<i;++t){let n=rg.indexToLoc(t,s,o),a=Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[r[e]];u[rg.locToIndex(a,s,l)]=e[t]}return u}function vE(e){let{inputs:t,attrs:n,backend:r}=e,{x:a}=t,{perm:s}=n;x8(a,"transpose");let i=Array(a.shape.length);for(let e=0;e<i.length;e++)i[e]=a.shape[s[e]];let o=v$(r.data.get(a.dataId).values,a.shape,a.dtype,s,i);return{dataId:r.write(o,i,a.dtype),shape:i,dtype:a.dtype}}let vA=ve(e2,e=>Math.asin(e)),vR=ve(e3,e=>Math.asinh(e)),vF=ve(e4,e=>Math.atan(e)),vD=vx(e5,vs((e,t)=>Math.atan2(e,t))),v_=ve(e6,e=>Math.atanh(e));function vO(e,t,n,r,a,s){let i=a.strideHeight,o=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,h=a.effectiveFilterHeight,p=a.effectiveFilterWidth,d=a.padInfo.top,c=a.padInfo.left,f="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=sQ(a.outShape,n),g=m.values,y=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],x=a.outShape[3];for(let t=0;t<a.batchSize;++t){let n=t*y,m=t*r[0];for(let t=0;t<a.inChannels;++t)for(let y=0;y<a.outHeight;++y){let v=y*i-d,k=Math.max(0,v),w=Math.min(a.inHeight,h+v),I=n+y*b;for(let n=0;n<a.outWidth;++n){let i=n*o-c,h=Math.max(0,i),d=Math.min(a.inWidth,p+i),y=f,b=0,v=0;for(let n=k;n<w;n+=l){let a=m+n*r[1];for(let n=h;n<d;n+=u){let i=e[a+n*r[2]+t];"max"===s&&i>y?y=i:"avg"===s&&(b+=i,v++)}if(isNaN(y))break}g[I+n*x+t]="avg"===s?b/v:y}}}return m}function vM(e,t,n,r,a=!1,s=!1){let i=sQ(r.outShape,"int32"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,c=r.padInfo.top,f=r.padInfo.left,m=sQ(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){let g=n*o-c,y=g;for(;y<0;)y+=u;let b=Math.min(r.inHeight,p+g);for(let o=0;o<r.outWidth;++o){let p=o*l-f,c=p;for(;c<0;)c+=h;let x=Math.min(r.inWidth,d+p),v=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){let i=n-g;for(let o=c;o<x;o+=h){let l=o-p,u=m.get(e,n,o,t);u>v&&(v=u,k=a?s?((e*r.inHeight+n)*r.inWidth+o)*r.inChannels+t:(n*r.inWidth+o)*r.inChannels+t:i*d+l)}}i.set(k,e,n,o,t)}}return i}function vL(e,t,n,r,a,s){let i=a.strideDepth,o=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,h=a.dilationHeight,p=a.dilationWidth,d=a.effectiveFilterDepth,c=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,y=a.padInfo.left,b="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=sQ(a.outShape,n),v=x.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],w=a.outShape[2]*a.outShape[3]*a.outShape[4],I=a.outShape[3]*a.outShape[4],S=a.outShape[4];for(let t=0;t<a.batchSize;++t){let n=t*k,x=t*r[0];for(let t=0;t<a.inChannels;++t)for(let k=0;k<a.outDepth;++k){let N=k*i-m,T=N;for(;T<0;)T+=u;let C=Math.min(a.inDepth,d+N),$=n+k*w;for(let n=0;n<a.outHeight;++n){let i=n*o-g,d=i;for(;d<0;)d+=h;let m=Math.min(a.inHeight,c+i),k=$+n*I;for(let n=0;n<a.outWidth;++n){let i=n*l-y,o=i;for(;o<0;)o+=p;let c=Math.min(a.inWidth,f+i),g=k+n*S,w=b,I=0,N=0;for(let n=T;n<C;n+=u){let a=x+n*r[1];for(let n=d;n<m;n+=h){let i=a+n*r[2];for(let n=o;n<c;n+=p){let a=e[i+n*r[3]+t];if("max"===s&&a>w?w=a:"avg"===s&&(I+=a,N++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}v[g+t]="avg"===s?I/N:w}}}}return x}function vz(e,t,n,r,a){let s=i7.isSliceContinous(r,t,n),i=rg.sizeFromShape(n),o=rg.computeStrides(r);if(s){let n=i7.computeFlatOffset(t,o);return"string"===a?e.slice(n,n+i):e.subarray(n,n+i)}let l="string"===a?iI.fromUint8ToStringArray(e):e,u=sQ(r,a,l),h=sQ(n,a);for(let e=0;e<h.size;++e){let n=h.indexToLoc(e),r=n.map((e,n)=>e+t[n]);h.set(u.get(...r),...n)}return"string"===a?iI.fromStringArrayToUint8(h.values):h.values}function vP(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:i}=r;x8(a,"slice");let[o,l]=i7.parseSliceParams(a,s,i);i7.assertParamsValid(a,o,l);let u=vz(n.data.get(a.dataId).values,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,u)}function vB(e,t,n,r,a){let s=rg.sizeFromShape(r),i=rg.makeZerosTypedArray(a,n);for(let n=0;n<e.length;n++){let r=e[n];if(r<0)throw Error("Input x must be non-negative!");r>=a||(s>0?i[r]+=t[n]:i[r]+=1)}return i}function vW(e,t,n,r=!1){let a=e.shape[0],s=e.shape[1],i=sQ([a,n],t.dtype);for(let o=0;o<a;o++)for(let a=0;a<s;a++){let s=e.get(o,a);if(s<0)throw Error("Input x must be non-negative!");s>=n||(r?i.set(1,o,s):t.size>0?i.set(i.get(o,s)+t.get(o,a),o,s):i.set(i.get(o,s)+1,o,s))}return i}let vU=vh(e=>Math.ceil(e)),vV=vt(ti,vU),vG=ve(to,(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e);function vH(e,t,n,r){let a=rg.getArrayFromDType(n,rg.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach(e=>{let n=rg.sizeFromShape(e.shape);a.set(e.vals,t),t+=n})}else{let r=0;e.forEach(e=>{let s="string"===n?iI.fromUint8ToStringArray(e.vals):e.vals,i=0;for(let n=0;n<e.shape[0];++n){let o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[o+t]=s[i++]}r+=e.shape[1]})}return a}function vq(e){let{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.imag,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}function vj(e){let{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=rg.parseAxisParam(a,t[0].shape)[0],i=t.map(e=>e.shape);iI.assertParamsConsistent(i,s);let o=iI.computeOutShape(t.map(e=>e.shape),s);if(0===rg.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>rg.sizeFromShape(e.shape)>0);if(1===l.length)return vr({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){let e=l.map(e=>vg({inputs:{input:e},backend:n})),t=l.map(e=>vq({inputs:{input:e},backend:n})),r=vj({inputs:e,backend:n,attrs:{axis:s}}),a=vj({inputs:t,backend:n,attrs:{axis:s}}),i=vf({inputs:{real:r,imag:a},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}let u=l.map(e=>{let t=rg.sizeFromShape(e.shape.slice(s));return vI({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),h=u.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));o=iI.computeOutShape(u.map(e=>e.shape),1);let p=1===u[0].shape[0],d=vH(h,o,t[0].dtype,p),c=iI.computeOutShape(l.map(e=>e.shape),s),f=n.makeTensorInfo(c,t[0].dtype,d);return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}function vK(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:h}=r;x8([a,s],"conv2d");let p=iI.convertConv2DDataFormat(l),d=iI.computeConv2DInfo(a.shape,s.shape,i,u,o,h,!1,p),c=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,b=d.padInfo.top,x="channelsLast"===d.dataFormat,v=new an(d.outShape,a.dtype),k=rg.computeStrides(a.shape),w=rg.computeStrides(s.shape),I=k[0],S=x?k[1]:k[2],N=x?k[2]:1,T=x?1:k[1],C=v.strides[0],$=x?v.strides[1]:v.strides[2],E=x?v.strides[2]:1,A=x?1:v.strides[1],R=n.data.get(a.dataId).values,F=n.data.get(s.dataId).values,D=v.values;for(let e=0;e<d.batchSize;++e){let t=e*I,n=e*C;for(let e=0;e<d.outHeight;++e){let r=n+e*$,a=e*d.strideHeight-b;for(let e=0;e<c;++e){let n=a+e*m;if(n<0||n>=d.inHeight)continue;let s=e*w[0],i=t+n*S;for(let e=0;e<d.outWidth;++e){let t=r+e*E,n=e*d.strideWidth-y;for(let e=0;e<f;++e){let r=n+e*g;if(r<0||r>=d.inWidth)continue;let a=s+e*w[1],o=i+r*N,l=a;for(let e=0;e<d.inChannels;++e){let n=R[o+e*T];for(let e=0;e<d.outChannels;++e)D[t+e*A]+=n*F[l+e];l+=d.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,D)}let vX=ve("Cos",e=>Math.cos(e)),vY=ve(ty,e=>Math.cosh(e));function vZ(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=r;x8([a,s],"depthwiseConv2DNative");let h=rg.computeStrides(a.shape),p=rg.computeStrides(s.shape),d=l;null==d&&(d=[1,1]),rg.assert(iI.eitherStridesOrDilationsAreOne(i,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);let c=iI.computeConv2DInfo(a.shape,s.shape,i,d,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=c,x=b.left,v=b.top,k=c.outChannels/c.inChannels,w=new an(c.outShape,a.dtype),I=n.data.get(a.dataId).values,S=n.data.get(s.dataId).values,N=w.values;for(let e=0;e<c.batchSize;++e){let t=e*h[0],n=e*w.strides[0];for(let e=0;e<c.outHeight;++e){let r=n+e*w.strides[1],a=e*c.strideHeight-v;for(let e=0;e<f;++e){let n=a+e*g;if(n<0||n>=c.inHeight)continue;let s=e*p[0],i=t+n*h[1];for(let e=0;e<c.outWidth;++e){let t=r+e*w.strides[2],n=e*c.strideWidth-x;for(let e=0;e<m;++e){let r=n+e*y;if(r<0||r>=c.inWidth)continue;let a=s+e*p[1],o=i+r*c.inChannels,l=t,u=a;for(let e=0;e<c.inChannels;++e){let t=I[o+e];for(let e=0;e<k;++e)N[l+e]+=t*S[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}let vJ=vs((e,t)=>e*t),vQ=vx(ni,vJ,vv((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})));function v0(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a;x8(s,"sum");let l=(t="bool"===s.dtype?vb({inputs:{x:s},backend:r,attrs:{dtype:"int32"}}):vr({inputs:{x:s},backend:r})).shape.length,u=rg.parseAxisParam(i,t.shape),h=iI.getAxesPermutation(u,l),p=u,d=t;null!=h&&(d=vE({inputs:{x:t},backend:r,attrs:{perm:h}}),p=iI.getInnerMostAxes(p.length,l)),iI.assertAxesAreInnerMostDims("sum",p,d.shape.length);let[c,f]=iI.computeOutAndReduceShapes(d.shape,p),m=vm(r,c,iI.upcastType(d.dtype,"int32")),g=rg.sizeFromShape(f),y=r.data.get(m.dataId).values,b=r.data.get(d.dataId).values;for(let e=0;e<y.length;++e){let t=e*g,n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){let e=iI.expandShapeToKeepDim(m.shape,u),t=m;m=vI({inputs:{x:m},backend:r,attrs:{shape:e}}),r.disposeIntermediateTensorInfo(t)}return r.disposeIntermediateTensorInfo(t),null!=h&&r.disposeIntermediateTensorInfo(d),m}let v1=vs((e,t)=>+(e===t)),v2=vx(tD,v1,null,"bool"),v3=iI.ERF_P,v4=iI.ERF_A1,v6=iI.ERF_A2,v5=iI.ERF_A3,v8=iI.ERF_A4,v7=iI.ERF_A5,v9=ve("Erf",e=>{let t=Math.sign(e),n=Math.abs(e),r=1/(1+v3*n);return t*(1-((((v7*r+v8)*r+v5)*r+v6)*r+v4)*r*Math.exp(-n*n))}),ke=vh(e=>Math.exp(e)),kt=vt("Exp",ke,"float32");function kn(e){let{inputs:t,backend:n,attrs:r}=e,{input:a}=t,{dim:s}=r,i=a.shape.length,o=a.shape.slice(),l=s;return s<0&&(rg.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+s+1),o.splice(l,0,1),vI({inputs:{x:a},backend:n,attrs:{shape:o}})}let kr=vh(e=>Math.expm1(e)),ka=vt(tO,kr),ks=vx(tA,vs((e,t)=>e/t)),ki={kernelName:tA,backendName:"cpu",kernelFunc:ks},ko=vs((e,t)=>e-t),kl=vx("Sub",ko,vv((e,t,n,r)=>({real:e-n,imag:t-r})));function ku(e,t,n){let r=e.shape,a=r[0],s=r[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[a,s],h=rg.sizeFromShape(u),p=rg.getTypedArrayFromDType("float32",h),d=rg.getTypedArrayFromDType("float32",h);for(let e=0;e<a;e++){let r=vP({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,s]}}),a=vP({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,s]}}),i=vf({inputs:{real:r,imag:a},backend:n}),{real:u,imag:h}=function(e,t,n){var r;let a=rg.sizeFromShape(e.shape),s=n.data.get(e.dataId),i=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if(((r=a)&r-1)==0){let r=function e(t,n,r,a,s){if(1===r)return{real:t,imag:n};let i=iI.mergeRealAndImagArrays(t,n),o=r/2,l=iI.complexWithEvenIndex(i),u=l.real,h=l.imag,p=[u.length],d=s.makeTensorInfo(p,"float32",u),c=s.makeTensorInfo(p,"float32",h),f=vf({inputs:{real:d,imag:c},backend:s}),m=iI.complexWithOddIndex(i),g=m.real,y=m.imag,b=[g.length],x=s.makeTensorInfo(b,"float32",g),v=s.makeTensorInfo(b,"float32",y),k=vf({inputs:{real:x,imag:v},backend:s}),w=e(u,h,o,a,s),I=w.real,S=w.imag,N=[I.length],T=s.makeTensorInfo(N,"float32",I),C=s.makeTensorInfo(N,"float32",S),$=vf({inputs:{real:T,imag:C},backend:s}),E=e(g,y,o,a,s),A=E.real,R=E.imag,F=[A.length],D=s.makeTensorInfo(F,"float32",A),_=s.makeTensorInfo(F,"float32",R),O=vf({inputs:{real:D,imag:_},backend:s}),M=iI.exponents(r,a),L=[M.real.length],z=s.makeTensorInfo(L,"float32",M.real),P=s.makeTensorInfo(L,"float32",M.imag),B=vf({inputs:{real:z,imag:P},backend:s}),W=vQ({inputs:{a:B,b:O},backend:s}),U=vw({inputs:{a:$,b:W},backend:s}),V=kl({inputs:{a:$,b:W},backend:s}),G=vg({inputs:{input:U},backend:s}),H=vg({inputs:{input:V},backend:s}),q=vq({inputs:{input:U},backend:s}),j=vq({inputs:{input:V},backend:s}),K=vj({inputs:[G,H],backend:s,attrs:{axis:0}}),X=vj({inputs:[q,j],backend:s,attrs:{axis:0}}),Y=s.data.get(K.dataId).values,Z=s.data.get(X.dataId).values;return s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(c),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(v),s.disposeIntermediateTensorInfo(k),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo($),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(X),{real:Y,imag:Z}}(i,o,a,t,n),s=[e.shape[0],e.shape[1]];if(t){let e=n.makeTensorInfo(s,"float32",r.real),t=n.makeTensorInfo(s,"float32",r.imag),i=n.makeTensorInfo([],"float32",rg.createScalarValue(a,"float32")),o=vr({inputs:{x:i},backend:n}),l=ki.kernelFunc({inputs:{a:e,b:i},backend:n}),u=ki.kernelFunc({inputs:{a:t,b:o},backend:n}),h=n.data.get(l.dataId).values,p=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:h,imag:p}}return r}{let e=function(e,t,n){let r=new Float32Array(2*t);for(let a=0;a<t;a++){let s=0,i=0;for(let r=0;r<t;r++){let o=iI.exponent(a*r,t,n),l=iI.getComplexWithIndex(e,r);s+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(s/=t,i/=t),iI.assignToTypedArray(r,s,i,a)}return r}(iI.mergeRealAndImagArrays(i,o),a,t);return iI.splitRealAndImagArrays(e)}}(i,t,n),c=iI.mergeRealAndImagArrays(u,h);for(let t=0;t<s;t++){let n=iI.getComplexWithIndex(c,t);p[e*s+t]=n.real,d[e*s+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i)}let c=n.makeTensorInfo(u,"float32",p),f=n.makeTensorInfo(u,"float32",d),m=vf({inputs:{real:c,imag:f},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),m}function kh(e){var t,n,r;let{backend:a,attrs:s}=e,{shape:i,value:o,dtype:l}=s,u=l||rg.inferDtype(o),h=rg.getArrayFromDType(u,rg.sizeFromShape(i));return t=h,n=o,r=0,t.fill(n),a.makeTensorInfo(i,u,h)}let kp=vh(e=>Math.floor(e)),kd=vt(tz,kp),kc=vx(tP,vs((e,t)=>Math.floor(e/t)),null,"int32");function kf(e,t,n,r,a,s,i,o,l){let u=sQ([r,s],n);for(let n=0;n<r;n++){let r=[],h=0;for(let t=0;t<a;t++){let s=e[n*a+t];h+=s*i[t],r.push(s)}if(h<0||h>=l/s)throw Error(`Invalid indices: ${r} does not index into ${o}`);for(let e=0;e<s;e++)u.values[n*s+e]=t.get(...t.indexToLoc(h*s+e))}return u}function km(e,t,n){let r=sQ(n,e.dtype);for(let n=0;n<r.size;++n){let a=r.indexToLoc(n).slice(),s=a[0],i=a[2],o=t.locToIndex([s,i]);a[2]=t.values[o];let l=e.locToIndex(a);0<=l&&l<e.values.length&&(r.values[n]=e.values[l])}return r}let kg=vs((e,t)=>+(e>t)),ky=vx(tV,kg,null,"bool"),kb=vs((e,t)=>+(e>=t)),kx=vx(tG,kb,null,"bool"),kv=ve(tK,e=>+!!Number.isFinite(e),"bool"),kk=ve(tX,e=>+(Math.abs(e)===1/0),"bool"),kw=ve(tY,e=>+!!Number.isNaN(e),"bool"),kI=vs((e,t)=>+(e<t)),kS=vx(tJ,kI,null,"bool"),kN=vs((e,t)=>+(e<=t)),kT=vx(tQ,kN,null,"bool");function kC(e,t,n){let r=(t-e)/(n-1),a=rg.makeZerosTypedArray(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+r;return a}let k$=vh(e=>Math.log(e)),kE=vt("Log",k$),kA=ve(t1,e=>Math.log1p(e)),kR=vx(t2,vs((e,t)=>e&&t),null,"bool"),kF=ve(t3,e=>+!e,"bool"),kD=vx(t4,vs((e,t)=>e||t),null,"bool");function k_(e,t,n,r){let a=rg.getTypedArrayFromDType(r,rg.sizeFromShape(n));for(let n=0;n<a.length;++n){let r=n*t,s=e[r];for(let n=0;n<t;++n){let t=e[r+n];(Number.isNaN(t)||t>s)&&(s=t)}a[n]=s}return a}function kO(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:s,keepDims:i}=r,o=a.shape,l=o.length,u=rg.parseAxisParam(s,o),h=u,p=iI.getAxesPermutation(h,l),d=n.data.get(a.dataId).values;if(null!=p){let e=Array(l);for(let t=0;t<e.length;t++)e[t]=o[p[t]];d=v$(d,o,a.dtype,p,e),h=iI.getInnerMostAxes(h.length,l),o=e}x8(a,"max"),iI.assertAxesAreInnerMostDims("max",h,l);let[c,f]=iI.computeOutAndReduceShapes(o,h),m=k_(d,rg.sizeFromShape(f),c,a.dtype),g=n.write(m,c,a.dtype),y=c;return i&&(y=iI.expandShapeToKeepDim(c,u)),{dataId:g,shape:y,dtype:a.dtype}}let kM=vs((e,t)=>Math.max(e,t)),kL=vx(t5,kM),kz=vs((e,t)=>Math.min(e,t)),kP=vx(nr,kz),kB=vx("Mod",vs((e,t)=>{let n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}));function kW(e){let{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:s}=r,i=a.shape.length,o=s;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);let l=rg.parseAxisParam([o],a.shape),u=kO({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),h=iI.expandShapeToKeepDim(u.shape,l),p=vI({inputs:{x:u},backend:n,attrs:{shape:h}}),d=kl({inputs:{a:a,b:p},backend:n}),c=kt({inputs:{x:d},backend:n}),f=v0({inputs:{x:c},backend:n,attrs:{axis:l,keepDims:!1}}),m=vI({inputs:{x:f},backend:n,attrs:{shape:h}}),g=ks({inputs:{a:c,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function kU(e,t,n){return vJ([],t,rg.createScalarValue(-1,n),e,n)}let kV=dZ.nonMaxSuppressionV3Impl,kG=dZ.nonMaxSuppressionV4Impl,kH=dZ.nonMaxSuppressionV5Impl,kq=vs((e,t)=>+(e!==t)),kj=vx(no,kq,null,"bool");function kK(e){let{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw Error("zerosLike is not supported for string tensors");if("complex64"!==r.dtype)return kh({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}});{let e=vg({inputs:{input:r},backend:n}),t=kK({inputs:{x:e},backend:n}),a=vq({inputs:{input:r},backend:n}),s=kK({inputs:{x:a},backend:n}),i=vf({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),i}}function kX(e){let{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return kn({inputs:{input:t[0]},backend:n,attrs:{dim:a}});let s=t[0].shape,i=t[0].dtype;t.forEach(e=>{rg.assertShapesMatch(s,e.shape,"All tensors passed to stack must have matching shapes"),rg.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=vj({inputs:t.map(e=>{let t=kn({inputs:{input:e},backend:n,attrs:{dim:a}});return o.push(t),t}),backend:n,attrs:{axis:a}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}let kY={kernelName:nf,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:i}=r;x8(a,"pad");let o=s.map((e,t)=>e[0]+a.shape[t]+e[1]),l=s.map(e=>e[0]),u=n.data.get(a.dataId).values,h=rg.sizeFromShape(a.shape),p=a.shape.length,d=rg.computeStrides(a.shape),c=rg.sizeFromShape(o),f=o.length,m=rg.computeStrides(o),g=rg.getTypedArrayFromDType(a.dtype,c);0!==i&&g.fill(i);for(let e=0;e<h;e++){let t=rg.indexToLoc(e,p,d).map((e,t)=>e+l[t]);g[rg.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(g,o,a.dtype),shape:o,dtype:a.dtype}}},kZ=vx("Pow",vs((e,t)=>Math.pow(e,t)));function kJ(e,t,n,r){let[a,s]=iI.computeOutAndReduceShapes(e,r),i=ah(t,"int32"),o=rg.makeZerosTypedArray(rg.sizeFromShape(a),i),l=rg.sizeFromShape(s);for(let e=0;e<o.length;++e){let t=e*l,r=1;for(let e=0;e<l;++e)r*=n[t+e];o[e]=r}return{outVals:o,outShape:a,outDtype:i}}function kQ(e,t){let n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function k0(e,t,n,r,a,s,i,o){if(0===e.length)throw Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw Error("Split tensors must not be scalars");let l=t[0][0]-1;if(s.forEach((e,t)=>{if(e<0||e>=l){let n=rg.indexToLoc(t,i.length,rg.computeStrides(i)).join(",");throw Error(`indices[${n}] = ${e} is not in [0, ${l})`)}}),0===r.length)throw Error("params.rank must be nonzero");let{outSplits:u,valueSlices:h,numValues:p}=function(e,t,n,r){let a=[],s=0,i=Array(t.length-1+n.length).fill(null).map(()=>[0]);for(let e=0;e<n.length;++e){let t=n[e],a=e===n.length-1?r:n[e+1].length;if(0===t.length)throw Error("Ragged splits may not be empty");if(t[0]<0)throw Error("Ragged splits must be non-negative");if(t[t.length-1]>a)throw Error("Ragged splits must not point past values");for(let e=1;e<t.length;++e)if(t[e-1]>t[e])throw Error("Ragged splits must be sorted in ascending order")}let o=1;for(let e=0;e<t.length-1;++e){o*=t[e];let n=t[e+1];for(let t=1;t<o+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],l=e[r]+1;for(let e=0;e<n.length;++e){let r=n[e],a=e+t.length-1;if(a>=0){let e=i[a],t=e[e.length-1]-r[o];for(let e=o;e<l;++e)i[a].push(r[e+1]+t)}o=r[o],l=r[l]}l!==o&&(a.push([o,l]),s+=l-o)}return{outSplits:i,valueSlices:a,numValues:s}}(s,i,e,r[0]),d=function(e){let t=[];for(let n=0;n<e.length;++n){let r=e[n].length,a=rg.getArrayFromDType("int32",r);t.push(a),e[n].forEach((e,t)=>a[t]=e)}return t}(u),c=function(e,t,n,r,a){let s=t.slice();s[0]=a;let i=rg.getArrayFromDType(n,rg.sizeFromShape(s)),o=e.length,l=0===o?0:o/t[0];return!function(e,t,n,r,a,s){let i=kQ(t,2)[1],o=kQ(s,2)[1],l=0;for(let t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)a[l*o+t]=e[n*i+t];++l}}(e,t,r,l,i,s),[i,s]}(n,r,a,h,p);return[d,c[0],c[1]]}var k1=iI.RowPartitionType;class k2{constructor(e,t,n,r,a,s,i,o,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=a,this.defaultValue=s,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=iI.getRowPartitionTypesHelper(u),this.raggedRank=iI.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===k1.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===k1.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case k1.VALUE_ROWIDS:return k2.getMaxWidthValueRowID(t);case k1.ROW_SPLITS:return k2.getMaxWidthRowSplit(t);default:throw Error(`Cannot handle partition type ${k1[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){let t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){let t=e.length;if(0===t)return 0;let n=0,r=e[0],a=0;for(let s=1;s<t;++s){let t=e[s];t!==r&&(r=t,a=Math.max(s-n,a),n=s)}return Math.max(t-n,a)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return k4(e,n)}calculateOutputSize(e){let t=this.valuesShape,n=this.defaultValueShape;iI.validateDefaultValueShape(n,t);let r=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=iI.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,t,n){let r=Math.min(e,n),a=[],s=0;for(let e=0;e<r;++e,s+=t)a.push(s);for(let t=r;t<e;++t)a.push(-1);return rg.assert(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,n,r){let a=e.length,s=[];for(let i=0;i<a-1;++i){let a=e[i+1]-e[i],o=Math.min(r,a),l=t[i];-1===l&&(o=0);for(let e=0;e<o;++e)s.push(l),l+=n;for(let e=0;e<a-o;++e)s.push(-1)}if(a>0&&s.length!==e[a-1])throw Error("Invalid row split size.");return s}calculateOutputIndexValueRowID(e,t,n,r){let a=e.length,s=[];if(0===a)return[];let i=0,o=e[0];if(o>=t.length)throw Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];s.push(l);for(let u=1;u<a;++u){let a=e[u];if(a===o)l>=0&&(++i<r?l+=n:l=-1);else{if(i=0,o=a,a>=t.length)throw Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);l=t[a]}s.push(l)}if(s.length!==e.length)throw Error("Invalid row ids.");return s}calculateOutputIndex(e,t,n,r){let a=this.getRowPartitionTensor(e),s=this.getRowPartitionTypeByDimension(e);switch(s){case k1.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,n,r);case k1.ROW_SPLITS:if(a.length-1>t.length)throw Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,n,r);default:throw Error(`Unsupported partition type: ${k1[s]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case k1.FIRST_DIM_SIZE:return e[0];case k1.VALUE_ROWIDS:throw Error("Cannot handle VALUE_ROWIDS in first dimension.");case k1.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw Error(`Cannot handle type ${k1[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];let r=k4(t,!1),a=rg.getArrayFromDType(this.valuesDType,rg.sizeFromShape(r));if(n[0]*t[0]>0){let s=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)s=this.calculateOutputIndex(e-1,s,n[e],t[e]);this.setOutput(this.raggedRank,s,a,r)}return[r,a]}setOutput(e,t,n,r){if(0===n.length)return;let a=this.values,s=r.slice();s=s.slice(e+1);let i=rg.sizeFromShape(s),o=t.length,l=this.defaultValue;if(l.length!==i&&1!==l.length){let e=this.defaultValueShape;ix(()=>{l=lx(im(l,e),s).dataSync()})}let u=0,h=0,p=0;for(let e=0;e<=o;++e){let r=e<o?t[e]:-1;if(r===p){++p;continue}if(h<p){let e=a.subarray(u*i);k3(n.subarray(h*i),e,(p-h)*i)}if(e>=o&&(r=Math.floor(n.length/i)),r>p)if(1===this.defaultValue.length)n.subarray(p*i,r*i).fill(this.defaultValue[0]),p=r;else for(;r>p;)k3(n.slice(p*i),l,i),++p;r<0?(u=e+1,h=p):(u=e,p=(h=p)+1)}}}function k3(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function k4(e,t){let n=[];for(let r of e){if(r<0){if(!t)throw Error(`Dimension ${r} must be >= 0`);if(r<-1)throw Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function k6(e,t,n,r,a,s,i,o,l,u){return new k2(e,t,n,r,a,s,i,o,l,u).compute()}function k5(e,t,n,r){let a=e===t,s=e<t&&n<0,i=t<e&&n>1;if(a||s||i)return rg.makeZerosTypedArray(0,r);let o=Math.abs(Math.ceil((t-e)/n)),l=rg.makeZerosTypedArray(o,r);t<e&&1===n&&(n=-1),l[0]=e;for(let e=1;e<l.length;e++)l[e]=l[e-1]+n;return l}let k8=ve(nk,e=>1/e),k7=ve(nA,e=>{let t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),k9=vh(e=>1/Math.sqrt(e)),we=vt(nR,k9);function wt(e,t,n,r,a,s,i,o,l,u){let h=e.values,p=t.values;if(0===r)return sQ(n,t.dtype);let d=sQ([r/a,a],t.dtype);"string"==typeof l||"number"==typeof l?d.values.fill(l):"boolean"==typeof l&&d.values.fill(+l);for(let e=0;e<s;e++){let s=[],l=0;for(let t=0;t<i;t++){let n=h[e*i+t];s.push(n),l+=n*o[t]}if(l<0||l>=r/a)throw Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<a;n++)u?d.values[l*a+n]+=p[e*a+n]:d.values[l*a+n]=0===t.rank?p[0]:p[e*a+n]}return d}let wn=iI.SELU_SCALEALPHA,wr=iI.SELU_SCALE,wa=ve(nO,e=>e>=0?wr*e:wn*(Math.exp(e)-1)),ws=ve(nz,e=>e<0?-1:+(e>0)),wi=ve("Sin",e=>Math.sin(e)),wo=ve(nL,e=>Math.sinh(e)),wl=Math.log(11920928955078125e-23)+2,wu=ve(nB,e=>{let t,n=Math.exp(e);return e<wl?n:e>-wl?e:Math.log(1+n)});function wh(e,t,n,r,a,s,i){let o=t[0],l=s[0],u=Array(l),h=Array(o),p=t[1];if(0===l){if(0!==o)throw Error(iI.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[rg.getArrayFromDType(n,0),[0,p],rg.getArrayFromDType(a,0),u,h]}let d=!0,c=0,f=Array(l).fill(0);for(let t=0;t<o;++t){let n=e[t*p];if(n<0)throw Error(iI.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw Error(iI.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],d=d&&n>=c,c=n}let m=!0;for(let e=0;e<l;++e){let t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){for(let e=0;e<o;++e)h[e]=e;return[e,[o,p],r,u,h]}{let t=f[l-1],s=rg.getArrayFromDType(n,t*p),d=rg.getArrayFromDType(a,t),c=Array(l).fill(0);for(let t=0;t<o;++t){let n=e[t*p],a=c[n],i=(0===n?0:f[n-1])+a;c[n]++;for(let n=0;n<p;++n)s[i*p+n]=e[t*p+n];d[i]=r[t],h[t]=i}for(let e=0;e<l;++e)if(0===c[e]){let t=0===e?0:f[e-1];s[t*p+0]=e;for(let e=1;e<p;++e)s[t*p+e]=0;d[t]=i}return[s,[t,p],d,u,h]}}function wp(e,t,n,r,a){let s=rg.sizeFromShape(r),i=t[0],o=a.length,l=[],u=1,h=-1;for(let e=0;e<o;++e){let t=a[e];if(-1===t){if(-1!==h)throw Error(iI.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(h,e));h=e,l.push(1)}else{if(t<0)throw Error(iI.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==h){if(u<=0)throw Error(iI.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let e=Math.trunc(s/u);if(u*e!==s)throw Error(iI.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[h]=e}if(rg.sizeFromShape(l)!==s)throw Error(iI.getSparseReshapeInputOutputMismatchErrorMessage(r,l));let p=r.length,d=[];if(p>0){d[p-1]=1;for(let e=p-2;e>=0;--e)d[e]=d[e+1]*r[e+1]}let c=[];if(o>0){c[o-1]=1;for(let e=o-2;e>=0;--e)c[e]=c[e+1]*l[e+1]}let f=rg.getArrayFromDType(n,i*o);for(let t=0;t<i;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*d[r];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/c[e]),n%=c[e]}return[f,[i,o],l]}function wd(e,t,n,r,a,s=!1,i=0){let o=r.length,l=[t[0],e.length/t[0]],u=l[1],h=o>0?a[o-1]+1:0;if(h<0)throw Error(iI.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let p=t.slice();p[0]=h;let d=p.reduce((e,t)=>e*t,1),c=rg.getArrayFromDType(n,d);if(0===o)return h>0&&c.fill(i),[c,p];if(h<=0)throw Error(iI.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=a[0];for(;;){let t=0;if(m<o){if(y===(t=a[m])){++m;continue}if(y>=t)throw Error(iI.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=h)throw Error(iI.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,h));y>g&&c.fill(i,g*u,y*u);for(let t=f;t<m;++t){let n=r[t];if(n<0||n>=l[0])throw Error(iI.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],l[0]));for(let t=0;t<u;t++)c[y*u+t]+=e[n*u+t]}if(s)for(let e=0;e<u;e++)c[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<h&&c.fill(i,g*u,h*u),[c,p]}let wc=vh(e=>Math.sqrt(e)),wf=ve(nW,e=>Math.sqrt(e)),wm=vs((e,t)=>{let n=e-t;return n*n}),wg=vx(nY,wm),wy=ve(rt,(e,t)=>isNaN(e)?NaN:e>0?1:t.alpha);function wb(e,t,n,r){let a=sQ(e,t.dtype);for(let e=0;e<a.size;e++){let s=a.indexToLoc(e),i=Array(s.length);for(let e=0;e<i.length;e++)i[e]=s[e]*n[e]+r[e];a.set(t.get(...i),...s)}return a}class wx{constructor(e,t,n,r,a,s){this.separator=rg.encodeString(e),this.nGramWidths=t,this.leftPad=rg.encodeString(n),this.rightPad=rg.encodeString(r),this.padWidth=a,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){return Math.max(0,e+2*this.getPadWidth(t)-t+1)}createNGrams(e,t,n,r,a,s){for(let i=0;i<a;++i){let o,l=this.getPadWidth(s),u=Math.max(0,l-i),h=Math.max(0,l-(a-(i+1))),p=s-(u+h),d=t+(u>0?0:i-l);o=0+u*this.leftPad.length;for(let t=0;t<p;++t)o+=e[d+t].length;o+=h*this.rightPad.length,o+=(u+h+p-1)*this.separator.length,n[r+i]=new Uint8Array(o);let c=n[r+i],f=0,m=e=>e.forEach(e=>c[f++]=e);for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<p-1;++t)m(e[d+t]),m(this.separator);if(p>0){m(e[d+p-1]);for(let e=0;e<h;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<h-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){let n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw Error(`First split value must be 0, got ${e}`);for(let a=1;a<r;++a){let r=t[a]>=e;if(!(r=r&&t[a]<=n))throw Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw Error(`Last split value must be data size. Expected ${n}, got ${e}`)}let a=r-1,s=rg.getArrayFromDType("int32",r);if(0===n||0===r){let e=Array(n);for(let e=0;e<=a;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=a;++e){let n=t[e]-t[e-1],r=0;this.nGramWidths.forEach(e=>{r+=this.getNumNGrams(n,e)}),this.preserveShort&&n>0&&0===r&&(r=1),s[e]=s[e-1]+r}let i=Array(s[a]);for(let n=0;n<a;++n){let r=t[n],a=s[n];if(this.nGramWidths.forEach(s=>{let o=t[n+1]-t[n],l=this.getNumNGrams(o,s);this.createNGrams(e,r,i,a,l,s),a+=l}),this.preserveShort&&a===s[n]){let s=t[n+1]-t[n];if(0===s)continue;let o=s+2*this.padWidth;this.createNGrams(e,r,i,a,1,o)}}return[i,s]}}function wv(e,t,n,r,a,s,i,o){return new wx(n,r,a,s,i,o).compute(e,t)}function wk(e,t,n){let r=e.length,a=[],s=0,i=0,o=Array(r);for(let l=0;l<r;++l){let r=a.length;!function(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){let a=t[0],s=e.indexOf(a);for(;-1!==s;){let t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}n&&0===e.length||r.push(e);return}let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){let t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}}(e[l],t,n,a);let u=a.length-r;o[l]=u,s+=u,i=Math.max(i,u)}let l=rg.getArrayFromDType("int32",2*s),u=Array(s),h=[r,i],p=0;for(let e=0;e<r;++e)for(let t=0;t<o[e];++t)l[2*p]=e,l[2*p+1]=t,u[p]=a[p],++p;return[l,u,h]}function ww(e,t){let n=rg.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=rg.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}let wI=ve("Tan",e=>Math.tan(e)),wS=ve(n2,e=>Math.tanh(e));function wN(e,t){let n=Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];let r=sQ(n,e.dtype);for(let t=0;t<r.values.length;++t){let n=r.indexToLoc(t),a=Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];let s=e.locToIndex(a);r.values[t]=e.values[s]}return r}let wT=(e,t)=>{let n=t.value-e.value;return 0===n?e.index-t.index:n};function wC(e,t,n,r,a){let s=t[t.length-1],[i,o]=[e.length/s,s],l=rg.getTypedArrayFromDType(n,i*r),u=rg.getTypedArrayFromDType("int32",i*r);for(let t=0;t<i;t++){let n=t*o,s=e.subarray(n,n+o),i=Array(s.length);s.forEach((e,t)=>i[t]={value:e,index:t}),r<i.length&&(!function e(t,n,r=0,a=t.length-1){for(;a>r;){if(a-r>600){let s=a-r+1,i=n-r+1,o=Math.log(s),l=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*l*(s-l)/s)*Math.sign(i-s/2),h=Math.max(r,Math.floor(n-i*l/s+u)),p=Math.min(a,Math.floor(n+(s-i)*l/s+u));e(t,n,h,p)}let s=t[n],i=r,o=a;for(rg.swap(t,r,n),wT(t[a],s)>0&&rg.swap(t,r,a);i<o;){for(rg.swap(t,i,o),i++,o--;0>wT(t[i],s);)i+=1;for(;wT(t[o],s)>0;)o-=1}0===wT(t[r],s)?rg.swap(t,r,o):(o+=1,rg.swap(t,o,a)),o<=n&&(r=o+1),n<=o&&(a=o-1)}}(i,r),i=i.slice(0,r)),a&&i.sort(wT);let h=t*r,p=l.subarray(h,h+r),d=u.subarray(h,h+r);for(let e=0;e<r;e++)p[e]=i[e].value,d[e]=i[e].index}let h=t.slice();return h[h.length-1]=r,[sQ(h,n,l),sQ(h,"int32",u)]}function w$(e,t,n){switch(n){case"reflect":var r,a,s,i,o,l=e,u=t;let h=l;if(h<0)if(u<=1)h=0;else{let e=2*u;h<e&&(h=e*Math.trunc(-h/e)+h),h=h<-u?h+e:-h-1}else if(h>u-1)if(u<=1)h=0;else{let e=2*u;(h-=e*Math.trunc(h/e))>=u&&(h=e-h-1)}return rg.clamp(0,h,u-1);case"wrap":let p;return r=e,a=t,(p=r)<0?a<=1?p=0:p+=a*(Math.trunc(-p/(a-1))+1):p>a-1&&(a<=1?p=0:p-=a*Math.trunc(p/(a-1))),rg.clamp(0,p,a-1);case"nearest":return s=e,i=t,rg.clamp(0,s,i-1);default:return o=0,e}}function wE(e,t,n,r,a,s,i,o,l,u,h){return 0<=o&&o<t&&0<=l&&l<n?e[i*r+o*a+l*s+u]:h}function wA(e,t,n,r){let a=rg.parseAxisParam(t,n)[0],s=[1,n[0],1];for(let e=0;e<a;e++)s[0]*=n[e];s[1]=n[a];for(let e=a+1;e<n.length;e++)s[2]*=n[e];let i={},o=new Int32Array(n[a]),l=new an(s,r,e),u=[],h=1===s[0]&&1===s[2];for(let t=0;t<n[a];t++){let n;if(h)n=e[t].toString();else{let e=[];for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{let e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}let p=s.slice();p[1]=Object.keys(i).length;let d=new an(p,r);u.forEach((e,t)=>{for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)d.set(l.get(n,e,r),n,t,r)});let c=n.slice();return c[a]=p[1],{outputValues:d.values,outputShape:c,indices:o}}for(let e of[{kernelName:ra,backendName:"cpu",kernelFunc:function(e){let t,n,r,{inputs:a,backend:s,attrs:i}=e,{a:o,b:l,bias:u,preluActivationWeights:h}=a,{transposeA:p,transposeB:d,activation:c,leakyreluAlpha:f}=i,m=[];for(let e of(t=vS({inputs:{a:o,b:l},attrs:{transposeA:p,transposeB:d},backend:s}),u&&(n=vw({inputs:{a:t,b:u},backend:s}),m.push(t),t=n),c&&(r=vc(s,t,c,h,f),m.push(t),t=r),m))s.disposeIntermediateTensorInfo(e);return t}},{kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{let{x:t}=e.inputs,n=e.backend;x8(t,"abs");let r=new Float32Array(rg.sizeFromShape(t.shape));return r=vN(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},{kernelName:eZ,backendName:"cpu",kernelFunc:vT},{kernelName:eJ,backendName:"cpu",kernelFunc:vC},{kernelName:"Add",backendName:"cpu",kernelFunc:vw},{kernelName:eQ,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e;x8(t,"addN");let r=t.map(e=>n.data.get(e.dataId).values),a=sQ(t[0].shape,t[0].dtype),s=a.values;for(let e=0;e<t.length;e++){let t=r[e];for(let e=0;e<s.length;e++)s[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:"All",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;x8(a,"all");let o=rg.parseAxisParam(s,a.shape),l=o,u=iI.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=vE({inputs:{x:a},backend:n,attrs:{perm:u}}),l=iI.getInnerMostAxes(l.length,a.shape.length)),iI.assertAxesAreInnerMostDims("all",l,h.shape.length);let[p,d]=iI.computeOutAndReduceShapes(h.shape,l),c=rg.sizeFromShape(d),f=rg.makeZerosTypedArray(rg.sizeFromShape(p),h.dtype),m=n.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,n=m[t];for(let e=0;e<c;++e){let r=m[t+e];n=n&&r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);let g=n.makeTensorInfo(p,h.dtype,f);if(i){let e=vI({inputs:{x:g},backend:n,attrs:{shape:iI.expandShapeToKeepDim(p,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},{kernelName:"Any",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;x8(a,"any");let o=rg.parseAxisParam(s,a.shape),l=o,u=iI.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=vE({inputs:{x:a},backend:n,attrs:{perm:u}}),l=iI.getInnerMostAxes(l.length,a.shape.length)),iI.assertAxesAreInnerMostDims("any",l,h.shape.length);let[p,d]=iI.computeOutAndReduceShapes(h.shape,l),c=rg.sizeFromShape(d),f=rg.makeZerosTypedArray(rg.sizeFromShape(p),h.dtype),m=n.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,n=m[t];for(let e=0;e<c;++e){let r=m[t+e];n=n||r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);let g=n.makeTensorInfo(p,h.dtype,f);if(i){let e=vI({inputs:{x:g},backend:n,attrs:{shape:iI.expandShapeToKeepDim(p,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},{kernelName:e0,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;x8(a,"argMax");let i=rg.parseAxisParam(s,a.shape),o=iI.getAxesPermutation(i,a.shape.length),l=a,u=[];null!=o&&(u.push(l=vE({inputs:{x:a},backend:n,attrs:{perm:o}})),i=iI.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],iI.assertAxesAreInnerMostDims("argMax",i,l.shape.length);let[h,p]=iI.computeOutAndReduceShapes(l.shape,i),d=rg.sizeFromShape(h),c=rg.makeZerosTypedArray(d,"int32"),f=rg.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<c.length;++e){let t=e*f,n=m[t],r=0;for(let e=0;e<f;++e){let a=m[t+e];a>n&&(n=a,r=e)}c[e]=r}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",c)}},{kernelName:e1,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;x8(a,"argMin");let i=rg.parseAxisParam(s,a.shape),o=iI.getAxesPermutation(i,a.shape.length),l=a,u=[];null!=o&&(u.push(l=vE({inputs:{x:a},backend:n,attrs:{perm:o}})),i=iI.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],iI.assertAxesAreInnerMostDims("argMin",i,l.shape.length);let[h,p]=iI.computeOutAndReduceShapes(l.shape,i),d=rg.sizeFromShape(h),c=rg.makeZerosTypedArray(d,"int32"),f=rg.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<c.length;++e){let t=e*f,n=m[t],r=0;for(let e=0;e<f;++e){let a=m[t+e];a<n&&(n=a,r=e)}c[e]=r}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",c)}},{kernelName:e2,backendName:"cpu",kernelFunc:vA},{kernelName:e3,backendName:"cpu",kernelFunc:vR},{kernelName:e4,backendName:"cpu",kernelFunc:vF},{kernelName:e5,backendName:"cpu",kernelFunc:vD},{kernelName:e6,backendName:"cpu",kernelFunc:v_},{kernelName:e8,backendName:"cpu",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n;x8(s,"avgPool");let{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=a;rg.assert(iI.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);let h=iI.computePool2DInfo(s.shape,i,o,1,l,u);if(1===h.filterWidth&&1===h.filterHeight&&rg.arraysEqual(h.inShape,h.outShape))t=vr({inputs:{x:s},backend:r});else{let e=r.data.get(s.dataId).values,n=rg.computeStrides(s.shape),a=vO(e,s.shape,s.dtype,n,h,"avg");t=r.makeTensorInfo(h.outShape,s.dtype,a.values)}return t}},{kernelName:e9,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=r;x8(a,"avgPool3d");let h=iI.computePool3DInfo(a.shape,s,i,1,o,l,u),p=vL(n.data.get(a.dataId).values,a.shape,a.dtype,rg.computeStrides(a.shape),h,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}},{kernelName:te,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r;x8([a,s],"avgPool3DGrad");let h=iI.computePool3DInfo(s.shape,i,o,1,l,u),p=h.strideDepth,d=h.strideHeight,c=h.strideWidth,f=h.filterDepth,m=h.filterHeight,g=h.filterWidth,y=h.dilationDepth,b=h.dilationHeight,x=h.dilationWidth,v=h.effectiveFilterDepth,k=h.effectiveFilterHeight,w=h.effectiveFilterWidth,I=v-1-h.padInfo.front,S=w-1-h.padInfo.left,N=k-1-h.padInfo.top,T=sQ(s.shape,"float32"),C=1/(f*m*g),$=n.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let a=0;a<h.inWidth;++a){let s=n-I,i=r-N,o=a-S,l=0;for(let n=0;n<v;n+=y){let r=(s+n)/p;if(!(r<0)&&!(r>=h.outDepth)&&Math.floor(r)===r)for(let n=0;n<k;n+=b){let a=(i+n)/d;if(!(a<0)&&!(a>=h.outHeight)&&Math.floor(a)===a)for(let n=0;n<w;n+=x){let s=(o+n)/c;s<0||s>=h.outWidth||Math.floor(s)!==s||(l+=$.get(e,r,a,s,t))}}}T.set(l*C,e,n,r,a,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},{kernelName:e7,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t;x8([a,s],"avgPoolGrad");let{filterSize:i,strides:o,pad:l}=r,u=iI.computePool2DInfo(s.shape,i,o,1,l),h=u.strideHeight,p=u.strideWidth,d=u.filterHeight,c=u.filterWidth,f=u.dilationHeight,m=u.dilationWidth,g=u.effectiveFilterHeight,y=u.effectiveFilterWidth,b=y-1-u.padInfo.left,x=g-1-u.padInfo.top,v=sQ(s.shape,"float32"),k=1/(d*c),w=n.data.get(a.dataId).values,I=sQ(a.shape,"float32",w);for(let e=0;e<u.batchSize;++e)for(let t=0;t<u.inChannels;++t)for(let n=0;n<u.inHeight;++n)for(let r=0;r<u.inWidth;++r){let a=n-x,s=r-b,i=0;for(let n=0;n<g;n+=f){let r=(a+n)/h;if(!(r<0)&&!(r>=u.outHeight)&&Math.floor(r)===r)for(let n=0;n<y;n+=m){let a=(s+n)/p;a<0||a>=u.outWidth||Math.floor(a)!==a||(i+=I.get(e,r,a,t))}}v.set(i*k,e,n,r,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},{kernelName:tt,backendName:"cpu",kernelFunc:vS},{kernelName:tB,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,scale:s,offset:i,mean:o,variance:l}=t;rg.assert(o.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),rg.assert(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),rg.assert(null==s||o.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),x8([a,o,l,s,i],"batchNorm");let{varianceEpsilon:u}=r;null==u&&(u=.001);let h=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,d=n.data.get(l.dataId).values,c=s?n.data.get(s.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(h.length),g=f.length,y=c.length,b=d.length,x=p.length,v=0,k=0,w=0,I=0;for(let e=0;e<h.length;++e)m[e]=f[v++]+(h[e]-p[k++])*c[w++]/Math.sqrt(d[I++]+u),v>=g&&(v=0),k>=x&&(k=0),w>=y&&(w=0),I>=b&&(I=0);return n.makeTensorInfo(a.shape,a.dtype,m)}},{kernelName:tn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,crops:i}=r;x8([a],"batchToSpaceND");let o=s.reduce((e,t)=>e*t),l=iI.getReshaped(a.shape,s,o),u=iI.getPermuted(l.length,s.length),h=iI.getReshapedPermuted(a.shape,s,o),p=iI.getSliceBeginCoords(i,s.length),d=iI.getSliceSize(h,i,s.length),c=vI({inputs:{x:a},backend:n,attrs:{shape:l}}),f=vE({inputs:{x:c},backend:n,attrs:{perm:u}}),m=vI({inputs:{x:f},backend:n,attrs:{shape:h}}),g=vP({inputs:{x:m},backend:n,attrs:{begin:p,size:d}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}},{kernelName:tr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:i}=r,o=vB(n.data.get(a.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,o)}},{kernelName:ta,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{s0:r,s1:a}=t,s=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,o=iI.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},{kernelName:ts,backendName:"cpu",kernelFunc:vb},{kernelName:ti,backendName:"cpu",kernelFunc:vV},{kernelName:to,backendName:"cpu",kernelFunc:vG},{kernelName:tl,backendName:"cpu",kernelFunc:vf},{kernelName:tu,backendName:"cpu",kernelFunc:e=>{let{x:t}=e.inputs,n=e.backend,r=new Float32Array(rg.sizeFromShape(t.shape)),a=n.data.get(t.dataId),s=a.complexTensorInfos.real,i=a.complexTensorInfos.imag,o=n.data.get(s.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){let t=o[e],n=l[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}},{kernelName:th,backendName:"cpu",kernelFunc:vj},{kernelName:tp,backendName:"cpu",kernelFunc:vK},{kernelName:td,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:h}=r;x8([a,s],"conv2dBackpropFilter");let p=iI.convertConv2DDataFormat(l),d=iI.computeConv2DInfo(a.shape,h,i,1,o,u,!1,p),{strideHeight:c,strideWidth:f,filterHeight:m,filterWidth:g}=d,y="channelsLast"===d.dataFormat,b=new an(d.filterShape,"float32"),x=d.padInfo.left,v=d.padInfo.top,k=n.data.get(a.dataId).values,w=n.data.get(s.dataId).values,I=new an(a.shape,a.dtype,k),S=new an(s.shape,s.dtype,w);for(let e=0;e<m;++e){let t=Math.max(0,Math.ceil((v-e)/c)),n=Math.min(d.outHeight,(d.inHeight+v-e)/c);for(let r=0;r<g;++r){let a=Math.max(0,Math.ceil((x-r)/f)),s=Math.min(d.outWidth,(d.inWidth+x-r)/f);for(let i=0;i<d.inChannels;++i)for(let o=0;o<d.outChannels;++o){let l=0;for(let u=0;u<d.batchSize;++u)for(let h=t;h<n;++h){let t=e+h*c-v;for(let e=a;e<s;++e){let n=r+e*f-x;y?l+=I.get(u,t,n,i)*S.get(u,h,e,o):l+=I.get(u,i,t,n)*S.get(u,o,h,e)}}b.set(l,e,r,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},{kernelName:tc,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:h}=r;x8([a,s],"conv2dBackpropInput");let p=rg.computeStrides(s.shape),d=rg.computeStrides(a.shape),c=iI.convertConv2DDataFormat(u),f=iI.computeConv2DInfo(i,s.shape,o,1,l,h,!1,c),m=new an(f.inShape,"float32"),g=m.values,y=n.data.get(a.dataId).values,b=n.data.get(s.dataId).values,[x,v,k]=p,{batchSize:w,filterHeight:I,filterWidth:S,inChannels:N,inHeight:T,inWidth:C,outChannels:$,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;c=f.dataFormat;let D=I-1-f.padInfo.top,_=S-1-f.padInfo.left,O="channelsLast"===c,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=d[0],W=O?d[1]:d[2],U=O?d[2]:1,V=O?1:d[1];for(let e=0;e<w;++e)for(let t=0;t<N;++t)for(let n=0;n<T;++n){let r=n-D,a=Math.max(0,Math.ceil(r/R)),s=Math.min(E,(I+r)/R);for(let i=0;i<C;++i){let o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(S+o)/F),h=0;for(let n=a;n<s;++n){let a=n*R-r;for(let r=l;r<u;++r){let s=r*F-o,i=B*e+W*n+U*r,l=x*(I-1-a)+v*(S-1-s)+k*t;for(let e=0;e<$;++e)h+=y[i+V*e]*b[l+e]}}g[M*e+L*n+z*i+P*t]=h}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},{kernelName:tf,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:o,dilations:l}=r;x8([a,s],"conv3d");let u=iI.computeConv3DInfo(a.shape,s.shape,i,l,o),{filterDepth:h,filterHeight:p,filterWidth:d,dilationDepth:c,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,v=new an(u.outShape,a.dtype),k=n.data.get(a.dataId).values,w=n.data.get(s.dataId).values,I=v.values,S=rg.computeStrides(a.shape),N=rg.computeStrides(s.shape);for(let e=0;e<u.batchSize;++e){let t=e*S[0],n=e*v.strides[0];for(let e=0;e<u.outDepth;++e){let r=n+e*v.strides[1],a=e*u.strideDepth-y;for(let e=0;e<h;++e){let n=a+e*c;if(n<0||n>=u.inDepth)continue;let s=e*N[0],i=t+n*S[1];for(let e=0;e<u.outHeight;++e){let t=r+e*v.strides[2],n=e*u.strideHeight-x;for(let e=0;e<p;++e){let r=n+e*f;if(r<0||r>=u.inHeight)continue;let a=s+e*N[1],o=i+r*S[2];for(let e=0;e<u.outWidth;++e){let n=t+e*u.outChannels,r=e*u.strideWidth-b;for(let e=0;e<d;++e){let t=r+e*m;if(t<0||t>=u.inWidth)continue;let s=a+e*N[2],i=o+t*u.inChannels,l=s;for(let e=0;e<u.inChannels;++e){let t=k[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*w[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},{kernelName:tm,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:o,filterShape:l}=r;x8([a,s],"conv3dBackpropFilterV2");let u=rg.computeStrides(a.shape),h=rg.computeStrides(s.shape),p=iI.computeConv3DInfo(a.shape,l,i,1,o),d=p.strideDepth,c=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new an(p.filterShape,"float32"),x=b.values,[v,k,w,I]=b.strides,S=n.data.get(s.dataId).values,[N,T,C,$]=h,E=n.data.get(a.dataId).values,[A,R,F,D]=u,_=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){let t=Math.max(0,Math.ceil((_-e)/d)),n=Math.min(p.outDepth,(p.inDepth+_-e)/d),r=e*v;for(let a=0;a<g;++a){let s=Math.max(0,Math.ceil((M-a)/c)),i=Math.min(p.outHeight,(p.inHeight+M-a)/c),o=a*k+r;for(let r=0;r<y;++r){let l=Math.max(0,Math.ceil((O-r)/f)),u=Math.min(p.outWidth,(p.inWidth+O-r)/f),h=r*w+o;for(let o=0;o<p.inChannels;++o){let m=o*I+h;for(let h=0;h<p.outChannels;++h){let g=0;for(let m=0;m<p.batchSize;++m){let p=m*A,y=m*N;for(let m=t;m<n;++m){let t=(e+m*d-_)*R+p,n=m*T+y;for(let e=s;e<i;++e){let s=(a+e*c-M)*F+t,i=e*C+n;for(let e=l;e<u;++e){let t=(r+e*f-O)*D+s,n=e*$+i;g+=E[t+o]*S[n+h]}}}}x[m+h]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},{kernelName:tg,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{pad:i,strides:o,inputShape:l}=r;x8([a],"conv3dBackpropInputV2");let u=rg.computeStrides(a.shape),h=rg.computeStrides(s.shape),p=iI.computeConv3DInfo(l,s.shape,o,1,i),d=new an(p.inShape,"float32"),c=d.values,[f,m,g,y]=d.strides,b=n.data.get(a.dataId).values,[x,v,k,w]=u,I=n.data.get(s.dataId).values,[S,N,T,C]=h,{batchSize:$,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:W,strideWidth:U}=p,V=E-1-p.padInfo.front,G=A-1-p.padInfo.top,H=R-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){let r=n-V,a=Math.max(0,Math.ceil(r/B)),s=Math.min(L,(E+r)/B);for(let i=0;i<_;++i){let o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let h=0;h<O;++h){let p=h-H,d=Math.max(0,Math.ceil(p/U)),$=Math.min(P,(R+p)/U),F=0;for(let n=a;n<s;++n){let a=n*B-r;for(let r=l;r<u;++r){let s=r*W-o;for(let i=d;i<$;++i){let o=i*U-p,l=x*e+v*n+k*r+w*i,u=S*(E-1-a)+N*(A-1-s)+T*(R-1-o)+C*t;for(let e=0;e<M;++e)F+=b[l+e]*I[u+e]}}}c[f*e+m*n+g*i+y*h+t]=F}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},{kernelName:"Cos",backendName:"cpu",kernelFunc:vX},{kernelName:ty,backendName:"cpu",kernelFunc:vY},{kernelName:tv,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=r,[h,p,d,c]=a.shape,f=s.shape[0],[m,g]=o,y=sQ([f,m,g,c],"float32"),b=n.data.get(s.dataId).values,x=n.data.get(i.dataId).values,v=n.data.get(a.dataId).values,k=rg.computeStrides(a.shape),w=rg.computeStrides(y.shape);for(let e=0;e<f;e++){let t=4*e,n=b[t],r=b[t+1],a=b[t+2],s=b[t+3],i=x[e];if(i>=h)continue;let o=m>1?(a-n)*(p-1)/(m-1):0,f=g>1?(s-r)*(d-1)/(g-1):0;for(let t=0;t<m;t++){let h=m>1?n*(p-1)+t*o:.5*(n+a)*(p-1);if(h<0||h>p-1){for(let n=0;n<g;n++)for(let r=0;r<c;r++){let a=r+n*w[2]+t*w[1]+e*w[0];y.values[a]=u}continue}if("bilinear"===l){let n=Math.floor(h),a=Math.ceil(h),o=h-n;for(let l=0;l<g;l++){let h=g>1?r*(d-1)+l*f:.5*(r+s)*(d-1);if(h<0||h>d-1){for(let n=0;n<c;n++){let r=n+l*w[2]+t*w[1]+e*w[0];y.values[r]=u}continue}let p=Math.floor(h),m=Math.ceil(h),b=h-p;for(let r=0;r<c;r++){let s=r+p*k[2]+n*k[1]+i*k[0],u=v[s],h=v[s=r+m*k[2]+n*k[1]+i*k[0]],d=v[s=r+p*k[2]+a*k[1]+i*k[0]],c=v[s=r+m*k[2]+a*k[1]+i*k[0]],f=u+(h-u)*b,g=d+(c-d)*b;s=r+l*w[2]+t*w[1]+e*w[0],y.values[s]=f+(g-f)*o}}}else for(let n=0;n<g;++n){let a=g>1?r*(d-1)+n*f:.5*(r+s)*(d-1);if(a<0||a>d-1){for(let r=0;r<c;r++){let a=r+n*w[2]+t*w[1]+e*w[0];y.values[a]=u}continue}let o=Math.round(a),l=Math.round(h);for(let r=0;r<c;r++){let a=r+o*k[2]+l*k[1]+i*k[0],s=r+n*w[2]+t*w[1]+e*w[0];y.values[s]=v[a]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},{kernelName:tb,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:i,reverse:o}=r;x8(a,"cumprod");let l=iI.getAxesPermutation([s],a.shape.length),u=a;null!=l&&(u=vE({inputs:{x:a},backend:n,attrs:{perm:l}}));let h=iI.getInnerMostAxes(1,a.shape.length)[0];if(h!==u.shape.length-1)throw Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${h}`);let p=ah(u.dtype,"int32"),d=rg.makeOnesTypedArray(rg.sizeFromShape(u.shape),p),c=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<c.length;e+=f)for(let t=0;t<f;t++){let n=m(e,t);if(0===t)d[n]=i?1:c[n];else{let r=m(e,t-1);d[n]=i?c[r]*d[r]:c[n]*d[r]}}let g=n.makeTensorInfo(u.shape,p,d);if(null!=l){let e=vE({inputs:{x:g},backend:n,attrs:{perm:iI.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},{kernelName:tx,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:i,reverse:o}=r;x8(a,"cumsum");let l=iI.getAxesPermutation([s],a.shape.length),u=a;null!=l&&(u=vE({inputs:{x:a},backend:n,attrs:{perm:l}}));let h=iI.getInnerMostAxes(1,a.shape.length)[0];if(h!==u.shape.length-1)throw Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${h}`);let p=ah(u.dtype,"int32"),d=rg.makeZerosTypedArray(rg.sizeFromShape(u.shape),p),c=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<c.length;e+=f)for(let t=0;t<f;t++){let n=m(e,t);if(0===t)d[n]=i?0:c[n];else{let r=m(e,t-1);d[n]=i?c[r]+d[r]:c[n]+d[r]}}let g=n.makeTensorInfo(u.shape,p,d);if(null!=l){let e=vE({inputs:{x:g},backend:n,attrs:{perm:iI.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},{kernelName:tk,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:i,binaryOutput:o}=r;if(1===a.shape.length){let e=vB(n.data.get(a.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,e)}if(2===a.shape.length){let e=vW(n.bufferSync(a),n.bufferSync(s),i,o);return n.makeTensorInfo(e.shape,s.dtype,e.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},{kernelName:tw,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:i}=r;rg.assert("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let o=a.shape[0],l=a.shape[1],u=a.shape[2],h=a.shape[3],p=l*s,d=u*s,c=h/(s*s),f=n.data.get(a.dataId).values,m=new Float32Array(o*p*d*c),g=0;for(let e=0;e<o;++e)for(let t=0;t<p;++t){let n=Math.floor(t/s),r=t%s;for(let t=0;t<d;++t){let a=Math.floor(t/s),i=t%s,o=(r*s+i)*c;for(let t=0;t<c;++t){let r=t+o+h*(a+u*(n+l*e));m[g++]=f[r]}}}return n.makeTensorInfo([o,p,d,c],a.dtype,m)}},{kernelName:tI,backendName:"cpu",kernelFunc:vZ},{kernelName:tS,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:h}=r;x8([a,s],"depthwiseConv2dNativeBackpropFilter");let p=iI.computeConv2DInfo(a.shape,h,i,o,l,u,!0),{strideHeight:d,strideWidth:c,filterHeight:f,filterWidth:m}=p,g=new an(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,v=n.data.get(a.dataId).values,k=new an(a.shape,a.dtype,v),w=n.data.get(s.dataId).values,I=new an(s.shape,s.dtype,w);for(let e=0;e<f;++e){let t=Math.max(0,Math.ceil((b-e)/d)),n=Math.min(p.outHeight,(p.inHeight+b-e)/d);for(let r=0;r<m;++r){let a=Math.max(0,Math.ceil((y-r)/c)),s=Math.min(p.outWidth,(p.inWidth+y-r)/c);for(let i=0;i<p.outChannels;++i){let o=Math.trunc(i/x),l=i%x,u=0;for(let l=0;l<p.batchSize;++l)for(let h=t;h<n;++h){let t=e+h*d-b;for(let e=a;e<s;++e){let n=r+e*c-y;u+=k.get(l,t,n,o)*I.get(l,h,e,i)}}g.set(u,e,r,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},{kernelName:tN,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:h}=r;x8([a,s],"depthwiseConv2DNativeBackpropInput");let p=rg.computeStrides(a.shape),d=rg.computeStrides(s.shape),c=iI.computeConv2DInfo(h,s.shape,i,o,l,u,!0),f=new an(c.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(a.dataId).values,[v,k,w]=p,I=n.data.get(s.dataId).values,[S,N,T]=d,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=c,z=$-1-c.padInfo.top,P=E-1-c.padInfo.left,B=D/A;for(let e=0;e<C;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){let r=n-z,a=Math.max(0,Math.ceil(r/M)),s=Math.min(_,($+r)/M);for(let i=0;i<F;++i){let o=i-P,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L),h=0;for(let n=a;n<s;++n){let a=n*M-r;for(let r=l;r<u;++r){let s=r*L-o,i=v*e+k*n+w*r,l=S*($-1-a)+N*(E-1-s)+T*t;for(let e=0;e<B;++e)h+=x[i+(t*B+e)]*I[l+e]}}m[g*e+y*n+b*i+t]=h}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},{kernelName:tT,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r}=t,a=rg.sizeFromShape(r.shape),s=n.data.get(r.dataId).values,i=sQ([a,a],r.dtype),o=i.values;for(let e=0;e<s.length;e++)o[e*a+e]=s[e];let l=[...r.shape,...r.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},{kernelName:tC,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r,filter:a}=e,{strides:s,pad:i,dilations:o}=n,l=t.data.get(r.dataId).values,u=r.shape.length,h=t.data.get(a.dataId).values,p=a.shape.length,{batchSize:d,inHeight:c,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:v,filterHeight:k,filterWidth:w,dilationHeight:I,dilationWidth:S,outShape:N}=iI.computeDilation2DInfo(r.shape,a.shape,s,i,"NHWC",o),T=rg.sizeFromShape(N),C=N.length,$=rg.getArrayFromDType(r.dtype,T);for(let e=0;e<d;++e)for(let t=0;t<g;++t){let n=t*x-b.top;for(let s=0;s<y;++s){let i=s*v-b.left;for(let o=0;o<m;++o){let d=Number.MIN_SAFE_INTEGER;for(let t=0;t<k;++t){let s=n+t*I;if(s>=0&&s<c)for(let n=0;n<w;++n){let c=i+n*S;if(c>=0&&c<f){let i=rg.locToIndex([e,s,c,o],u,rg.computeStrides(r.shape)),f=rg.locToIndex([t,n,o],p,rg.computeStrides(a.shape)),m=l[i]+h[f];m>d&&(d=m)}}}$[rg.locToIndex([e,t,s,o],C,rg.computeStrides(N))]=d}}}return{dataId:t.write(rg.toTypedArray($,r.dtype),N,r.dtype),shape:N,dtype:r.dtype}}},{kernelName:tE,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r,filter:a,dy:s}=e,{strides:i,pad:o,dilations:l}=n,u=rg.toNestedArray(r.shape,t.data.get(r.dataId).values),h=rg.toNestedArray(a.shape,t.data.get(a.dataId).values),{batchSize:p,inHeight:d,inWidth:c,inChannels:f,outHeight:m,outWidth:g,padInfo:y,strideHeight:b,strideWidth:x,filterHeight:v,filterWidth:k,dilationHeight:w,dilationWidth:I,outShape:S}=iI.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);rg.assert(s.rank===S.length,()=>`Error in ${tE}, dy must have the same rank as output ${S.length}, but got ${s.rank}`);let N=rg.toNestedArray(S,t.data.get(s.dataId).values),T=rg.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<p;++e)for(let t=0;t<m;++t){let n=t*b-y.top;for(let r=0;r<g;++r){let a=r*x-y.left;for(let s=0;s<f;++s){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){let r=n+t*w;if(r>=0&&r<d)for(let n=0;n<k;++n){let p=a+n*I;if(p>=0&&p<c){let a=u[e][r][p][s]+h[t][n][s];a>i&&(i=a,o=t,l=n)}}}T[o][l][s]+=N[e][t][r][s]}}}return{dataId:t.write(rg.toTypedArray(T,r.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},{kernelName:t$,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r,filter:a,dy:s}=e,{strides:i,pad:o,dilations:l}=n,u=rg.toNestedArray(r.shape,t.data.get(r.dataId).values),h=rg.toNestedArray(a.shape,t.data.get(a.dataId).values),{batchSize:p,inHeight:d,inWidth:c,inChannels:f,outHeight:m,outWidth:g,padInfo:y,strideHeight:b,strideWidth:x,filterHeight:v,filterWidth:k,dilationHeight:w,dilationWidth:I,outShape:S}=iI.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);rg.assert(s.rank===S.length,()=>`Error in ${t$}, dy must have the same rank as output ${S.length}, but got ${s.rank}`);let N=rg.toNestedArray(S,t.data.get(s.dataId).values),T=rg.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<m;++t){let n=t*b-y.top;for(let r=0;r<g;++r){let a=r*x-y.left;for(let s=0;s<f;++s){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=a<0?0:a;for(let t=0;t<v;++t){let r=n+t*w;if(r>=0&&r<d)for(let n=0;n<k;++n){let p=a+n*I;if(p>=0&&p<c){let a=u[e][r][p][s]+h[t][n][s];a>i&&(i=a,o=r,l=p)}}}T[e][o][l][s]+=N[e][t][r][s]}}}return{dataId:t.write(rg.toTypedArray(T,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:tR,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,{allDims:s,summedDims:i,idDims:o}=iI.decodeEinsumEquation(a,t.length);iI.checkEinsumDimSizes(s.length,o,t);let{path:l,steps:u}=iI.getEinsumComputePath(i,o),h=u.length,p=null,d=s.length,c=[];for(let e=0;e<h;++e){for(let r of u[e]){let e,{permutationIndices:a,expandDims:s}=iI.getEinsumPermutation(d,o[r]);iI.isIdentityPermutation(a)?e=t[r]:(e=vE({inputs:{x:t[r]},backend:n,attrs:{perm:a}}),c.push(e));let i=e.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);rg.arraysEqual(e.shape,i)||(e=vI({inputs:{x:e},backend:n,attrs:{shape:i}}),c.push(e)),null===p?p=e:(p=vQ({inputs:{a:e,b:p},backend:n}),c.push(p))}e<h-1&&(l[e]>=0&&(p=v0({inputs:{x:p},backend:n,attrs:{axis:l[e]-(s.length-d),keepDims:!1}}),c.push(p)),d--)}for(let e of c)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},{kernelName:"Elu",backendName:"cpu",kernelFunc:vn},{kernelName:tF,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{dy:r,y:a}=t;x8([r,a],"eluGrad");let s=new Float32Array(rg.sizeFromShape(a.shape)),i=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values;for(let e=0;e<i.length;++e){let t=i[e];t>=1?s[e]=o[e]:s[e]=o[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",s)}},{kernelName:tD,backendName:"cpu",kernelFunc:v2},{kernelName:"Erf",backendName:"cpu",kernelFunc:v9},{kernelName:"Exp",backendName:"cpu",kernelFunc:kt},{kernelName:t_,backendName:"cpu",kernelFunc:kn},{kernelName:tO,backendName:"cpu",kernelFunc:ka},{kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:r}=t,a=rg.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=vI({inputs:{x:r},backend:n,attrs:{shape:[a/s,s]}}),o=ku(i,!1,n),l=vI({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},{kernelName:tM,backendName:"cpu",kernelFunc:kh},{kernelName:tL,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:r}=e,a=rg.getTypedArrayFromDType(r.dtype,rg.sizeFromShape(r.shape)),[s,i,o,l]=r.shape,u=n.data.get(r.dataId).values;for(let e=0;e<s;e++){let t=e*o*i*l;for(let e=0;e<i;e++){let n=o*l*e;for(let e=0;e<o;e++){let r=e*l;for(let s=0;s<l;s++){let i=Math.round(o-e-1),h=t+n+r+s,p=u[h];i>=0&&i<o&&(p=u[t+n+i*l+s]),a[h]=p}}}}return{dataId:n.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:tz,backendName:"cpu",kernelFunc:kd},{kernelName:tP,backendName:"cpu",kernelFunc:kc},{kernelName:rs,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=r,m=vK({inputs:{x:a,filter:s},backend:n,attrs:{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d}});if(i){let e=m;if("NCHW"===h&&1===i.shape.length&&1!==i.shape[0]){let e=vI({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=vw({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=vw({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(c){let e=m;if("NCHW"===h&&"prelu"===c&&1===o.shape.length&&1!==o.shape[0]){let e=vI({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=vc(n,m,c,e,f),n.disposeIntermediateTensorInfo(e)}else m=vc(n,m,c,o,f);n.disposeIntermediateTensorInfo(e)}return m}},{kernelName:ri,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=r,m=vZ({inputs:{x:a,filter:s},backend:n,attrs:{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d}});if(i){let e=m;m=vw({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(c){let e=m;m=vc(n,m,c,o,f),n.disposeIntermediateTensorInfo(e)}return m}},{kernelName:tU,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{params:r,indices:a}=t,s=rg.sizeFromShape(r.shape),i=a.shape,o=i[i.length-1],[l,u,h,p]=iI.prepareAndValidate(r,a);if(0===u)return n.makeTensorInfo(l,r.dtype,[]);let d=kf(n.data.get(a.dataId).values,n.bufferSync(r),r.dtype,u,o,h,p,r.shape,s);return n.makeTensorInfo(l,r.dtype,d.values)}},{kernelName:tW,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,indices:s}=t,{axis:i,batchDims:o}=r;x8([a,s],"gatherV2");let l=rg.parseAxisParam(i,a.shape)[0],u=n.data.get(s.dataId).values,h=a.shape[l];for(let e=0;e<u.length;++e){let t=u[e];rg.assert(t<=h-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${h-1}]`)}let p=o;null==o&&(p=0);let d=rg.sizeFromShape(s.shape),c=iI.segment_util.collectGatherOpShapeInfo(a,s,l,p),f=vI({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),m=vI({inputs:{x:s},backend:n,attrs:{shape:[c.batchSize,d/c.batchSize]}}),g=[c.batchSize,c.outerSize,d/c.batchSize,c.sliceSize],y=n.bufferSync(m),b=km(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(c.outputShape,b.dtype,b.values)}},{kernelName:tV,backendName:"cpu",kernelFunc:ky},{kernelName:tG,backendName:"cpu",kernelFunc:kx},{kernelName:tH,backendName:"cpu",kernelFunc:vr},{kernelName:tq,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:r}=t,a=rg.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=vI({inputs:{x:r},backend:n,attrs:{shape:[a/s,s]}}),o=ku(i,!0,n),l=vI({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},{kernelName:tj,backendName:"cpu",kernelFunc:vq},{kernelName:tK,backendName:"cpu",kernelFunc:kv},{kernelName:tX,backendName:"cpu",kernelFunc:kk},{kernelName:tY,backendName:"cpu",kernelFunc:kw},{kernelName:tZ,backendName:"cpu",kernelFunc:va},{kernelName:tJ,backendName:"cpu",kernelFunc:kS},{kernelName:tQ,backendName:"cpu",kernelFunc:kT},{kernelName:t0,backendName:"cpu",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,i=kC(r,a,s);return t.makeTensorInfo([i.length],"float32",i)}},{kernelName:"Log",backendName:"cpu",kernelFunc:kE},{kernelName:t1,backendName:"cpu",kernelFunc:kA},{kernelName:t2,backendName:"cpu",kernelFunc:kR},{kernelName:t3,backendName:"cpu",kernelFunc:kF},{kernelName:t4,backendName:"cpu",kernelFunc:kD},{kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:s,bias:i,alpha:o,beta:l}=r;x8(a,"LRN");let u=a.shape[3],h=u-1,p=n.data.get(a.dataId).values,d=rg.sizeFromShape(a.shape),c=new Float32Array(d);for(let e=0;e<d;e++){let t=function(e){let t=e%u,n=e-t+Math.max(0,t-s),r=e-t+Math.min(t+s,h),a=0;for(;n<=r;n++){let e=p[n];a+=e*e}return a}(e),n=p[e]*Math.pow(i+o*t,-l);c[e]=n}return n.makeTensorInfo(a.shape,a.dtype,c)}},{kernelName:t6,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:h}=r;x8(i,"LRNGrad");let p=rg.sizeFromShape(i.shape),d=i.shape[3],c=n.data.get(i.dataId).values,f=n.data.get(a.dataId).values,m=n.data.get(s.dataId).values,g=new Float32Array(p);for(let e=0;e<p;e++){let t=e%d,n=e-t+Math.max(0,t-o),r=e-t+Math.min(d,t+o+1),a=0;for(let e=n;e<r;e++)a+=Math.pow(f[e],2);a=u*a+l;for(let t=n;t<r;t++){let n=-2*u*h*f[t]*m[e]/a;e===t&&(n+=Math.pow(a,-h)),n*=c[e],g[t]+=n}}return n.makeTensorInfo(i.shape,a.dtype,g)}},{kernelName:"Max",backendName:"cpu",kernelFunc:kO},{kernelName:t5,backendName:"cpu",kernelFunc:kL},{kernelName:t8,backendName:"cpu",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n;x8(s,"maxPool");let{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=a;rg.assert(iI.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);let h=iI.computePool2DInfo(s.shape,i,o,1,l,u);if(1===h.filterWidth&&1===h.filterHeight&&rg.arraysEqual(h.inShape,h.outShape))t=vr({inputs:{x:s},backend:r});else{let e=r.data.get(s.dataId).values,n=rg.computeStrides(s.shape),a=vO(e,s.shape,s.dtype,n,h,"max");t=r.makeTensorInfo(h.outShape,s.dtype,a.values)}return t}},{kernelName:t9,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=r;x8(a,"maxPool3d");let h=iI.computePool3DInfo(a.shape,s,i,1,o,l,u),p=vL(n.data.get(a.dataId).values,a.shape,a.dtype,rg.computeStrides(a.shape),h,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}},{kernelName:ne,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r;x8([a,s],"maxPool3DGrad");let h=iI.computePool3DInfo(s.shape,i,o,1,l,u),p=function(e,t){let n=sQ(t.outShape,"int32"),r=t.strideDepth,a=t.strideHeight,s=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=t.padInfo.front,c=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){let b=y*r-d,x=b;for(;x<0;)x+=i;let v=Math.min(t.inDepth,u+b);for(let r=0;r<t.outHeight;++r){let u=r*a-c,d=u;for(;d<0;)d+=o;let k=Math.min(t.inHeight,h+u);for(let a=0;a<t.outWidth;++a){let c=a*s-f,w=c;for(;w<0;)w+=l;let I=Math.min(t.inWidth,p+c),S=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<v;t+=i){let n=t-b;for(let r=d;r<k;r+=o){let a=r-u;for(let s=w;s<I;s+=l){let i=s-c,o=e.get(m,t,r,s,g);o>=S&&(S=o,N=n*h*p+a*h+i)}}}n.set(N,m,y,r,a,g)}}}return n}(n.bufferSync(s),h),d=h.strideDepth,c=h.strideHeight,f=h.strideWidth,m=h.dilationDepth,g=h.dilationHeight,y=h.dilationWidth,b=h.effectiveFilterDepth,x=h.effectiveFilterHeight,v=h.effectiveFilterWidth,k=b-1-h.padInfo.front,w=v-1-h.padInfo.left,I=x-1-h.padInfo.top,S=sQ(s.shape,"float32"),N=n.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let a=0;a<h.inWidth;++a){let s=n-k,i=r-I,o=a-w,l=0;for(let n=0;n<b;n+=m){let r=(s+n)/d;if(!(r<0)&&!(r>=h.outDepth)&&Math.floor(r)===r)for(let a=0;a<x;a+=g){let s=(i+a)/c;if(!(s<0)&&!(s>=h.outHeight)&&Math.floor(s)===s)for(let i=0;i<v;i+=y){let u=(o+i)/f;if(u<0||u>=h.outWidth||Math.floor(u)!==u)continue;let d=+(b*x*v-1-p.get(e,r,s,u,t)===n*x*v+a*v+i);0!==d&&(l+=N.get(e,r,s,u,t)*d)}}}S.set(l,e,n,r,a,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},{kernelName:t7,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s,output:i}=t;x8([s,i],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:h}=r,p=iI.computePool2DInfo(s.shape,o,l,1,u,h),d=n.data.get(s.dataId).values,c=sQ(p.outShape,s.dtype,vM(d,s.shape,s.dtype,p).values),f=p.strideHeight,m=p.strideWidth,g=p.dilationHeight,y=p.dilationWidth,b=p.effectiveFilterHeight,x=p.effectiveFilterWidth,v=x-1-p.padInfo.left,k=b-1-p.padInfo.top,w=sQ(s.shape,"float32"),I=n.data.get(a.dataId).values,S=sQ(a.shape,"float32",I);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){let a=n-k,s=r-v,i=0;for(let n=0;n<b;n+=g){let r=(a+n)/f;if(!(r<0)&&!(r>=p.outHeight)&&Math.floor(r)===r)for(let a=0;a<x;a+=y){let o=(s+a)/m;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;let l=+(b*x-1-c.get(e,r,o,t)===n*x+a);0!==l&&(i+=S.get(e,r,o,t)*l)}}w.set(i,e,n,r,t)}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},{kernelName:nt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:r}=e,{filterSize:a,strides:s,pad:i,includeBatchInIndex:o}=t;x8(r,"MaxPoolWithArgmax");let l=n.data.get(r.dataId).values,u=iI.computePool2DInfo(r.shape,a,s,[1,1],i),[h,p]=function(e,t,n,r,a){let s=rg.computeStrides(t),i=vO(e,t,n,s,a,"max"),o=vM(e,t,n,a,!0,r);return[i.values,o.values]}(l,r.shape,r.dtype,o,u),d=n.write(h,u.outShape,r.dtype),c=n.write(p,u.outShape,r.dtype);return[{dataId:d,shape:u.outShape,dtype:r.dtype},{dataId:c,shape:u.outShape,dtype:"int32"}]}},{kernelName:nn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r,o=rg.parseAxisParam(s,a.shape),l=iI.computeOutAndReduceShapes(a.shape,o)[1],u=rg.sizeFromShape(l),h=[],p=n.makeTensorInfo([],"float32",new Float32Array([u]));h.push(p);let d=vb({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});h.push(d);let c=ks({inputs:{a:d,b:p},backend:n});h.push(c);let f=v0({inputs:{x:c},backend:n,attrs:{axis:s,keepDims:i}});return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}},{kernelName:"Min",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;x8(a,"min");let o=rg.parseAxisParam(s,a.shape),l=o,u=iI.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=vE({inputs:{x:a},backend:n,attrs:{perm:u}}),l=iI.getInnerMostAxes(l.length,a.shape.length)),iI.assertAxesAreInnerMostDims("min",l,h.shape.length);let[p,d]=iI.computeOutAndReduceShapes(h.shape,l),c=rg.sizeFromShape(d),f=rg.makeZerosTypedArray(rg.sizeFromShape(p),h.dtype),m=n.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,n=m[t];for(let e=0;e<c;++e){let r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);let g=n.makeTensorInfo(p,h.dtype,f);if(i){let e=vI({inputs:{x:g},backend:n,attrs:{shape:iI.expandShapeToKeepDim(p,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},{kernelName:nr,backendName:"cpu",kernelFunc:kP},{kernelName:na,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,mode:i}=r;x8(a,"mirrorPad");let o=s.map((e,t)=>e[0]+a.shape[t]+e[1]),l=s.map(e=>e[0]),u=s.map((e,t)=>e[0]+a.shape[t]),h=+("reflect"!==i),p=n.data.get(a.dataId).values,d=a.shape.length,c=rg.computeStrides(a.shape),f=rg.sizeFromShape(o),m=o.length,g=rg.computeStrides(o),y=rg.getTypedArrayFromDType(a.dtype,f);for(let e=0;e<f;e++){let t=rg.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-h:t[e]>=u[e]&&(t[e]=(u[e]-1)*2-t[e]+h);t=t.map((e,t)=>e-l[t]);let n=rg.locToIndex(t,d,c);y[e]=p[n]}return{dataId:n.write(y,o,a.dtype),shape:o,dtype:a.dtype}}},{kernelName:"Mod",backendName:"cpu",kernelFunc:kB},{kernelName:ns,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:i,normalized:o}=r;x8(a,"multinomial");let l=o?a:kW({inputs:{logits:a},backend:n,attrs:{dim:-1}}),u=l.shape[0],h=l.shape[1],p=n.data.get(l.dataId).values,d=[u,s],c=rg.makeZerosTypedArray(rg.sizeFromShape(d),"int32");for(let e=0;e<u;++e){let t=e*h,n=new Float32Array(h-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];let r=lH.alea(i.toString()),a=e*s;for(let e=0;e<s;++e){let t=r();c[a+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){c[a+e]=r;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",c)}},{kernelName:ni,backendName:"cpu",kernelFunc:vQ},{kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r}=t;x8(r,"neg");let[a,s]=kU(n.data.get(r.dataId).values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,a)}},{kernelName:nl,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=r;x8(a,"NonMaxSuppression");let{selectedIndices:u}=kV(n.data.get(a.dataId).values,n.data.get(s.dataId).values,i,o,l);return n.makeTensorInfo([u.length],"int32",new Int32Array(u))}},{kernelName:nu,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=r;x8(a,"NonMaxSuppressionPadded");let{selectedIndices:h,validOutputs:p}=kG(n.data.get(a.dataId).values,n.data.get(s.dataId).values,i,o,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},{kernelName:nh,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=r;x8(a,"NonMaxSuppressionWithScore");let h=n.data.get(a.dataId).values,{selectedIndices:p,selectedScores:d}=kH(h,n.data.get(s.dataId).values,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([d.length],"float32",new Float32Array(d))]}},{kernelName:no,backendName:"cpu",kernelFunc:kj},{kernelName:nd,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{dtype:s,depth:i,onValue:o,offValue:l}=r;x8(a,"oneHot");let u=rg.sizeFromShape(a.shape),h=new Float32Array(u*i);h.fill(l);let p=n.data.get(a.dataId).values;for(let e=0;e<u;++e)p[e]>=0&&p[e]<i&&(h[e*i+p[e]]=o);return n.makeTensorInfo([...a.shape,i],s,h)}},{kernelName:np,backendName:"cpu",kernelFunc:function e(t){let{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw Error("onesLike is not supported for string tensors");if("complex64"!==a.dtype)return kh({backend:r,attrs:{shape:a.shape,value:1,dtype:a.dtype}});{let t=vg({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=vq({inputs:{input:a},backend:r}),i=kK({inputs:{x:s},backend:r}),o=vf({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(i),o}}},{kernelName:nc,backendName:"cpu",kernelFunc:kX},kY,{kernelName:"Pow",backendName:"cpu",kernelFunc:kZ},{kernelName:nm,backendName:"cpu",kernelFunc:vo},{kernelName:ng,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;x8(a,"prod");let o=a.shape.length,l=rg.parseAxisParam(s,a.shape),u=iI.getAxesPermutation(l,o),h=l,p=a,d=[];null!=u&&(d.push(p=vE({inputs:{x:a},backend:n,attrs:{perm:u}})),h=iI.getInnerMostAxes(h.length,o));let c=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=kJ(p.shape,p.dtype,c,h),y=m;return i&&(y=iI.expandShapeToKeepDim(m,l)),d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(y,g,f)}},{kernelName:ny,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:a,paramsDenseValues:s,indices:i}=t,{outputRaggedRank:o}=r,l=a.map(e=>n.data.get(e.dataId).values),u=a.map(e=>e.shape),h=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,[d,c,f]=k0(l,u,h,s.shape,s.dtype,p,i.shape,o),m=d.map(e=>n.makeTensorInfo([e.length],"int32",e)),g=n.makeTensorInfo(f,s.dtype,c);return m.concat([g])}},{kernelName:nb,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{shape:a,values:s,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=r,u=n.data.get(a.dataId).values,h=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,d=o.map(e=>n.data.get(e.dataId).values),c=o.map(e=>e.shape),[f,m]=k6(u,a.shape,h,s.shape,s.dtype,p,i.shape,d,c,l);return n.makeTensorInfo(f,s.dtype,m)}},{kernelName:nx,backendName:"cpu",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:r,stop:a,dtype:s,step:i}=n,o=k5(r,a,i,s);return t.makeTensorInfo([o.length],s,o)}},{kernelName:nv,backendName:"cpu",kernelFunc:vg},ki,{kernelName:nk,backendName:"cpu",kernelFunc:k8},{kernelName:nw,backendName:"cpu",kernelFunc:vl},{kernelName:n$,backendName:"cpu",kernelFunc:vu},{kernelName:nI,backendName:"cpu",kernelFunc:vI},{kernelName:nT,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:o}=r;x8(a,"resizeBilinear");let l=rg.computeStrides(a.shape),[u,h]=o,[p,d,c,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(rg.sizeFromShape([p,u,h,f])),y=[s&&u>1?d-1:d,s&&h>1?c-1:c],b=[s&&u>1?u-1:u,s&&h>1?h-1:h],x=0,v=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n,r=Math.max(0,Math.floor(n=i?v*(t+.5)-.5:v*t)),a=n-r,s=Math.min(d-1,Math.ceil(n)),o=e*l[0]+r*l[1],u=e*l[0]+s*l[1];for(let e=0;e<h;e++){let t,n=Math.max(0,Math.floor(t=i?k*(e+.5)-.5:k*e)),r=t-n,s=Math.min(c-1,Math.ceil(t)),h=o+n*l[2],p=u+n*l[2],d=o+s*l[2],y=u+s*l[2];for(let e=0;e<f;e++){let t=m[h+e],n=m[p+e],s=m[d+e],i=m[y+e],o=t+(s-t)*r,l=o+(n+(i-n)*r-o)*a;g[x++]=l}}}return n.makeTensorInfo([p,u,h,f],"float32",g)}},{kernelName:nC,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:i}=r;x8([s,a],"resizeBilinearGrad");let o=rg.computeStrides(a.shape),[l,u,h,p]=a.shape,[,d,c]=s.shape,f=new Float32Array(l*u*h*p),m=[i&&d>1?u-1:u,i&&c>1?h-1:h],g=[i&&d>1?d-1:d,i&&c>1?c-1:c],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(s.dataId).values,v=0;for(let e=0;e<l;e++){let t=e*o[0];for(let e=0;e<d;e++){let n=e*y,r=Math.floor(n),a=Math.min(Math.ceil(n),u-1),s=t+r*o[1],i=t+a*o[1],l=n-r,d=1-l;for(let e=0;e<c;e++){let t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),h-1),a=t-n,u=1-a,c=s+n*o[2],m=s+r*o[2],g=i+n*o[2],y=i+r*o[2],k=d*u,w=d*a,I=l*u,S=l*a;for(let e=0;e<p;e++){let t=x[v++];f[c+e]+=t*k,f[m+e]+=t*w,f[g+e]+=t*I,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,h,u,p],"float32",f)}},{kernelName:nS,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:o}=r;x8(a,"resizeNearestNeighbor");let l=rg.computeStrides(a.shape),[u,h]=o,[p,d,c,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(p*u*h*f),y=[s&&u>1?d-1:d,s&&h>1?c-1:c],b=[s&&u>1?u-1:u,s&&h>1?h-1:h],x=y[0]/b[0],v=y[1]/b[1],k=0;for(let e=0;e<p;e++){let t=e*l[0];for(let e=0;e<u;e++){let n=i?x*(e+.5):x*e,r=Math.min(d-1,s?Math.round(n):Math.floor(n));i&&(r=Math.max(0,r));let a=t+r*l[1];for(let e=0;e<h;e++){let t=i?v*(e+.5):v*e,n=Math.min(c-1,s?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));let r=a+n*l[2];for(let e=0;e<f;e++){let t=m[r+e];g[k++]=t}}}}return n.makeTensorInfo([p,u,h,f],a.dtype,g)}},{kernelName:nN,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:i}=r;x8([s,a],"resizeNearestNeighborGrad");let o=rg.computeStrides(a.shape),l=rg.computeStrides(s.shape),[u,h,p,d]=a.shape,[,c,f]=s.shape,m=new Float32Array(u*h*p*d),g=n.data.get(s.dataId).values,y=[i&&c>1?h-1:h,i&&f>1?p-1:p],b=[i&&c>1?c-1:c,i&&f>1?f-1:f],x=y[0]/b[0],v=y[1]/b[1],k=1/x,w=1/v,I=2*Math.ceil(k)+2,S=2*Math.ceil(w)+2;for(let e=0;e<u;e++){let t=e*o[0];for(let e=0;e<h;e++){let n=t+e*o[1],r=Math.floor(Math.floor(e*k)-I/2);for(let a=0;a<p;a++){let s=n+a*o[2],u=Math.floor(Math.floor(a*w)-S/2);for(let n=0;n<d;n++){let o=0;for(let s=0;s<I;s++){let d=s+r;if(d<0||d>=c)continue;let m=t+d*l[1],y=d*x;if(e===Math.min(h-1,i?Math.round(y):Math.floor(y)))for(let e=0;e<S;e++){let t=e+u;if(t<0||t>=f)continue;let r=m+t*l[2],s=t*v;a===Math.min(p-1,i?Math.round(s):Math.floor(s))&&(o+=g[r+n])}}m[s+n]=o}}}}return n.makeTensorInfo(a.shape,a.dtype,m)}},{kernelName:nE,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:s}=r;x8(a,"reverse");let i=a.shape.length,o=rg.parseAxisParam(s,a.shape);if(0===i)return vr({inputs:{x:a},backend:n});let l=new an(a.shape,a.dtype),u=n.bufferSync(a);for(let e=0;e<l.size;e++){let t=l.indexToLoc(e),n=t.slice();o.forEach(e=>n[e]=a.shape[e]-1-n[e]),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},{kernelName:rr,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:r}=e,{radians:a,fillValue:s,center:i}=t,o=rg.getTypedArrayFromDType(r.dtype,rg.sizeFromShape(r.shape)),[l,u,h,p]=r.shape,[d,c]=iI.getImageCenter(i,u,h),f=Math.sin(a),m=Math.cos(a),g=n.data.get(r.dataId).values;for(let e=0;e<l;e++){let t=e*h*u*p;for(let e=0;e<u;e++){let n=h*p*e;for(let r=0;r<h;r++){let a=r*p;for(let i=0;i<p;i++){let y=[l,e,r,i],b=y[2],x=y[1],v=(b-d)*m-(x-c)*f,k=(b-d)*f+(x-c)*m;v=Math.round(v+d),k=Math.round(k+c);let w=s;"number"!=typeof s&&(w=3===i?255:s[i]),v>=0&&v<h&&k>=0&&k<u&&(w=g[t+h*p*k+v*p+i]),o[t+n+a+i]=w}}}}return{dataId:n.write(o,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:nA,backendName:"cpu",kernelFunc:k7},{kernelName:nR,backendName:"cpu",kernelFunc:we},{kernelName:nF,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:s}=t,{shape:i}=r,{sliceRank:o,numUpdates:l,sliceSize:u,strides:h,outputSize:p}=iI.calculateShapes(s,a,i),d=wt(n.bufferSync(a),n.bufferSync(s),i,p,u,l,o,h,0,!0);return n.makeTensorInfo(i,d.dtype,d.values)}},{kernelName:nD,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{sortedSequence:a,values:s}=t,{side:i}=r,o=function(e,t,n,r,a,s){let i=rg.getArrayFromDType("int32",n*a);for(let o=0;o<n;++o){let n=e.slice(o*r,(o+1)*r),l=o*a;for(let e=0;e<a;++e)i[l+e]="left"===s?function(e,t){let n=0,r=e.length,a=0;for(;n<r;)e[a=Math.floor((n+r)/2)]<t?n=a+1:r=a;return r}(n,t[e+l]):function(e,t){let n=0,r=e.length,a=0;for(;n<r;)e[a=Math.floor((n+r)/2)]<=t?n=a+1:r=a;return r}(n,t[e+l])}return i}(n.data.get(a.dataId).values,n.data.get(s.dataId).values,a.shape[0],a.shape[1],s.shape[1],i);return n.makeTensorInfo(s.shape,"int32",o)}},{kernelName:n_,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{condition:r,t:a,e:s}=t;x8([r,a,s],"select");let i=r.shape.length,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,h=ah(a.dtype,s.dtype),p=rg.makeZerosTypedArray(rg.sizeFromShape(a.shape),h),d=0,c=0===i||i>1||1===a.shape.length?1:rg.sizeFromShape(a.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<c;t++)1===o[e]?p[d++]=l[e]:p[d++]=u[e];return n.makeTensorInfo(a.shape,h,p)}},{kernelName:nO,backendName:"cpu",kernelFunc:wa},{kernelName:nP,backendName:"cpu",kernelFunc:vd},{kernelName:nz,backendName:"cpu",kernelFunc:ws},{kernelName:"Sin",backendName:"cpu",kernelFunc:wi},{kernelName:nL,backendName:"cpu",kernelFunc:wo},{kernelName:nM,backendName:"cpu",kernelFunc:vP},{kernelName:nG,backendName:"cpu",kernelFunc:kW},{kernelName:nB,backendName:"cpu",kernelFunc:wu},{kernelName:nU,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,paddings:i}=r;x8([a],"spaceToBatchND");let o=rg.sizeFromShape(s),l=[[0,0]];l.push(...i);for(let e=1+s.length;e<a.shape.length;++e)l.push([0,0]);let u=kY.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),h=iI.getReshaped(u.shape,s,o,!1),p=iI.getPermuted(h.length,s.length,!1),d=iI.getReshapedPermuted(u.shape,s,o,!1),c=vI({inputs:{x:u},backend:n,attrs:{shape:h}}),f=vE({inputs:{x:c},backend:n,attrs:{perm:p}}),m=vI({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),m}},{kernelName:nH,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:i}=t;if(1!==s.shape.length)throw Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(2!==r.shape.length)throw Error(`Indices must be a matrix, saw:
        ${r.shape}`);if(1!==a.shape.length)throw Error(`Values must be a vector, saw:
        ${a.shape}`);if(0!==i.shape.length)throw Error(`Default value must be a scalar, saw:
        ${i.shape}`);let o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values[0],[p,d,c,f,m]=wh(o,r.shape,r.dtype,l,a.dtype,u,h);return[n.makeTensorInfo(d,r.dtype,p),n.makeTensorInfo([d[0]],a.dtype,c),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},{kernelName:nq,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw Error(`Input indices should be a matrix but received shape
        ${r.shape}`);if(1!==a.shape.length)throw Error(`Input shape should be a vector but received shape
        ${a.shape}`);if(1!==s.shape.length)throw Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(n.data.get(a.dataId).values),o=n.data.get(r.dataId).values,l=Array.from(n.data.get(s.dataId).values),[u,h,p]=wp(o,r.shape,r.dtype,i,l);return[n.makeTensorInfo(h,r.dtype,u),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}},{kernelName:nj,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
          ${a.shape}`);if(1!==s.shape.length)throw Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(a.shape[0]!==s.shape[0])throw Error("segmentIds and indices should have same size.");let i=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,[u,h]=wd(i,r.shape,r.dtype,o,l,!0);return n.makeTensorInfo(h,r.dtype,u)}},{kernelName:nK,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
         ${a.shape}`);if(1!==s.shape.length)throw Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(a.shape[0]!==s.shape[0])throw Error("segmentIds and indices should have same size.");let i=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,[u,h]=wd(i,r.shape,r.dtype,o,l);return n.makeTensorInfo(h,r.dtype,u)}},{kernelName:nX,backendName:"cpu",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{sparseIndices:s,sparseValues:i,defaultValue:o}=n,{outputShape:l}=a,{sliceRank:u,numUpdates:h,sliceSize:p,strides:d,outputSize:c}=iI.calculateShapes(i,s,l),f=r.bufferSync(s);switch(i.dtype){case"bool":t=wt(f,r.bufferSync(i),l,c,p,h,u,d,!!r.data.get(o.dataId).values[0],!1);break;case"float32":case"int32":t=wt(f,r.bufferSync(i),l,c,p,h,u,d,r.data.get(o.dataId).values[0],!1);break;case"string":t=wt(f,r.bufferSync(i),l,c,p,h,u,d,rg.decodeString(r.data.get(o.dataId).values[0]),!1);break;default:throw Error(`Unsupported type ${i.dtype}`)}return r.makeTensorInfo(l,t.dtype,t.values)}},{kernelName:nV,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:s,axis:i}=r,o=rg.parseAxisParam(i,a.shape)[0],l=iI.prepareSplitSize(a,s,o),u=Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{let t=[...h];t[o]=e;let r=vP({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,r})}},{kernelName:nW,backendName:"cpu",kernelFunc:wf},{kernelName:nZ,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{let{x:n}=e;x8(n,"square");let r=t.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){let t=r[e];a[e]=t*t}return{dataId:t.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},{kernelName:nY,backendName:"cpu",kernelFunc:wg},{kernelName:rt,backendName:"cpu",kernelFunc:wy},{kernelName:nJ,backendName:"cpu",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{begin:i,end:o,strides:l,beginMask:u,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:c}=a;x8(s,"stridedSlice");let{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:k}=i7.sliceInfo(s.shape,i,o,l,u,h,p,d,c);if(g)t=vI({inputs:{x:s},backend:r,attrs:{shape:m}});else if(y||b){rg.assert(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);let e=i7.computeOutShape(x,v,k),n=vP({inputs:{x:s},backend:r,attrs:{begin:x,size:e}});t=vI({inputs:{x:n},backend:r,attrs:{shape:m}}),r.disposeIntermediateTensorInfo(n)}else{let e=wb(f,r.bufferSync(s),k,x);t=r.makeTensorInfo(m,e.dtype,e.values)}return t}},{kernelName:nQ,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=r,{data:h,dataSplits:p}=t,[d,c]=wv(n.data.get(h.dataId).values,n.data.get(p.dataId).values,a,s,i,o,l,u);return[n.makeTensorInfo([d.length],"string",d),n.makeTensorInfo(p.shape,"int32",c)]}},{kernelName:n0,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:i}=t;if("string"!==s.dtype)throw Error("Input must be of datatype string");if(1!==s.shape.length)throw Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==i.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let[o,l,u]=wk(n.data.get(s.dataId).values,n.data.get(i.dataId).values[0],a),h=l.length;return[n.makeTensorInfo([h,2],"int32",o),n.makeTensorInfo([h],"string",l),n.makeTensorInfo([2],"int32",new Int32Array(u))]}},{kernelName:n1,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw Error("Input must be of datatype string");if(a<=0)throw Error("Number of buckets must be at least 1");let i=ww(n.data.get(s.dataId).values,a);return n.makeTensorInfo(s.shape,"int32",i)}},{kernelName:"Sub",backendName:"cpu",kernelFunc:kl},{kernelName:"Sum",backendName:"cpu",kernelFunc:v0},{kernelName:"Tan",backendName:"cpu",kernelFunc:wI},{kernelName:n2,backendName:"cpu",kernelFunc:wS},{kernelName:n3,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:s}=r;x8(a,"tile");let i=wN(n.bufferSync(a),s);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:n4,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:i}=r;x8(a,"topk");let[o,l]=wC(n.data.get(a.dataId).values,a.shape,a.dtype,s,i);return[n.makeTensorInfo(o.shape,o.dtype,o.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},{kernelName:n6,backendName:"cpu",kernelFunc:function(e){let{inputs:t,attrs:n,backend:r}=e,{image:a,transforms:s}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[h,p,d,c]=a.shape,[f,m]=null!=u?u:[p,d],g=[h,f,m,c],y=rg.computeStrides(a.shape),b=y[0],x=y[1],v=y[2],k=rg.computeStrides(g),w=k[0],I=k[1],S=k[2],N=rg.getTypedArrayFromDType(a.dtype,rg.sizeFromShape(g));N.fill(l);let T=r.data.get(a.dataId).values,C=r.data.get(s.dataId).values;for(let e=0;e<h;++e){let t=1===s.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let a=0;a<c;++a){let s,u=t[6]*r+t[7]*n+1;if(0===u)continue;let h=(t[0]*r+t[1]*n+t[2])/u,c=(t[3]*r+t[4]*n+t[5])/u,f=w$(h,d,o),m=w$(c,p,o);switch(i){case"nearest":s=wE(T,p,d,b,x,v,e,Math.round(m),Math.round(f),a,l);break;case"bilinear":s=function(e,t,n,r,a,s,i,o,l,u,h){let p=Math.floor(o),d=Math.floor(l),c=p+1,f=d+1,m=(f-l)*wE(e,t,n,r,a,s,i,p,d,u,h)+(l-d)*wE(e,t,n,r,a,s,i,p,f,u,h),g=(f-l)*wE(e,t,n,r,a,s,i,c,d,u,h)+(l-d)*wE(e,t,n,r,a,s,i,c,f,u,h);return(c-o)*m+(o-p)*g}(T,p,d,b,x,v,e,m,f,a,l);break;default:throw Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}N[e*w+n*I+r*S+a]=s}return r.makeTensorInfo(g,a.dtype,N)}return{dataId:r.write(N,g,a.dtype),shape:a.shape,dtype:a.dtype}}},{kernelName:n5,backendName:"cpu",kernelFunc:vE},{kernelName:n8,backendName:"cpu",kernelFunc:function(e){let{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;x8(s,"unique");let{outputValues:i,outputShape:o,indices:l}=wA(r.data.get(s.dataId).values,a,s.shape,s.dtype);return[r.makeTensorInfo(o,s.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:n7,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{value:a}=t,{axis:s}=r;s<0&&(s+=a.shape.length);let i=a.shape.length,o=a.shape[s],l=Array(i-1),u=0;for(let e=0;e<i;e++)e!==s&&(l[u++]=a.shape[e]);let h=Array(i).fill(0),p=a.shape.slice();p[s]=1;let d=Array(o);for(let e=0;e<d.length;e++){h[s]=e;let t=vP({inputs:{x:a},backend:n,attrs:{begin:h,size:p}});d[e]=vI({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return d}},{kernelName:n9,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:s}=t,{numSegments:i}=r;x8(a,"unsortedSegmentSum");let o=a.shape.length,l=s.shape.length,u=[],h=[],p=o-l,d=s;for(let e=0;e<p;++e){let t=kn({inputs:{input:d},backend:n,attrs:{dim:e+1}});d=t,h.push(t)}for(let e=0;e<i;++e){let t=rg.createScalarValue(e,"int32"),r=n.makeTensorInfo([],"int32",t),s=v2({inputs:{a:r,b:d},backend:n}),i=vb({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),o=vQ({inputs:{a:i,b:a},backend:n}),l=v0({inputs:{x:o},backend:n,attrs:{axis:0,keepDims:!1}});u.push(l),h.push(r),h.push(s),h.push(i),h.push(o),h.push(l)}let c=kX({inputs:u,backend:n,attrs:{axis:0}});return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},{kernelName:re,backendName:"cpu",kernelFunc:kK}])rf(e);let wR={},wF={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function wD(e,t){if(!(e in wR)||null!=t){let n=function(e,t){if(1!==e&&2!==e)throw Error("Cannot get WebGL rendering context, WebGL is disabled.");let n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw Error("Cannot create a canvas in this context")}(e):t;return(n.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete wR[e]},!1),eM.getBool("SOFTWARE_WEBGL_ENABLED")&&(wF.failIfMajorPerformanceCaveat=!1),1===e)?n.getContext("webgl",wF)||n.getContext("experimental-webgl",wF):n.getContext("webgl2",wF)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;wR[e]=n}let n=wR[e];return null==n||n.isContextLost()?(delete wR[e],wD(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),wR[e])}function w_(e){let t=Math.ceil(rg.sizeFromShape(e)/4);return rg.sizeToSquarishShape(t)}function wO(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function wM(e,t){let n,r,a,s,i,o,l,u,h,p;return 2===eM.getNumber("WEBGL_VERSION")?(n=e.R32F,r=e.R16F,a=e.RGBA16F,s=e.RGBA32F,i=e.RED,l=4,u=1,h=e.HALF_FLOAT,p=e.FLOAT,o=e.RGBA8):(n=e.RGBA,r=e.RGBA,a=e.RGBA,s=e.RGBA,i=e.RGBA,l=4,u=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,o=e.RGBA),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:s,textureFormatFloat:i,downloadTextureFormat:o,downloadUnpackNumChannels:l,defaultNumChannels:u,textureTypeHalfFloat:h,textureTypeFloat:p}}function wL(e,t){let n=t();return eM.getBool("DEBUG")&&function(e){let t=e.getError();if(t!==e.NO_ERROR)throw Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function wz(e,t){return wq(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(T||(T={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(C||(C={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}($||($={}));let wP=/ERROR: [0-9]+:([0-9]+):/g;function wB(e,t){let n=wP.exec(t);if(null==n){console.log(`Couldn't parse line number in error: ${t}`),console.log(e);return}let r=+n[1],a=e.split("\n"),s=a.length.toString().length+2,i=a.map((e,t)=>rg.rightPad((t+1).toString(),s)+e),o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);let l=i.slice(0,r-1),u=i.slice(r-1,r),h=i.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${rg.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}function wW(e,t){if(wL(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),Error("Shader program validation failed.")}function wU(e,t,n,r,a,s,i){let o=e.getAttribLocation(t,n);return -1!==o&&(wL(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),wL(e,()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,s,i)),wL(e,()=>e.enableVertexAttribArray(o)),!0)}function wV(e,t,n){wL(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),wL(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function wG(e,t){wL(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),wL(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function wH(e){let t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function wq(e,t,n){let r=wL(e,()=>t());if(null==r)throw Error(n);return r}function wj(e,t=2){return rg.sizeFromShape(e.slice(0,e.length-t))}function wK(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function wX(e){let t=[1,1,1];return 0!==e.length&&(1!==e.length||1!==e[0])&&(t=[wj(e),...wK(e)]),t}function wY(e,t){if(e=e.slice(-2),t=t.slice(-2),rg.arraysEqual(e,t)||!e.length||!t.length||0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){let n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r||n%2==0&&r%2==0&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&e[0]%2==0&&t[0]%2==0}function wZ(e,t){return null!=e.getExtension(t)}function wJ(e){try{let t=wD(e);if(null!=t)return!0}catch(e){console.log("Error when getting WebGL context: ",e)}return!1}function wQ(e){let t=wM(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);let r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);let a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),a}function w0(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&rg.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}let w1=eM;function w2(){let e,t,n,r,a,s,i,o,l,u;return 2===eM.getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",a="texture",s="outputColor",i="out vec4 outputColor;",o=eM.getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(e="",t="attribute",n="varying",r="varying",a="texture2D",s="gl_FragColor",i="",o=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:a,output:s,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function w3(e,t,n="index"){let r=rg.computeStrides(t);return r.map((t,a)=>{let s=`int ${e[a]} = ${n} / ${t}`,i=a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`;return`${s}; ${i};`}).join("")}function w4(e,t,n="index"){let r=rg.computeStrides(t);return r.map((t,a)=>{let s=`int ${e[a]} = ${n} / outShapeStrides[${a}]`,i=a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`;return`${s}; ${i};`}).join("")}w1.registerFlag("HAS_WEBGL",()=>w1.getNumber("WEBGL_VERSION")>0),w1.registerFlag("WEBGL_VERSION",()=>wJ(2)?2:+!!wJ(1)),w1.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),w1.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===w1.get("WEBGL_VERSION")),w1.registerFlag("WEBGL_CPU_FORWARD",()=>!0),w1.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),w1.registerFlag("WEBGL_PACK",()=>w1.getBool("HAS_WEBGL")),w1.registerFlag("WEBGL_PACK_NORMALIZATION",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_PACK_CLIP",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_PACK_REDUCE",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_LAZILY_UNPACK",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_CONV_IM2COL",()=>w1.getBool("WEBGL_PACK")),w1.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>(function(e){if(null==s){let t=wD(e);s=t.getParameter(t.MAX_TEXTURE_SIZE)}return s})(w1.getNumber("WEBGL_VERSION"))),w1.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>(function(e){if(null==i){let t=wD(e);i=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,i)})(w1.getNumber("WEBGL_VERSION"))),w1.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let e=w1.getNumber("WEBGL_VERSION");return 0===e?0:function(e){let t;if(0===e)return 0;let n=wD(e);return wZ(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:+!!wZ(n,"EXT_disjoint_timer_query")}(e)}),w1.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>w1.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!aw.isMobile()),w1.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>(function(e){if(0===e)return!1;let t=wD(e);if(1===e){if(!wZ(t,"OES_texture_float"))return!1}else if(!wZ(t,"EXT_color_buffer_float"))return!1;return wQ(t)})(w1.getNumber("WEBGL_VERSION"))),w1.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!w1.getBool("WEBGL_FORCE_F16_TEXTURES")&&w1.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),w1.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>(function(e){if(0===e)return!1;let t=wD(e);if(1===e){if(!wZ(t,"OES_texture_float")||!wZ(t,"WEBGL_color_buffer_float"))return!1}else{if(wZ(t,"EXT_color_buffer_float"))return wQ(t);let e="EXT_color_buffer_half_float";if(wZ(t,e)){let a=t.getExtension(e);var n=t,r=a;let s=wM(n,r),i=n.createTexture();n.bindTexture(n.TEXTURE_2D,i),n.texImage2D(n.TEXTURE_2D,0,s.internalFormatHalfFloat,1,1,0,s.textureFormatFloat,s.textureTypeHalfFloat,null);let o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,i,0);let l=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(i),n.deleteFramebuffer(o),l}return!1}return wQ(t)})(w1.getNumber("WEBGL_VERSION"))),w1.registerFlag("WEBGL_FENCE_API_ENABLED",()=>(function(e){return 2===e&&null!=wD(e).fenceSync})(w1.getNumber("WEBGL_VERSION"))),w1.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>4*!!w1.getBool("WEBGL_RENDER_FLOAT32_ENABLED")),w1.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),w1.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>aw.isMobile()?1:-1,e=>{if(e<0&&-1!==e)throw Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),w1.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),w1.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),w1.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),w1.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),w1.registerFlag("WEBGL_EXP_CONV",()=>!1),w1.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>w1.getBool("IS_TEST")),w1.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),w1.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),w1.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1);function w6(e){let t=rg.computeStrides(e).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function w5(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}let w8=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`,{getBroadcastDims:w7}=iI,w9=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,Ie=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,It=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,In=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function Ir(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function Ia(e){return`offset${e}`}function Is(e){let t=e.name,n=rg.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`
    for (int i = 0; i < ${n}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function Ii(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";else if(6===e)return"ivec6";else throw Error(`GPU for rank ${e} is not yet supported`)}function Io(e,t,n){let{newShape:r,keptDims:a}=rg.squeezeShape(t),s=t.length,i=e&&3===s&&1===t[0],o=i?t.slice(1):r,l=!e&&s>1&&!rg.arraysEqual(t,n)&&r.length<s||i,u=l?o:t;return{useSqueezeShape:l,uniformShape:u,keptDims:a}}function Il(e,t){let n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Iu(e,t){return t.map(t=>e[t]).join(", ")}function Ih(e,t,n){let r,a,s,i={},o={},l={},u=[],h=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===eM.getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(n,"INFINITY",!1));for(let r=0;r<t.variableNames.length;r++){let a=t.variableNames[r];i[a]=e.getUniformLocation(n,a,!1),i[`offset${a}`]=e.getUniformLocation(n,`offset${a}`,!1),t.enableShapeUniforms&&(o[`${a}Shape`]=e.getUniformLocation(n,`${a}Shape`,!1),l[`${a}TexShape`]=e.getUniformLocation(n,`${a}TexShape`,!1))}return t.enableShapeUniforms&&(r=e.getUniformLocation(n,"outShape",!1),s=e.getUniformLocation(n,"outShapeStrides",!1),a=e.getUniformLocation(n,"outTexShape",!1)),t.customUniforms&&t.customUniforms.forEach((t,r)=>{u[r]=e.getUniformLocation(n,t.name,!1)}),{uniformLocations:i,customUniformLocations:u,infLoc:h,nanLoc:p,inShapesLocations:o,inTexShapesLocations:l,outShapeLocation:r,outShapeStridesLocation:s,outTexShapeLocation:a}}function Ip(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{let r=e.logicalShape,a=t[n],s=a.shape;if(!rg.arraysEqual(r,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${s} must match`);if(e.isUniform&&a.isUniform)return;let i=e.texShape,o=a.isUniform?null:a.texData.texShape;if(!rg.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}function Id(e){return eM.getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class Ic{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=T.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=w2();this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?w4(["r","c","d"],e):w3(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}}class If{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=T.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=w2();this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?w4(["r","c","d"],e):w3(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}}class Im{constructor(e){this.variableNames=["A"],this.outTexUsage=C.DOWNLOAD;let t=w2();this.outputShape=e,this.userCode=`
      ${w8}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}}class Ig{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=C.DOWNLOAD;let t=w2();this.outputShape=e,this.userCode=`
      ${w8}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}}class Iy{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=w2();this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?w5():w6(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${n.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${n.output} = vec4(${r}, 0., 0., 0.);
      }
    `}}class Ib{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=w2();this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length);let r="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){let s=2*t+a;r+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${t};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${n.texture2D}(A, uv);

            if (offset == 0) {
              result[${s}] = values[0];
            } else if (offset == 1) {
              result[${s}] = values[1];
            } else if (offset == 2) {
              result[${s}] = values[2];
            } else {
              result[${s}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?w5():w6(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${r}

          ${n.output} = ${a};
        }
    `}}function Ix(e,t,n,r,a,s){let i=eM.getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||n<=0)throw Error(`Requested texture size [${t}x${n}] is invalid.`);if(t>i||n>i)throw Error(`Requested texture size [${t}x${n}] greater than WebGL maximum on this browser / GPU [${i}x${i}].`);let o=wq(e,()=>e.createTexture(),"Unable to create WebGLTexture."),l=e.TEXTURE_2D;return wL(e,()=>e.bindTexture(l,o)),wL(e,()=>e.texParameteri(l,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),wL(e,()=>e.texParameteri(l,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),wL(e,()=>e.texParameteri(l,e.TEXTURE_MIN_FILTER,e.NEAREST)),wL(e,()=>e.texParameteri(l,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===eM.getNumber("WEBGL_VERSION")?wL(e,()=>e.texImage2D(l,0,r,t,n,0,a,s,null)):wL(e,()=>e.texStorage2D(l,1,r,t,n)),wL(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:o,texShape:[n,t]}}function Iv(e){return e.internalFormatFloat}function Ik(e){return e.internalFormatHalfFloat}function Iw(e){return e.downloadTextureFormat}function II(e){return e.internalFormatPackedFloat}function IS(e){return e.internalFormatPackedHalfFloat}class IN{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let t=eM.getNumber("WEBGL_VERSION");if(null!=e)this.gl=e,wR[t]=e;else this.gl=wD(t);let n="WEBGL_color_buffer_float",r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===eM.getNumber("WEBGL_VERSION")){let e="OES_texture_half_float";if(this.textureFloatExtension=wz(this.gl,"OES_texture_float"),wZ(this.gl,e))this.textureHalfFloatExtension=wz(this.gl,e);else if(eM.get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),wZ(this.gl,r))this.colorBufferHalfFloatExtension=wz(this.gl,r);else if(eM.get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",wZ(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else if(wZ(this.gl,r))this.colorBufferHalfFloatExtension=this.gl.getExtension(r);else throw Error("GL context does not support color renderable floats");this.vertexBuffer=function(e){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]),n=wq(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return wL(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),wL(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(this.gl),this.indexBuffer=function(e){let t=new Uint16Array([0,1,2,2,1,3]),n=wq(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return wL(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),wL(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(this.gl),this.framebuffer=function(e){return wq(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=wM(this.gl,this.textureHalfFloatExtension)}get debug(){return eM.getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;wL(e,()=>e.finish()),wL(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),wL(e,()=>e.deleteFramebuffer(this.framebuffer)),wL(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),wL(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),wL(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=[n,t];return Ix(e,a,s,Iv(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=[n,t];return Ix(e,a,s,Ik(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=[n,t];return Ix(e,a,s,Iw(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){var n;this.throwIfDisposed(),n=this.gl,wL(n,()=>n.bindTexture(n.TEXTURE_2D,e)),t.data instanceof Uint8Array?2===eM.getNumber("WEBGL_VERSION")?wL(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,t.width,t.height,n.RGBA,n.UNSIGNED_BYTE,t.data)):wL(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t.width,t.height,0,n.RGBA,n.UNSIGNED_BYTE,t.data)):2===eM.getNumber("WEBGL_VERSION")?wL(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,t)):wL(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,t)),wL(n,()=>n.bindTexture(n.TEXTURE_2D,null))}uploadDenseMatrixToTexture(e,t,n,r){var a,s;let i,o,l;this.throwIfDisposed(),a=this.gl,s=this.textureConfig,wL(a,()=>a.bindTexture(a.TEXTURE_2D,e)),r instanceof Uint8Array?(i=new Uint8Array(t*n*4),o=a.UNSIGNED_BYTE,l=a.RGBA):(i=new Float32Array(t*n*4),o=a.FLOAT,l=s.internalFormatPackedFloat),i.set(r),2===eM.getNumber("WEBGL_VERSION")?wL(a,()=>a.texSubImage2D(a.TEXTURE_2D,0,0,0,t,n,a.RGBA,o,i)):wL(a,()=>a.texImage2D(a.TEXTURE_2D,0,l,t,n,0,a.RGBA,o,i)),wL(a,()=>a.bindTexture(a.TEXTURE_2D,null))}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=wO(t,n);return Ix(e,a,s,IS(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=wO(t,n);return Ix(e,a,s,II(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(wG(this.gl,this.framebuffer),this.outputTexture=null),wL(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>(function(e,t,n,r){let[a,s]=[n,t],i=new Uint8Array(t*n*4);return wL(e,()=>e.readPixels(0,0,a,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)})(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,a,s){return function(e,t,n,r,a,s,i,o){let l=new Float32Array(function(e,t){let[n,r]=wO(e,t);return n*r*4}(s,i));return e.bindBuffer(e.PIXEL_PACK_BUFFER,t),e.getBufferSubData(e.PIXEL_PACK_BUFFER,0,l),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,a,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){var n=this.gl;let r=new Float32Array(t);return n.bindBuffer(n.PIXEL_PACK_BUFFER,e),n.getBufferSubData(n.PIXEL_PACK_BUFFER,0,r),n.bindBuffer(n.PIXEL_PACK_BUFFER,null),r}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);let r=function(e,t,n,r){let a=e.createBuffer();wL(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a));let s=16*t*n;return wL(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ)),wL(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),wL(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(eM.getBool("WEBGL_FENCE_API_ENABLED")){let r=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{let t=e.clientWaitSync(r,0,0);return t===e.ALREADY_SIGNALED||t===e.CONDITION_SATISFIED},t=r}else eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>(function(e,t,n){let r=new Float32Array(t*n*4);return wL(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r})(this.gl,t,n))}createProgram(e){var t,n;this.throwIfDisposed();let r=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){let t=w2(),n=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`,r=wq(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(wL(e,()=>e.shaderSource(r,n)),wL(e,()=>e.compileShader(r)),!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(r)),Error("Failed to compile vertex shader.");return r}(r));let a=wq(r,()=>r.createProgram(),"Unable to create WebGLProgram.");if(wL(r,()=>r.attachShader(a,this.vertexShader)),wL(r,()=>r.attachShader(a,e)),wL(r,()=>r.linkProgram(a)),!eM.get("ENGINE_COMPILE_ONLY")&&!1===r.getProgramParameter(a,r.LINK_STATUS))throw console.log(r.getProgramInfoLog(a)),Error("Failed to link vertex and fragment shaders.");return this.debug&&wW(r,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=(t=this.program,n=this.vertexBuffer,wL(r,()=>r.bindBuffer(r.ARRAY_BUFFER,n)),wU(r,t,"clipSpacePos",n,3,20,0)&&wU(r,t,"uv",n,2,20,12))),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&wL(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&wW(this.gl,this.program),wL(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){var r,a,s;return(this.throwIfDisposed(),n)?(r=this.gl,wq(r,()=>r.getUniformLocation(e,a),'uniform "'+(a=t)+'" not present in program.')):(s=this.gl,s.getUniformLocation(e,t))}getAttributeLocation(e,t){return this.throwIfDisposed(),wL(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){var r;this.throwIfDisposed(),this.throwIfNoProgram(),r=this.gl,wL(r,()=>{(function(e,t){let n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){let e=`[gl.TEXTURE0, gl.TEXTURE${n}]`;throw Error(`textureUnit must be in ${e}.`)}})(r,n),wL(r,()=>r.activeTexture(r.TEXTURE0+n)),wL(r,()=>r.bindTexture(r.TEXTURE_2D,e))}),wL(r,()=>r.uniform1i(t,n))}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();let[r,a]=wO(t,n);this.setOutputMatrixTextureDriver(e,r,a)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&wW(this.gl,this.program),wH(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;this.debug&&this.debugValidate(),wL(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),wL(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=wz(this.gl,2===eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2();e.endQuery(t.TIME_ELAPSED_EXT);return}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await rg.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){let t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{let t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){let t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{let t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){let e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){let{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){let n;this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||("setTimeoutCustom"in eM.platform&&(n=eM.platform.setTimeoutCustom.bind(eM.platform)),rg.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,n))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),wV(this.gl,e,this.framebuffer),this.debug&&wH(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(wV(this.gl,this.outputTexture,this.framebuffer),this.debug&&wH(this.gl)):wG(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();let r=this.gl;wV(r,e,this.framebuffer),this.debug&&wH(r),this.outputTexture=e,wL(r,()=>r.viewport(0,0,t,n)),wL(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),wL(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw Error("No GPU program is currently set.")}}var IT={};l(IT,"simpleAbsImpl",()=>vN),l(IT,"addImpl",()=>vk),l(IT,"bincountImpl",()=>vB),l(IT,"bincountReduceImpl",()=>vW),l(IT,"castImpl",()=>vy),l(IT,"ceilImpl",()=>vU),l(IT,"concatImpl",()=>vH),l(IT,"equalImpl",()=>v1),l(IT,"expImpl",()=>ke),l(IT,"expm1Impl",()=>kr),l(IT,"floorImpl",()=>kp),l(IT,"gatherNdImpl",()=>kf),l(IT,"gatherV2Impl",()=>km),l(IT,"greaterImpl",()=>kg),l(IT,"greaterEqualImpl",()=>kb),l(IT,"lessImpl",()=>kI),l(IT,"lessEqualImpl",()=>kN),l(IT,"linSpaceImpl",()=>kC),l(IT,"logImpl",()=>k$),l(IT,"maxImpl",()=>k_),l(IT,"maximumImpl",()=>kM),l(IT,"minimumImpl",()=>kz),l(IT,"multiplyImpl",()=>vJ),l(IT,"negImpl",()=>kU),l(IT,"notEqualImpl",()=>kq),l(IT,"prodImpl",()=>kJ),l(IT,"raggedGatherImpl",()=>k0),l(IT,"raggedTensorToTensorImpl",()=>k6),l(IT,"rangeImpl",()=>k5),l(IT,"rsqrtImpl",()=>k9),l(IT,"scatterImpl",()=>wt),l(IT,"sigmoidImpl",()=>vp),l(IT,"sliceImpl",()=>vz),l(IT,"sparseFillEmptyRowsImpl",()=>wh),l(IT,"sparseReshapeImpl",()=>wp),l(IT,"sparseSegmentReductionImpl",()=>wd),l(IT,"sqrtImpl",()=>wc),l(IT,"squaredDifferenceImpl",()=>wm),l(IT,"stridedSliceImpl",()=>wb),l(IT,"stringNGramsImpl",()=>wv),l(IT,"stringSplitImpl",()=>wk),l(IT,"stringToHashBucketFastImpl",()=>ww),l(IT,"subImpl",()=>ko),l(IT,"tileImpl",()=>wN),l(IT,"topKImpl",()=>wC),l(IT,"transposeImpl",()=>v$),l(IT,"uniqueImpl",()=>wA);let{addImpl:IC,bincountImpl:I$,bincountReduceImpl:IE,castImpl:IA,ceilImpl:IR,concatImpl:IF,equalImpl:ID,expImpl:I_,expm1Impl:IO,floorImpl:IM,gatherNdImpl:IL,gatherV2Impl:Iz,greaterImpl:IP,greaterEqualImpl:IB,lessImpl:IW,lessEqualImpl:IU,linSpaceImpl:IV,logImpl:IG,maxImpl:IH,maximumImpl:Iq,minimumImpl:Ij,multiplyImpl:IK,negImpl:IX,notEqualImpl:IY,prodImpl:IZ,raggedGatherImpl:IJ,raggedTensorToTensorImpl:IQ,rangeImpl:I0,rsqrtImpl:I1,scatterImpl:I2,sigmoidImpl:I3,simpleAbsImpl:I4,sliceImpl:I6,sparseFillEmptyRowsImpl:I5,sparseReshapeImpl:I8,sparseSegmentReductionImpl:I7,sqrtImpl:I9,stridedSliceImpl:Se,stringNGramsImpl:St,stringSplitImpl:Sn,stringToHashBucketFastImpl:Sr,subImpl:Sa,tileImpl:Ss,topKImpl:Si,transposeImpl:So,uniqueImpl:Sl}=IT;function Su(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function Sh(e,t){return 1===t?[e]:Su(e,t)}class Sp{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=Id(this.outputShape.length),0===this.rank)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=Sh("rc",this.rank),t=Ii(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),a=this.getOutput(e);this.userCode=`
        void main() {
          ${t} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${r}

            setOutput(vec4(${a}));
          }
        }
      `}}getSourceCoordsArr(e){let t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let a=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";let t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${n};
      bool rEdge = rp1 >= ${r};
    `}getOutput(e){let t=this.getSourceCoordsArr(e);if(1===this.rank){let e=this.enableShapeUniforms?"outShape":this.outputShape[0];return`getA(rc), (rc + 1 >= ${e} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Sd{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`
        ${t}
        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${e}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${e>0?"}":""}
      `}this.userCode=`
      ${function(e,t){let n=t?function(e,t,n="index"){let r=function(e,t){let n=e.length,r=e.map(e=>`${t}[${e}]`),a=Array(n-1);a[n-2]=r[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${r[e+1]})`;return a}(e.map((e,t)=>t),t);return r.map((t,a)=>{let s=`int ${e[a]} = ${n} / ${r[a]}`,i=a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${r[a]}`:`index -= ${e[a]} * ${r[a]}`;return`${s}; ${i};`}).join("")}(["r","c","d"],"inputShape"):w3(["r","c","d"],e);return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${n}
      return ivec3(r, c, d);
    }
  `}(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?w5():w6(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${n}

        setOutput(result);
      }
    `}}class Sc{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){let r,a=Sm(t,n),s=Sg(e,a,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=Sf(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}return a===$.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===$.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===$.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===$.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===$.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(r),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),r}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;let a=Sm(n,r),s=Sg(t,a,r);s in this.freeTextures||(this.freeTextures[s]=[]);let i=Sf(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=eM.get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;let l=this.usedTextures[s],u=l.indexOf(e);if(u<0)throw Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(let e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Sf(e,t,n,r,a){let s,i=function(e,t){switch(e){case $.PACKED_2X2_FLOAT32:return II(t);case $.PACKED_2X2_FLOAT16:return IS(t);case $.UNPACKED_FLOAT32:return Iv(t);case $.UNPACKED_FLOAT16:return Ik(t);case $.PACKED_4X1_UNSIGNED_BYTE:return Iw(t);default:throw Error(`Unknown physical texture type ${e}`)}}(t,r);if(a){let[t,n]=wO(e[0],e[1]);s=t*n}else{var o;let[t,n]=(o=e[0],[e[1],o]);s=t*n}return s*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;else if(t===e.RGBA8)return 4;throw Error(`Unknown internal format ${t}`)}(n,i)}function Sm(e,t){if(e===C.UPLOAD)return $.PACKED_2X2_FLOAT32;if(e===C.RENDER||null==e)return eM.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?$.PACKED_2X2_FLOAT32:$.UNPACKED_FLOAT32:t?$.PACKED_2X2_FLOAT16:$.UNPACKED_FLOAT16;if(e===C.DOWNLOAD||e===C.PIXELS)return $.PACKED_4X1_UNSIGNED_BYTE;throw Error(`Unknown logical texture type ${e}`)}function Sg(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Sy{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}}let Sb="if (isnan(x)) return x;",Sx="return abs(x);",Sv=Sb+`
  return (x < 0.0) ? 0.0 : x;
`,Sk=Sb+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,Sw="return x;",SI=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,SS=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,SN=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;class ST{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}class SC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length);let t=e.length,n=Sh("rc",t),r=Ii(t),a=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),i=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`
      void main() {
        ${r} rc = getOutputCoords();
        vec4 packedInput = getA(${a});

        setOutput(getChannel(packedInput, ${i}));
      }
    `}}let S$=dZ.whereImpl,SE={},SA=eM.getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class SR extends L{constructor(e){let t;if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!eM.getBool("HAS_WEBGL"))throw Error("WebGL is not supported on this device");null!=e?(t=e instanceof IN?e:new IN(wD(eM.getNumber("WEBGL_VERSION"),e)),this.binaryCache={},this.gpgpuCreatedLocally=!1):(t=new IN(wD(eM.getNumber("WEBGL_VERSION"))),this.binaryCache=function(e){return e in SE||(SE[e]={}),SE[e]}(eM.getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0),this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Sc(this.gpgpu),this.numMBBeforeWarning=null==eM.global.screen?1024:eM.global.screen.height*eM.global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new M(this,av)}nextDataId(){return SR.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((eM.getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||eM.getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:C.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){let t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){let t=this.texData.get(e);t.refCount--}}move(e,t,n,r,a){if(eM.getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:C.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t,n,{values:r,dtype:a,complexTensorInfos:s,slice:i,shape:o,isPacked:l}=this.texData.get(e);if(null!=i){let t;t=l?new ST(o,Sw):new Sy(o,Sw);let n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:a}],a),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===a)return r;let u=null!=this.activeTimers;if(u&&(t=rg.now()),"complex64"===a){let e=this.readSync(s.real.dataId),t=this.readSync(s.imag.dataId);n=iI.mergeRealAndImagArrays(e,t)}else n=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=rg.now()-t),this.convertAndCacheOnCPU(e,n)}async read(e){let t,n;if(this.pendingRead.has(e)){let t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}let{values:r,shape:a,slice:s,dtype:i,complexTensorInfos:o,isPacked:l}=this.texData.get(e);if(null!=s){let t;t=l?new ST(a,Sw):new Sy(a,Sw);let n=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:i}],i),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=r)return this.convertAndCacheOnCPU(e);if(eM.getBool("DEBUG")&&!eM.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===eM.getNumber("WEBGL_VERSION"))throw Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null;if("complex64"!==i&&eM.get("WEBGL_BUFFER_SUPPORTED")){t=this.decode(e);let n=this.texData.get(t.dataId);u=this.gpgpu.createBufferFromTexture(n.texture.texture,...w_(a))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){let e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],r=e[1];n=iI.mergeRealAndImagArrays(t,r)}else if(null==u)n=this.getValuesFromTexture(e);else{let e=rg.sizeFromShape(a);n=this.gpgpu.downloadFloat32MatrixFromBuffer(u,e)}if(null!=t&&this.disposeIntermediateTensorInfo(t),null!=u){let e=this.gpgpu.gl;wL(e,()=>e.deleteBuffer(u))}let h=this.convertAndCacheOnCPU(e,n),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach(e=>e(h)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&av.removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){let{values:n,shape:r,slice:a,dtype:s,isPacked:i,texture:o}=this.texData.get(e);if("complex64"===s)throw Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new ST(r,Sw):new Sy(r,Sw);let a=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:s}],s),o=this.readToGPU(a,t);return this.disposeIntermediateTensorInfo(a),o}if(null==o)if(null!=n)throw Error("Data is not on GPU but on CPU.");else throw Error("There is no data on GPU or CPU.");let l=this.decode(e,t.customTexShape);return Object.assign({tensorRef:av.makeTensorFromTensorInfo(l)},this.texData.get(l.dataId).texture)}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let n=t.map(e=>rg.decodeString(e));return sQ(e.shape,e.dtype,n)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return sQ(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){let n=e[t];if(!(eM.getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||596e-10<Math.abs(n)&&65504>Math.abs(n))&&1){if(eM.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){let{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=rg.sizeFromShape(t);if(eM.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...w_(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}let s=eM.getBool("WEBGL_PACK")&&!0===r,i=s?wX(t):t,o=s?new Ig(i):new Im(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),h}timerAvailable(){return eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,n=[],r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();let a=rg.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),s=rg.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,r&&(this.programTimersStack=null);let i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let e=await Promise.all(a);i.kernelMs=rg.sum(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:s[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:rg.now(),endMs:null}}endTimer(e){return eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.endQuery():e.endMs=rg.now(),e}async getQueryTime(e){return eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:n,texShape:r,usage:a,isPacked:s,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,a,s)));let u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=SA){return eM.getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&rg.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){iI.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return S$(e.shape,t)}packedUnaryOp(e,t,n){let r=new ST(e.shape,t),a=this.compileAndRun(r,[e],n);return av.makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){let t=I4(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(eM.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Sx,e.dtype);let t=new Sy(e.shape,Sx),n=this.compileAndRun(t,[e]);return av.makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&rg.isString(n[0])){let a=n.map(e=>rg.encodeString(e));r=this.write(a,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return av.makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){let t=new SC(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new Sp(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){let n=[wj(e.shape),...wK(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},a=new Sd([wj(t),...wK(t)],n),s=this.runWebGLProgram(a,[r],e.dtype,[n],!0);return{dataId:s.dataId,shape:t,dtype:s.dtype}}decode(e,t){let n,{isPacked:r,shape:a,dtype:s}=this.texData.get(e);if(null!=t){let e=rg.sizeFromShape(a),n=t[0]*t[1]*4;rg.assert(e<=n,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let i=wX(a);n=r?new If(i):new Ic(i);let o=[null!=t?t:w_(i)],l=this.runWebGLProgram(n,[{shape:i,dtype:s,dataId:e}],s,o,!0,t);return{dtype:s,shape:a,dataId:l.dataId}}runWebGLProgram(e,t,n,r,a=!1,s){let i,o=this.makeTensorInfo(e.outputShape,n),l=this.texData.get(o.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===T.DENSE&&(l.texShape=(null!=s?s:w_(e.outputShape)).map(e=>2*e)),null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===rg.sizeFromShape(o.shape))return l.values=rg.getTypedArrayFromDType(o.dtype,0),o;let u=[],h=t.map(t=>{if("complex64"===t.dtype)throw Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&rg.sizeFromShape(t.shape)<=eM.getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!wY(n.shape,t.shape)){let e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(o.dataId);let p={shape:o.shape,texData:l,isUniform:!1},d=function(e,t,n){let r="";t.concat(n).forEach(t=>{let a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){let s=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=Io(e.packedInputs,t.shape,s),u="",h="",p="";if(1===o.length&&e.packedInputs){let e=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){let e=rg.computeStrides(o);p=`${e[0]===s[1]}_${e[e.length-1]===s[1]}`}}else h=`${o[0]>1}_${o[1]>1}`;let d=t.shape.length,c=2===o.length&&rg.arraysEqual(t.shape,s),f=1===rg.sizeFromShape(t.shape),m=iI.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&d===n.shape.length&&rg.arraysEqual(s,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${s[0]>1}_${s[1]>1}`;r+=`${d}_${g}_${i?l:""}_${o.length}_${f}_${m}_${c}_${u}_${h}_${p}_${y}_${a}`}else{let e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${a}`}});let a=e.userCode,s=e.constructor.name;return s+("_"+r+"_"+a+`${eM.getNumber("WEBGL_VERSION")}`)}(e,h,p),c=this.getAndSaveBinary(d,()=>(function(e,t,n,r){let a=n.map((e,n)=>{let r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}}),s=a.map(e=>e.shapeInfo),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},o=function(e,t,n){var r,a,s,i;let o,l,u=[];if(e.forEach(e=>{let t=rg.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?u.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(u.push(`uniform sampler2D ${e.name};`),u.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){let{uniformShape:t}=Io(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:u.push(`uniform int ${e.name}Shape;`);break;case 2:u.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:u.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:u.push(`uniform ivec4 ${e.name}Shape;`)}u.push(`uniform ivec2 ${e.name}TexShape;`)}}),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:u.push("uniform int outShape;");break;case 2:u.push("uniform ivec2 outShape;"),u.push("uniform int outShapeStrides;");break;case 3:u.push("uniform ivec3 outShape;"),u.push("uniform ivec2 outShapeStrides;");break;case 4:u.push("uniform ivec4 outShape;"),u.push("uniform ivec3 outShapeStrides;")}u.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(e=>{u.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});let h=u.join("\n"),p=e.map(e=>(function(e,t,n=!1,r){let a="";n?a+=function e(t,n){switch(t.shapeInfo.logicalShape.length){case 0:var r=t;let a=r.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=w2();return`
    vec4 ${s}() {
      return ${i.texture2D}(${a}, halfCR);
    }
  `;case 1:return function(e,t){let n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=w2();if(t)return`
    vec4 ${r}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${n}, uv);
    }
  `;let i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`
    vec4 ${r}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${n}, uv);
    }
  `}(t,n);case 2:return function(e,t){let n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,i=s[0],o=s[1],l=w2();if(null!=s&&rg.arraysEqual(n,s))return t?`
      vec4 ${a}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);

        return ${l.texture2D}(${r}, uv);
      }
    `:`
      vec4 ${a}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);

        return ${l.texture2D}(${r}, uv);
      }
    `;if(t)return`
    vec4 ${a}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${r}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],h=Math.ceil(n[1]/2);return`
    vec4 ${a}(int row, int col) {
      vec2 uv = packedUVfrom2D(${h}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${r}, uv);
    }
  `}(t,n);case 3:return function(t,n){let r=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=t.shapeInfo.texShape,o=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===r[0]){let a=Il(t,r.slice(1));return`
        ${e(a,n)}
        vec4 ${s}(int b, int row, int col) {
          return ${s}(${Iu(["b","row","col"],[1,2])});
        }
      `}let l=w2();if(n)return`
    vec4 ${s}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `;let u=o[0],h=o[1],p=Math.ceil(r[2]/2),d=p*Math.ceil(r[1]/2);return`
    vec4 ${s}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${u}, ${h}, ${d}, ${p}, b, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `}(t,n);default:return function(e,t){let n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=w2();if(t)return`
    vec4 ${r}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${n}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);
    }
  `;let s=e.shapeInfo.logicalShape,i=s.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],h=l[1],p=Math.ceil(s[i-1]/2),d=p*Math.ceil(s[i-2]/2),c="int b, int row, int col",f=`b * ${d} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<i-1;e++)c=`int b${e}, `+c,d*=s[i-e-1],f=`b${e} * ${d} + `+f;return`
    vec4 ${r}(${c}) {
      int index = ${f};
      int texR = index / ${h};
      int texC = index - texR * ${h};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}, ${u});
      return ${a.texture2D}(${n}, uv);
    }
  `}(t,n)}}(e,r):a+=function e(t,n=!1){let r=t.shapeInfo.logicalShape;switch(r.length){case 0:return function(e,t){let n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;let[a,s]=e.shapeInfo.texShape;if(1===a&&1===s)return`
      float ${r}() {
        return sampleTexture(${n}, halfCR);
      }
    `;let i=Ia(n);if(t)return`
    float ${r}() {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});
      return sampleTexture(${n}, uv);
    }
  `;let[o,l]=e.shapeInfo.texShape;return`
    float ${r}() {
      vec2 uv = uvFromFlat(${o}, ${l}, ${i});
      return sampleTexture(${n}, uv);
    }
  `}(t,n);case 1:return function(e,t){let n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`
      float ${r}(int index) {
        ${Is(e)}
      }
    `;let a=e.shapeInfo.texShape,s=a[0],i=a[1];if(1===i&&1===s)return`
      float ${r}(int index) {
        return sampleTexture(${n}, halfCR);
      }
    `;let o=Ia(n);return 1===i?t?`
      float ${r}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));
        return sampleTexture(${n}, uv);
      }
    `:`
      float ${r}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${s}.0);
        return sampleTexture(${n}, uv);
      }
    `:1===s?t?`
      float ${r}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);
        return sampleTexture(${n}, uv);
      }
    `:`
      float ${r}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${n}, uv);
      }
    `:t?`
    float ${r}(int index) {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});
      return sampleTexture(${n}, uv);
    }
  `:`
    float ${r}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${o});
      return sampleTexture(${n}, uv);
    }
  `}(t,n);case 2:return function(t,n){let r=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=t.shapeInfo.texShape;if(null!=i&&rg.arraysEqual(r,i)){if(n)return`
      float ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `;let e=i[0],t=i[1];return`
    float ${s}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${e}.0);
      return sampleTexture(${a}, uv);
    }
  `}let{newShape:o,keptDims:l}=rg.squeezeShape(r);if(o.length<r.length){let r=Il(t,o);return`
      ${e(r,n)}
      float ${s}(int row, int col) {
        return ${s}(${Iu(["row","col"],l)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${s}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${r[1]}, 1)));
        ${Is(t)}
      }
    `;let u=i[0],h=i[1],p=Ia(a);return 1===h?n?`
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${r[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${a}, uv);
    }
  `:1===u?n?`
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${r[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${h}.0, 0.5);
      return sampleTexture(${a}, uv);
    }
  `:n?`
      float ${s}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
        return sampleTexture(${a}, uv);
      }
    `:`
  float ${s}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${r[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${h}, index);
    return sampleTexture(${a}, uv);
  }
`}(t,n);case 3:return function(t,n){let r=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=r[1]*r[2],o=r[2],{newShape:l,keptDims:u}=rg.squeezeShape(r);if(l.length<r.length){let r=Il(t,l);return`
        ${e(r,n)}
        float ${s}(int row, int col, int depth) {
          return ${s}(${Iu(["row","col","depth"],u)});
        }
      `}if(t.shapeInfo.isUniform)return`
      float ${s}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${i}, ${o}, 1)));
        ${Is(t)}
      }
    `;let h=t.shapeInfo.texShape,p=h[0],d=h[1],c=t.shapeInfo.flatOffset;if(d===i&&null==c)return n?`
      float ${s}(int row, int col, int depth) {
        int stride1 = ${a}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
        float ${s}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${o}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${p}.0);
          return sampleTexture(${a}, uv);
        }
      `;if(d===o&&null==c)return n?`
      float ${s}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${s}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${r[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${p}.0);
      return sampleTexture(${a}, uv);
    }
  `;let f=Ia(a);return n?`
    float ${s}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${a}Shape[1] * ${a}Shape[2];
      int stride1 = ${a}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
      return sampleTexture(${a}, uv);
    }
    `:`
      float ${s}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${i} + col * ${o} + depth + ${f};
        vec2 uv = uvFromFlat(${p}, ${d}, index);
        return sampleTexture(${a}, uv);
      }
  `}(t,n);case 4:return function(t,n){let r=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=r[3],o=r[2]*i,l=r[1]*o,{newShape:u,keptDims:h}=rg.squeezeShape(r);if(u.length<r.length){let r=Il(t,u);return`
      ${e(r,n)}
      float ${s}(int row, int col, int depth, int depth2) {
        return ${s}(${Iu(["row","col","depth","depth2"],h)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${s}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${l}, ${o}, ${i}, 1)));
        ${Is(t)}
      }
    `;let p=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,c=d[0],f=d[1],m=`int stride2 = ${a}Shape[3];`,g=`int stride1 = ${a}Shape[2] * stride2;`,y=`int stride0 = ${a}Shape[1] * stride1;`;if(f===l&&null==p)return n?`
      float ${s}(int row, int col, int depth, int depth2) {
        ${m}
        ${g}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${o}, ${i}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;if(f===i&&null==p)return n?`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${r[1]*r[2]}, ${r[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;let b=Ia(a);return n?`
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${m}
      ${g}
      ${y}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${b});
      return sampleTexture(${a}, uv);
    }
  `:`
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${o} +
          depth * ${i} + depth2;
      vec2 uv = uvFromFlat(${c}, ${f}, index + ${b});
      return sampleTexture(${a}, uv);
    }
  `}(t,n);case 5:return function(t){let n=t.shapeInfo.logicalShape,r=t.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=n[4],i=n[3]*s,o=n[2]*i,l=n[1]*o,{newShape:u,keptDims:h}=rg.squeezeShape(n);if(u.length<n.length){let n=Il(t,u);return`
      ${e(n)}
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        return ${a}(${Iu(["row","col","depth","depth2","depth3"],h)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${l}, ${o}, ${i}, ${s})) +
          depth3;
        ${Is(t)}
      }
    `;let p=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,c=d[0],f=d[1];if(f===l&&null==p)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${o}, ${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${c}.0);
        return sampleTexture(${r}, uv);
      }
    `;if(f===s&&null==p)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${n[1]*n[2]*n[3]},
               ${n[2]*n[3]}, ${n[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${c}.0);
        return sampleTexture(${r}, uv);
      }
    `;let m=Ia(r);return`
    float ${a}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${o} + depth * ${i} +
          depth2 * ${s} + depth3 + ${m};
      vec2 uv = uvFromFlat(${c}, ${f}, index);
      return sampleTexture(${r}, uv);
    }
  `}(t);case 6:return function(t){let n=t.shapeInfo.logicalShape,r=t.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),{newShape:s,keptDims:i}=rg.squeezeShape(n);if(s.length<n.length){let n=Il(t,s);return`
      ${e(n)}
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${a}(${Iu(["row","col","depth","depth2","depth3","depth4"],i)});
      }
    `}let o=n[5],l=n[4]*o,u=n[3]*l,h=n[2]*u,p=n[1]*h;if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${p}, ${h}, ${u}, ${l})) +
          dot(
            vec2(depth3, depth4),
            vec2(${o}, 1)));
        ${Is(t)}
      }
    `;let d=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,f=c[0],m=c[1];if(m===p&&null==d)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${h}, ${u}, ${l}, ${o})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${f}.0);
        return sampleTexture(${r}, uv);
      }
    `;if(m===o&&null==d)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${n[1]*n[2]*n[3]*n[4]},
               ${n[2]*n[3]*n[4]},
               ${n[3]*n[4]},
               ${n[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${f}.0);
        return sampleTexture(${r}, uv);
      }
    `;let g=Ia(r);return`
    float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${p} + col * ${h} + depth * ${u} +
          depth2 * ${l} + depth3 * ${o} + depth4 + ${g};
      vec2 uv = uvFromFlat(${f}, ${m}, index);
      return sampleTexture(${r}, uv);
    }
  `}(t);default:throw Error(`${r.length}-D input sampling is not yet supported`)}}(e,r);let s=e.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(n?a+=function(e,t){let n,r=e.name,a=r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=w7(e.shapeInfo.logicalShape,t.logicalShape),l=Ii(i),u=i-s,h=["x","y","z","w","u","v"];n=0===s?"":i<2&&o.length>=1?"coords = 0;":o.map(e=>`coords.${h[e+u]} = 0;`).join("\n");let p="";p=i<2&&s>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${h[t+u]}`).join(", ");let d="return outputValue;",c=1===rg.sizeFromShape(e.shapeInfo.logicalShape),f=1===rg.sizeFromShape(t.logicalShape);if(1!==s||c||f){if(c&&!f)d=1===i?`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:`
        return vec4(outputValue.x);
      `;else if(o.length){let e=s-2,t=s-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d=`
      return vec4(outputValue.xy, outputValue.xy);
    `;return`
    vec4 ${"get"+a+"AtOutCoords"}() {
      ${l} coords = getOutputCoords();
      ${n}
      vec4 outputValue = get${a}(${p});
      ${d}
    }
  `}(e,t):a+=function(e,t){let n,r=e.name,a=r.charAt(0).toUpperCase()+r.slice(1),s="get"+a+"AtOutCoords",i=t.texShape,o=e.shapeInfo.texShape,l=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&l===u&&null==e.shapeInfo.flatOffset&&rg.arraysEqual(o,i))return`
      float ${s}() {
        return sampleTexture(${r}, resultUV);
      }
    `;let h=Ii(u),p=w7(e.shapeInfo.logicalShape,t.logicalShape),d=u-l,c=["x","y","z","w","u","v"];n=0===l?"":u<2&&p.length>=1?"coords = 0;":p.map(e=>`coords.${c[e+d]} = 0;`).join("\n");let f="";return f=u<2&&l>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${c[t+d]}`).join(", "),`
    float ${s}() {
      ${h} coords = getOutputCoords();
      ${n}
      return get${a}(${f});
    }
  `}(e,t)),a})(e,t,n.packedInputs,n.enableShapeUniforms)).join("\n"),d=t.texShape,c=w2(),f=(r=c,`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `),m=(a=c,`${a.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${a.varyingFs} vec2 resultUV;
    ${a.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${a.defineSpecialNaN}
    ${a.defineSpecialInf}
    ${a.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${w9}
    ${Ie}
    ${It}
  `);return t.isPacked?(o=function(e,t,n){switch(e.length){case 0:return Ir();case 1:var r=0,a=t,s=n;let i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return 1===i[0]?s?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${i[1]}.0);
      }
    `:1===i[1]?s?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${i[0]}.0);
      }
    `:s?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${i[0]}, ${i[1]}));
      return 2 * (resTexRC.x * ${i[1]} + resTexRC.y);
    }
  `;case 2:var o=e,l=t,u=n;let h=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];if(rg.arraysEqual(o,l))return u?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${h[0]}, ${h[1]}));
      }
    `;let p=Math.ceil(o[1]/2);return u?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${h[0]}, ${h[1]}));

      int index = resTexRC.x * ${h[1]} + resTexRC.y;
      int r = 2 * (index / ${p});
      int c = imod(index, ${p}) * 2;

      return ivec2(r, c);
    }
  `;case 3:var d=e,c=t,f=n;if(f)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let m=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)],g=Math.ceil(d[2]/2),y=g*Math.ceil(d[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${m[0]}, ${m[1]}));
      int index = resTexRC.x * ${m[1]} + resTexRC.y;

      int b = index / ${y};
      index -= b * ${y};

      int r = 2 * (index / ${g});
      int c = imod(index, ${g}) * 2;

      return ivec3(b, r, c);
    }
  `;default:return function(e,t,n){if(n)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),s=a*Math.ceil(e[e.length-2]/2),i=s,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`
      int b${t} = index / ${i};
      index -= b${t} * ${i};
    `+o,l=`b${t}, `+l;return`
    ivec${e.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      int index = resTexRC.x * ${r[1]} + resTexRC.y;

      ${o}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${a});
      int c = imod(index, ${a}) * 2;

      return ivec${e.length}(${l});
    }
  `}(e,t,n)}}(t.logicalShape,d,n.enableShapeUniforms),s=c,l=`
    void setOutput(vec4 val) {
      ${s.output} = val;
    }
  `):(o=function(e,t,n){switch(e.length){case 0:return Ir();case 1:return r=0,a=t,s=n,1===a[0]?s?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${a[1]}.0);
      }
    `:1===a[1]?s?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${a[0]}.0);
      }
    `:s?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));
      return resTexRC.x * ${a[1]} + resTexRC.y;
    }
  `;case 2:return i=e,o=t,l=n,rg.arraysEqual(i,o)?l?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `:1===i[1]?l?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${o[0]}, ${o[1]}));
        int index = resTexRC.x * ${o[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:1===i[0]?l?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${o[0]}, ${o[1]}));
        int index = resTexRC.x * ${o[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:l?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = index / ${i[1]};
      int c = index - r * ${i[1]};
      return ivec2(r, c);
    }
  `;case 3:var r,a,s,i,o,l,u=e,h=t,p=n;if(p){let e=w4(["r","c","d"],u);return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${e}
    return ivec3(r, c, d);
  }
`}let d=w3(["r","c","d"],u);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${h[0]}, ${h[1]}));
      int index = resTexRC.x * ${h[1]} + resTexRC.y;
      ${d}
      return ivec3(r, c, d);
    }
  `;case 4:var c=e,f=t,m=n;if(m){let e=w4(["r","c","d","d2"],c);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${e}
      return ivec4(r, c, d, d2);
    }
  `}let g=w3(["r","c","d","d2"],c);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${f[0]}, ${f[1]}));
      int index = resTexRC.x * ${f[1]} + resTexRC.y;
      ${g}
      return ivec4(r, c, d, d2);
    }
  `;case 5:var y=e,b=t;let x=w3(["r","c","d","d2","d3"],y);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${b[0]},
                             ${b[1]}));

      int index = resTexRC.x * ${b[1]} + resTexRC.y;

      ${x}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;case 6:var v=e,k=t;let w=w3(["r","c","d","d2","d3","d4"],v);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${k[0]}, ${k[1]}));
      int index = resTexRC.x * ${k[1]} + resTexRC.y;

      ${w}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;default:throw Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,d,n.enableShapeUniforms),i=c,l=`
    void setOutput(float val) {
      ${i.output} = vec4(val, 0, 0, 0);
    }
  `),n.packedInputs&&(m+=In),[m,f,l,h,o,p,n.userCode].join("\n")}(a,i,t),l=function(e,t){let n=wq(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(wL(e,()=>e.shaderSource(n,t)),wL(e,()=>e.compileShader(n)),eM.get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw wB(t,e.getShaderInfoLog(n)),Error("Failed to compile fragment shader.");return n}(e.gl,o),u=e.createProgram(l);return eM.get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},Ih(e,t,u))})(this.gpgpu,e,h,p)),f=null!=this.activeTimers;f&&(i=this.startTimer()),eM.get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,a){t.program.enableShapeUniforms||(Ip(t.inShapeInfos,n),Ip([t.outShapeInfo],[r]));let s=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):e.setOutputMatrixTexture(s.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===eM.getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,r)=>{let a=t.program.variableNames[r],s=t.uniformLocations[a],i=t.uniformLocations[`offset${a}`],o=t.inShapesLocations[`${a}Shape`],l=t.inTexShapesLocations[`${a}TexShape`];if(o){let{uniformShape:r}=Io(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(o,new Int32Array(r));break;case 2:e.gl.uniform2iv(o,new Int32Array(r));break;case 3:e.gl.uniform3iv(o,new Int32Array(r));break;case 4:e.gl.uniform4iv(o,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=s){if(n.isUniform){if(2>rg.sizeFromShape(n.shape))e.gl.uniform1f(s,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(s,t)}return}null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,s,r)}});let o=t.outShapeLocation;if(o)switch(r.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(r.shape))}if(t.outShapeStridesLocation){let n=rg.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach((n,r)=>{let s=t.customUniformLocations[r],i=a[r];if("float"===n.type)e.gl.uniform1fv(s,i);else if("vec2"===n.type)e.gl.uniform2fv(s,i);else if("vec3"===n.type)e.gl.uniform3fv(s,i);else if("vec4"===n.type)e.gl.uniform4fv(s,i);else if("int"===n.type)e.gl.uniform1iv(s,i);else if("ivec2"===n.type)e.gl.uniform2iv(s,i);else if("ivec3"===n.type)e.gl.uniform3iv(s,i);else if("ivec4"===n.type)e.gl.uniform4iv(s,i);else throw Error(`uniform type ${n.type} is not supported yet.`)}),e.executeProgram()}(this.gpgpu,c,h,p,r),u.forEach(e=>this.disposeIntermediateTensorInfo(e)),f&&(i=this.endTimer(i),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(i)}));let m=eM.get("WEBGL_FLUSH_THRESHOLD");if(m>0){let e=rg.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!eM.getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===a){let e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,a=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,r,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(eM.getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ix(()=>{if(!eM.get("WEBGL_RENDER_FLOAT32_ENABLED")){let e=eM.getBool("DEBUG");eM.set("DEBUG",!1);let t=this.abs(uq(1e-8)).dataSync()[0];if(eM.set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){let t,n=this.texData.get(e),{shape:r,dtype:a,values:s,texture:i,usage:o,isPacked:l}=n;if(null!=i)return;let u=null!=this.activeTimers;u&&(t=rg.now());let h=n.texShape;if(null==h&&(n.texShape=h=function(e,t=!1){let n=eM.getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=eM.getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");r===1/0&&eM.getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map((t,n)=>n>=e.length-2?rg.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length&&(e=rg.squeezeShape(e).newShape);let a=rg.sizeFromShape(e),s=null;e.length<=1&&a<=n?s=[1,a]:2===e.length&&e[0]<=n&&e[1]<=n?s=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?s=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?s=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?s=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(s=[e[0],e[1]*e[2]*e[3]]);let i=null!=s&&Math.max(...s)>r&&Math.min(...s)<=(t?2:1)&&Math.min(...s)>0;if(null==s||i)if(t){let t=wj(e),n=2,r=2;e.length&&([n,r]=wK(e)),a=n/2*t*(r/2),s=rg.sizeToSquarishShape(a).map(e=>2*e)}else s=rg.sizeToSquarishShape(a);return s}(r,l)),null!=s){let e,i=wX(r),o=h[1],p=h[0],d=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!d)&&([o,p]=wO(h[0],h[1])),e=l?new Ib(i,d):new Iy(i,d);let c=d?[p,o]:h,f=this.makeTensorInfo(c,a),m=this.texData.get(f.dataId);d?m.usage=C.PIXELS:m.usage=C.UPLOAD,m.texShape=c,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);let g=[[p,o]],y=this.runWebGLProgram(e,[f],a,g,!0),b=this.texData.get(y.dataId);n.texShape=b.texShape,n.isPacked=b.isPacked,n.usage=b.usage,eM.get("ENGINE_COMPILE_ONLY")?this.disposeData(y.dataId):(n.texture=b.texture,n.values=null,this.texData.delete(y.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=rg.now()-t)}else n.texture=this.acquireTexture(h,o,a,l)}convertAndCacheOnCPU(e,t){let n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){let n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){let e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*rg.bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(let[,t]of Object.entries(this.binaryCache)){let n=new Promise(e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}});e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await dQ(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw wB(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),Error("Failed to compile fragment shader.");throw Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(let[,e]of Object.entries(this.binaryCache)){let{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:a,inShapesLocations:s,inTexShapesLocations:i,outShapeLocation:o,outShapeStridesLocation:l,outTexShapeLocation:u}=Ih(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=a,e.inShapesLocations=s,e.inTexShapesLocations=i,e.outShapeLocation=o,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}}SR.nextDataId=0,aw.isBrowser()&&iw("webgl",()=>new SR,2);let SF=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;class SD{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=iI.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=Id(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}}let S_=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;class SO{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=iI.assertAndGetBroadcastShape(t,n);let a=this.outputShape.length;this.enableShapeUniforms=Id(a);let s="";if(r)if(0===a||1===rg.sizeFromShape(this.outputShape))s=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else{let e=Ii(a);if(s=`
          ${e} coords = getOutputCoords();
        `,1===a)this.enableShapeUniforms?s+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:s+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let e=Sh("coords",a);this.enableShapeUniforms?s+=`
            bool nextRowOutOfBounds =
              (${e[a-2]} + 1) >= outShape[${a} - 2];
            bool nextColOutOfBounds =
              (${e[a-1]} + 1) >= outShape[${a} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:s+=`
            bool nextRowOutOfBounds =
              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};
            bool nextColOutOfBounds =
              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${s}

        setOutput(result);
      }
    `}}function SM(e){let{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function SL(e){let{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(s.dataId);return i.complexTensorInfos={real:SM({inputs:{x:r},backend:n}),imag:SM({inputs:{x:a},backend:n})},s}let Sz="return (a < 0.) ? b * a : a;",SP=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,SB="return (a < 0.) ? b * a : a;",SW=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,SU="if (isnan(x)) return x;";function SV({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:a,backend:s})=>{let i,{x:o}=a,l=r||o.dtype;if(s.shouldExecuteOnCPU([o])&&null!=n){let e=n(s.texData.get(o.dataId).values,l);return s.makeTensorInfo(o.shape,l,e)}return i=eM.getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new ST(o.shape,t):new Sy(o.shape,e),s.runWebGLProgram(i,[o],l)}}function SG({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:s}){return({inputs:i,backend:o})=>{let l,{a:u,b:h}=i;if(r&&"complex64"===u.dtype){let t=o.texData.get(u.dataId),n=o.texData.get(h.dataId),[r,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{let[n,r]=t,a={dataId:n.dataId,dtype:n.dtype,shape:u.shape},s={dataId:r.dataId,dtype:r.dtype,shape:h.shape},i=new SD(e,u.shape,h.shape);return o.runWebGLProgram(i,[a,s],ah(n.dtype,r.dtype))}),s=SL({inputs:{real:r,imag:a},backend:o});return o.disposeIntermediateTensorInfo(r),o.disposeIntermediateTensorInfo(a),s}let p=s||ah(u.dtype,h.dtype);if(("string"===u.dtype||"string"===h.dtype||o.shouldExecuteOnCPU([u,h]))&&null!=a){let e=o.texData.get(u.dataId).values,t=o.texData.get(h.dataId).values,n="string"===u.dtype?iI.fromUint8ToStringArray(e):e,r="string"===u.dtype?iI.fromUint8ToStringArray(t):t,[s,i]=a(u.shape,h.shape,n,r,p),l=o.makeTensorInfo(i,p);return o.texData.get(l.dataId).values=s,l}return l=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new SO(t,u.shape,h.shape,n):new SD(e,u.shape,h.shape),o.runWebGLProgram(l,[u,h],p)}}function SH(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?SS:Sv;if("elu"===e)return t?SI:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?SN:Sk;if("prelu"===e)return t?SW:SB;else if("leakyrelu"===e)return t?SP:Sz;else if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class Sq{constructor(e,t,n,r=!1,a=!1,s=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=Id(this.outputShape.length);let u=Math.ceil((r?e[1]:e[2])/2),h=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],d="",c="";i&&(d=o?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }`:l?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }`:`vec4 activation(vec4 x) {
          ${i}
        }`,c="result = activation(result);"),s&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let f="rc.x",m="rc.x";e[0]<t[0]?f=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(m=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`
      ${d}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${u}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${u}; i++) {
          int batchA = ${f};
          int batchB = ${m};
          vec4 a = getMatrixA(batchA, ${r?"i * 2, rc.y":"rc.y, i * 2"});
          vec4 b = getMatrixB(batchB, ${a?"rc.z, i * 2":"i * 2, rc.z"});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${p[0]});
          result += (${h[1]} * ${p[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${s?"result += getBiasAtOutCoords();":""}

        ${c}

        setOutput(result);
      }
    `}}let Sj={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class SK{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=iI.assertAndGetBroadcastShape(t,n),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}}let SX="return a * b;";function SY(e){let t,{inputs:n,backend:r}=e,{a:a,b:s}=n,i=iI.upcastType(a.dtype,s.dtype);if("complex64"===a.dtype){let e=r.texData.get(a.dataId),t=r.texData.get(s.dataId),n=new SK(Sj.REAL,a.shape,s.shape),i=new SK(Sj.IMAG,a.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],l=r.runWebGLProgram(n,o,"float32"),u=r.runWebGLProgram(i,o,"float32"),h=SL({inputs:{real:l,imag:u},backend:r});return r.disposeIntermediateTensorInfo(l),r.disposeIntermediateTensorInfo(u),h}if(r.shouldExecuteOnCPU([a,s])){let e=r.texData.get(a.dataId),t=r.texData.get(s.dataId),[n,o]=IK(a.shape,s.shape,e.values,t.values,i),l=r.makeTensorInfo(o,i);return r.texData.get(l.dataId).values=n,l}return t=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new SO(SX,a.shape,s.shape):new SD(SX,a.shape,s.shape),r.runWebGLProgram(t,[a,s],i)}function SZ(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,i=rg.sizeFromShape(a.shape),o=rg.inferFromImplicitShape(s,i),l=rg.sizeFromShape(o);rg.assert(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);let u=n.texData.get(a.dataId);return!u.isPacked||wY(a.shape,o)||null!==u.texture&&wY(u.shape,o)?(n.incRef(a.dataId),{dataId:a.dataId,shape:o,dtype:a.dtype}):function(e,t,n){let r=[wj(e.shape),...wK(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},s=new Sd([wj(t),...wK(t)],r),i=n.runWebGLProgram(s,[a],e.dtype,[r],!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}(a,o,n)}class SJ{constructor(e,t){this.variableNames=["x"];let{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let i=4*Math.floor(n/4),o=n%4,l="sumValue += dot(values, ones);";if(null!=t){let e=1/t;l=`sumValue += dot(values * ${rg.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";a%n>0&&(u=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${l}
        }

        int inIdx = inOffset + ${i};
        if (${1===o}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${l}
        } else if (${2===o}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${l}
        } else if (${3===o}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${l}
        }
        setOutput(sumValue);
      }
    `}}class SQ{constructor(e,t){this.variableNames=["x"];let{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");let u=4*Math.floor(n/4),h=n%4,p=`
      if (${"sum"===t}) {
        sumValue += dot(values, ones);
      } else if (${"prod"===t}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${o}(values, minMaxValue);
        if (${"min"===t} || ${"max"===t}) {
          minMaxValue = ${o}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,d="vec4";"all"===t?(i="1.0",p=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,d="bvec4"):"any"===t&&(i="0.0",p=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,d="bvec4");let c="";a%n>0&&(c=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${p}
        }

        int inIdx = inOffset + ${u};
        if (${1===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${p}
        } else if (${2===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${p}
        } else if (${3===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${p}
        }
        setOutput(${l});
      }
    `}}function S0(e,t,n,r){let a=function(e){let t=[];for(;0===t.length||1!==t[t.length-1].outSize;){let n=t.length?t[t.length-1].outSize:e[1],r=iI.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape),s=e;for(let i=0;i<a.length;i++){let o,l,{inSize:u,windowSize:h,outSize:p}=a[i];o="mean"===n?0===i?new SJ({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p},u):new SJ({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p}):new SQ({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p},n),l=s,s=r.runWebGLProgram(o,[s],t),l.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(l)}return s}class S1{constructor(e,t){this.variableNames=["A"];let n=Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;let r=Ii(this.rank),a=function(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`
    void main() {
      ${r} resRC = getOutputCoords();
      setOutput(getA(${a}));
    }
    `}}class S2{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let n=Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let r=Ii(this.rank),a=Su("rc",this.rank),s=Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=a[e];let i=`vec2(${s.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${s.join()}), ${i})`;this.userCode=`
    void main() {
      ${r} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${l};
      if(${o}) {
        result[1] = ${l};
      }
      --${a[this.rank-1]};
      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {
        result[2] = ${l};
        if(${o}) {
          result[3] = ${l};
        }
      }
      setOutput(result);
    }
    `}}function S3(e,t,n){let r=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new S2(e.shape,t):new S1(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function S4(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;return function(e,t,n,r){let a=e.shape.length,s=rg.parseAxisParam(t,e.shape),i=s,o=iI.getAxesPermutation(i,a),l=null!=o,u=e;l&&(u=S3(e,o,r),i=iI.getInnerMostAxes(i.length,a)),iI.assertAxesAreInnerMostDims("sum",i,a);let[h,p]=iI.computeOutAndReduceShapes(u.shape,i),d=h;n&&(d=iI.expandShapeToKeepDim(h,s));let c=rg.sizeFromShape(p),f=SZ({inputs:{x:u},attrs:{shape:[rg.sizeFromShape(e.shape)/c,c]},backend:r}),m=S0(f,ap(e.dtype),"sum",r),g=SZ({inputs:{x:m},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(m),l&&r.disposeIntermediateTensorInfo(u),g}(a,s,i,n)}function S6(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{perm:i}=a,o=Array(s.shape.length);for(let e=0;e<o.length;e++)o[e]=s.shape[i[e]];if(r.shouldExecuteOnCPU([s])){let e=So(r.texData.get(s.dataId).values,s.shape,s.dtype,i,o);t=r.makeTensorInfo(o,s.dtype),r.texData.get(t.dataId).values=e}else t=S3(s,i,r);return t}function S5({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){let u,h=e.shape.length,p=t.shape.length,d=n?e.shape[h-2]:e.shape[h-1],c=r?t.shape[p-1]:t.shape[p-2],f=n?e.shape[h-1]:e.shape[h-2],m=r?t.shape[p-2]:t.shape[p-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=rg.sizeFromShape(g),x=rg.sizeFromShape(y),v=iD.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,m]);rg.assert(d===c,()=>`Error in matMul: inner shapes (${d}) and (${c}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`);let k=n?[b,d,f]:[b,f,d],w=r?[x,m,c]:[x,c,m],I=SZ({inputs:{x:e},backend:a,attrs:{shape:k}}),S=SZ({inputs:{x:t},backend:a,attrs:{shape:w}}),N=[I,S],T=Math.max(b,x),C=n?I.shape[1]:I.shape[2],$=null!=s,E=null!=i,A="leakyrelu"===l,R=null!=l?SH(l,!0):null,F=$||E||A||null!=R;if((1===f||1===m)&&C>1e3&&!1===F){let e=I,t=S;n&&(e=S6({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),N.push(e)),r&&(t=S6({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),N.push(t));let s=1!==m,i=1===m,o=e;s&&(o=SZ({inputs:{x:e},backend:a,attrs:{shape:[T,C,1]}}),N.push(o));let l=t;i&&(l=SZ({inputs:{x:t},backend:a,attrs:{shape:[T,1,C]}}),N.push(l));let h=SY({inputs:{a:o,b:l},backend:a});u=S4({inputs:{x:h},backend:a,attrs:{axis:1===m?2:1,keepDims:!0}}),N.push(h)}else{let l=ah(e.dtype,t.dtype),h=new Sq(k,w,[T,f,m],n,r,$,R,E,A),p=[I,S];if(null!=s&&p.push(s),E&&p.push(i),A){let e=a.makeTensorInfo([],"float32",rg.createScalarValue(o,"float32"));p.push(e),N.push(e)}u=a.runWebGLProgram(h,p,l)}let D=SZ({inputs:{x:u},backend:a,attrs:{shape:v}});for(let e of(N.push(u),N))a.disposeIntermediateTensorInfo(e);return D}let S8="return abs(x);",S7=SV({opSnippet:Sb+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`}),S9=SV({opSnippet:Sb+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`}),Ne="return a + b;",Nt=SG({opSnippet:Ne,packedOpSnippet:Ne,supportsComplex:!0,cpuKernelImpl:IC});class Nn{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});let r=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${n.join("\n        ")}

        float result = ${r};
        setOutput(result);
      }
    `}}class Nr{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});let r=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${n.join("\n        ")}

        vec4 result = ${r};
        setOutput(result);
      }
    `}}class Na{constructor(e,t,n){this.variableNames=["A"];let{windowSize:r,batchSize:a,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,s],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${r}; i++) {
          int inIdx = ${n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};
          float candidate = getA(batch, inIdx);
          if (candidate ${"max"===t?">":"<"} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}}class Ns{constructor(e,t,n,r){let a,s;this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,rg.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);let i=Math.ceil(e[e.length-1]/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");let o=this.outputShape,l=o.length,u=Ii(l),h=Sh("coords",l);if(1===i){let e=Ii(s=l+1);a=`
        ${e} sourceLocR = ${e}(${h.join()}, 0);
        ++${h[l-1]};
        ${e} sourceLocG = ${e}(${h.join()}, 0);
        ++${h[l-2]};
        ${e} sourceLocA = ${e}(${h.join()}, 0);
        --${h[l-1]};
        ${e} sourceLocB = ${e}(${h.join()}, 0);
        --${h[l-2]};`}else s=l,a=`
        ${u} sourceLocR = coords;
        ++${h[l-1]};
        ${u} sourceLocG = coords;
        ++${h[l-2]};
        ${u} sourceLocA = coords;
        --${h[l-1]};
        ${u} sourceLocB = coords;
        --${h[l-2]};`;let p=["x","y","z","w","u","v"].slice(0,s),d="."+p[s-1],c=p.map(e=>"int "+e),f=Sh("sourceLocR",s-1).concat("inIdx.r"),m=Sh("sourceLocG",s-1).concat("inIdx.g"),g=Sh("sourceLocB",s-1).concat("inIdx.b"),y=Sh("sourceLocA",s-1).concat("inIdx.a"),b="max"===n?"greaterThan":"lessThan",x=r?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${f.join()}),
                             getBestIndicesAChannel(${m.join()}),
                             getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()})));`,v=`vec4(
            getAChannel(${f.join()}),
            hasNextCol ? getAChannel(${m.join()}) : 0.,
            hasNextRow ? getAChannel(${g.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,k=r?"":`
      float getBestIndicesAChannel(${c.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${c.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${k}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${h[l-1]} < ${o[l-1]-1};
        bool hasNextRow = ${h[l-2]} < ${o[l-2]-1};
        ${a}
        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},
          sourceLocB${d}, sourceLocA${d}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${v};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${x}
          vec4 candidate = ${v};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${b}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}function Ni(e,t,n,r){let a=[n];if(iI.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,t.shape.length),!eM.getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let n=[],s=e.texData.get(t.dataId),i=null!==s&&s.isPacked,o=t;i&&n.push(o=e.unpackTensor(t));let[l,u]=iI.computeOutAndReduceShapes(o.shape,a),h=SZ({inputs:{x:o},backend:e,attrs:{shape:[-1,rg.sizeFromShape(u)]}});n.push(h);let p=function e(t,n,r,a=null){let s=n.shape[0],i=n.shape[1];null!=a&&(s=a.shape[0],i=a.shape[1]);let o=iI.computeOptimalWindowSize(i),l=new Na({windowSize:o,inSize:i,batchSize:s,outSize:Math.ceil(i/o)},r,null==a),u=[n];null!=a&&u.push(a);let h=t.runWebGLProgram(l,u,"int32");if(1===h.shape[1])return h;let p=e(t,n,r,h);return t.disposeIntermediateTensorInfo(h),p}(e,h,r);n.push(p);let d=SZ({inputs:{x:p},backend:e,attrs:{shape:l}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),d}return function e(t,n,r,a=null){let s=null!=a?a.shape:n.shape,i=s[s.length-1],o=new Ns(s,iI.computeOptimalWindowSize(i),r,null==a),l=null==a?[n]:[n,a],u=t.runWebGLProgram(o,l,"int32");if(u.shape.length===n.shape.length){let a=e(t,n,r,u);return t.disposeIntermediateTensorInfo(u),a}return u}(e,t,r)}let No=SV({opSnippet:Sb+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`}),Nl=SV({opSnippet:Sb+"return log(x + sqrt(x * x + 1.0));"}),Nu=SV({opSnippet:Sb+`
  return atan(x);
`}),Nh=SG({opSnippet:SF+`
  return atan(a, b);
`,packedOpSnippet:`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+S_+`
  return result;
`}),Np=SV({opSnippet:Sb+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`});class Nd{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw Error("Cannot compute positions for average pool.");let s=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=e.padInfo.top,c=e.padInfo.left;this.outputShape=e.outShape;let f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,y="0.0";if(f||(y="-1.0 / 1e-20"),n){this.userCode=`
        const ivec2 strides = ivec2(${i}, ${o});
        const ivec2 pads = ivec2(${d}, ${c});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value >= currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${r?a?m:g:`wR * ${p} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");let x=4*Math.floor(s/4),v=s%4,k=`
      if (${f}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${i}, ${o});
      const ivec2 pads = ivec2(${d}, ${c});
      const float initializationValue = ${y};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${y});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${l}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${x}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${k}
          }

          int xC = xCCorner + ${x};
          if (${1===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${k}
          } else if (${2===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${k}
          } else if (${3===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${k}
          }
        }
        setOutput(${b});
      }
    `}}class Nc{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw Error("Cannot compute positions for average pool.");let s=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,h=e.dilationHeight,p=e.dilationWidth,d=e.effectiveFilterDepth,c=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;let b="avg"===t,x="0.0";if(b||(x="-1.0 / 1e-20"),n){this.userCode=`
        const ivec3 strides =
            ivec3(${i}, ${o}, ${l});
        const ivec3 pads = ivec3(${m}, ${g}, ${y});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${c};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${f};
                  wC += ${p}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value >= currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${r?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${c} * ${f} +
                      wR * ${f} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");let k=4*Math.floor(s/4),w=s%4,I=`
      if (${b}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${i}, ${o}, ${l});
      const ivec3 pads = ivec3(${m}, ${g}, ${y});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${c};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${k}; wC += 4) {
              int xC = xCCorner + wC * ${p};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                getValue(batch, xD, xR, xC + 2 * ${p}, ch),
                getValue(batch, xD, xR, xC + 3 * ${p}, ch)
              );

              ${I}
            }

            int xC = xCCorner + ${k};
            if (${1===w}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${I}
            } else if (${2===w}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                initializationValue,
                initializationValue
              );

              ${I}
            } else if (${3===w}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                getValue(batch, xD, xR, xC + 2 * ${p}, ch),
                initializationValue
              );

              ${I}
            }
          }
          setOutput(${v});
        }
      }
    `}}class Nf{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,h=l-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${1/(t*n)});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
            wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${l};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}}class Nm{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterDepth,p=e.effectiveFilterHeight,d=e.effectiveFilterWidth,c=h-1-e.padInfo.front,f=p-1-e.padInfo.top,m=d-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${c}, ${f}, ${m});
      const float avgMultiplier = float(${1/(t*n*r)});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${a}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${p};
              wR += ${l}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Ng{constructor(e,t,n,r,a,s){this.outputShape=[],this.variableNames=["x","mean","variance"],iI.assertAndGetBroadcastShape(e,t),iI.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(iI.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=a&&(iI.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${o};
        float inv = scale * inversesqrt(variance + float(${s}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}}class Ny{constructor(e,t,n,r,a,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],iI.assertAndGetBroadcastShape(e,t),iI.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(iI.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=a&&(iI.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${o};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${s}));

        setOutput((x - mean) * inv + offset);
      }
    `}}class Nb{constructor(e){let t;this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let n=Ii(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let r=function(e){if(1===e)return"sourceLoc";if(e<=6)return Nx.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank),a=e.map((e,t)=>`sourceLoc.${Nx[t]} = start[${t}] + coords.${Nx[t]};`);t=`
        ${n} sourceLoc;
        ${n} coords = getOutputCoords();
        ${a.join("\n")}
      `,this.userCode=`
      void main() {
        ${t}
        setOutput(getSource(${r}));
      }
    `}}let Nx=["x","y","z","w","u","v"];class Nv{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=Ii(this.rank),n=Sh("coords",this.rank),r=Sh("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${a})`,i=`
      result.x = ${s};
      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {
        ++${r[this.rank-1]};
        result.y = ${s};
        --${r[this.rank-1]};
      }
    `,o=1===this.rank?"":`
      --${n[this.rank-1]};
      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {
        ++${r[this.rank-2]};
        result.z = ${s};
        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {
          ++${r[this.rank-1]};
          result.w = ${s};
        }
      }
    `,l=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${l}
        vec4 result = vec4(0.);
        ${i}
        ${o}
        setOutput(result);
      }
    `}}function Nk(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:i}=r,[o,l]=i7.parseSliceParams(a,s,i);if(i7.assertParamsValid(a,o,l),0===rg.sizeFromShape(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){let e=I6(n.texData.get(a.dataId).values,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,e)}let{isPacked:u}=n.texData.get(a.dataId),h=i7.isSliceContinous(a.shape,o,l);if(u||!h){let e=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Nv(l):new Nb(l),t=[o];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,r){let a=r.texData.get(e.dataId),s=r.makeTensorInfo(n,e.dtype),i=r.texData.get(s.dataId);Object.assign(i,a),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=i7.computeFlatOffset(t,rg.computeStrides(e.shape));a.slice&&(o+=a.slice.flatOffset),i.slice={flatOffset:o,origDataId:a.slice&&a.slice.origDataId||e.dataId};let l=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,l+1),s}(a,o,l,n)}let Nw=SG({opSnippet:"return float(a != b);",cpuKernelImpl:IY,dtype:"bool"});function NI(e){let{inputs:t,backend:n}=e,{input:r}=t;return SM({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}let NS="return ceil(x);",NN=SV({opSnippet:NS,packedOpSnippet:NS,cpuKernelImpl:IR});class NT{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}}class NC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}class N${constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}}function NE(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}class NA{constructor(e){this.outputShape=[],this.outputShape=iI.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`);let t=Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];let n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){let r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}let r=t.length,a=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${n.join("\n        ")}
      }
    `}}class NR{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=iI.computeOutShape(e,t);let n=this.outputShape,r=n.length,a=Ii(r),s=Sh("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>`T${t}`);let o=Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];let l=i[t],u=i.slice(-2),h=i.join(),p=`if (${l} < ${o[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;for(let e=1;e<o.length;e++){let t=o[e-1];p+=`
        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {
          return getChannel(
            getT${e}(${NF(i,l,t)}),
            vec2(${NF(u,l,t)}));
        }`}let d=o.length,c=o[o.length-1];p+=`
        return getChannel(
          getT${d}(${NF(i,l,c)}),
          vec2(${NF(u,l,c)}));`,this.userCode=`
      float getValue(${i.map(e=>"int "+e)}) {
        ${p}
      }

      void main() {
        ${a} coords = getOutputCoords();
        vec4 result = vec4(getValue(${s}), 0., 0., 0.);

        ${s[r-1]} = ${s[r-1]} + 1;
        if (${s[r-1]} < ${n[r-1]}) {
          result.g = getValue(${s});
        }

        ${s[r-2]} = ${s[r-2]} + 1;
        if (${s[r-2]} < ${n[r-2]}) {
          result.a = getValue(${s});
        }

        ${s[r-1]} = ${s[r-1]} - 1;
        if (${s[r-2]} < ${n[r-2]} &&
            ${s[r-1]} < ${n[r-1]}) {
          result.b = getValue(${s});
        }
        setOutput(result);
      }
    `}}function NF(e,t,n){let r=e.indexOf(t);return e.map((e,t)=>t===r?`${e} - ${n}`:e).join()}function ND(e){let{inputs:t,backend:n}=e,{input:r}=t;return SM({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}function N_(e){let{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=rg.parseAxisParam(a,t[0].shape)[0],i=t.map(e=>e.shape);iI.assertParamsConsistent(i,s);let o=iI.computeOutShape(t.map(e=>e.shape),s);if(0===rg.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>rg.sizeFromShape(e.shape)>0);return 1===l.length?SM({inputs:{x:l[0]},backend:n}):function e(t,n,r){let a=t[0].dtype;if("complex64"===a){let a=t.map(e=>NI({inputs:{input:e},backend:r})),s=t.map(e=>ND({inputs:{input:e},backend:r})),i=e(a,n,r),o=e(s,n,r),l=SL({inputs:{real:i,imag:o},backend:r});return a.forEach(e=>r.disposeIntermediateTensorInfo(e)),s.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),l}let s=r.shouldExecuteOnCPU(t);if("string"===a&&(s=!0),s){let e=t.map(e=>{let t=rg.sizeFromShape(e.shape.slice(n));return SZ({inputs:{x:e},backend:r,attrs:{shape:[-1,t]}})}),s=e.map(e=>({vals:r.readSync(e.dataId),shape:e.shape})),i=IF(s,iI.computeOutShape(e.map(e=>e.shape),1),a,1===e[0].shape[0]),o=iI.computeOutShape(t.map(e=>e.shape),n),l=r.makeTensorInfo(o,a,i);return e.forEach(e=>r.disposeIntermediateTensorInfo(e)),l}let i=eM.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(t.length>i){let a=[];for(let s=0;s<t.length;s+=i){let o=t.slice(s,s+i);a.push(e(o,n,r))}let s=e(a,n,r);for(let e of a)r.disposeIntermediateTensorInfo(e);return s}if(eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){let e=new NR(t.map(e=>e.shape),n);return r.runWebGLProgram(e,t,a)}let{tensors2D:o,outShape:l}=function(e,t,n){let r=iI.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>SZ({inputs:{x:e},attrs:{shape:[-1,rg.sizeFromShape(e.shape.slice(t))]},backend:n})),outShape:r}}(t,n,r),u=new NA(o.map(e=>e.shape)),h=r.runWebGLProgram(u,o,a);o.forEach(e=>r.disposeIntermediateTensorInfo(e));let p=SZ({inputs:{x:h},attrs:{shape:l},backend:r});return r.disposeIntermediateTensorInfo(h),p}(l,s,n)}class NO{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let s=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,h=e.dilationWidth,p=e.filterHeight,d=e.filterWidth,c=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g="",y="";n&&(g=r?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`:`
          float activation(float x) {
            ${n}
          }
        `,y="result = activation(result);"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${g}

      const ivec2 strides = ivec2(${o}, ${l});
      const ivec2 pads = ivec2(${s}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${m?3:1}];

        ivec2 xRCCorner =
            ivec2(coords[${m?1:2}], coords[${m?2:3}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${p}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${c}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${m}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${1===f}) {

              if (${m}) {
                dotProd +=
                    getX(batch, xR, xC, ${c}) *
                    getW(wR, wC, ${c}, d2);
              } else {
                dotProd +=
                    getX(batch, ${c}, xR, xC) *
                    getW(wR, wC, ${c}, d2);
              }

            } else if (${2===f}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${c}, d2),
                getW(wR, wC, ${c} + 1, d2)
              );

              if (${m}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${c}),
                  getX(batch, xR, xC, ${c} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${c}, xR, xC),
                  getX(batch, ${c} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${3===f}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${c}, d2),
                getW(wR, wC, ${c} + 1, d2),
                getW(wR, wC, ${c} + 2, d2)
              );

              if (${m}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${c}),
                  getX(batch, xR, xC, ${c} + 1),
                  getX(batch, xR, xC, ${c} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${c}, xR, xC),
                  getX(batch, ${c} + 1, xR, xC),
                  getX(batch, ${c} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${y}
        setOutput(result);
      }
    `}}class NM{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,a=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,h=e.filterDepth,p=e.filterHeight,d=e.filterWidth,c=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${a}, ${s}, ${i});
      const ivec3 pads = ivec3(${t}, ${n}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${o};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${p}; wR++) {
            int xR = xRCorner + wR * ${l};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${c}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${1===f}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${c}) *
                  getW(wF, wR, wC, ${c}, d2);
              } else if (${2===f}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${c}),
                  getX(batch, xF, xR, xC, ${c} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${c}, d2),
                  getW(wF, wR, wC, ${c} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${3===f}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${c}),
                  getX(batch, xF, xR, xC, ${c} + 1),
                  getX(batch, xF, xR, xC, ${c} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${c}, d2),
                  getW(wF, wR, wC, ${c} + 1, d2),
                  getW(wF, wR, wC, ${c} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class NL{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Id(this.outputShape.length);let s=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,h=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<u;e++)h+=`
           vec4 xTexelC${2*e};
           int xTexelC${2*e}Ready;
           vec4 xTexelC${2*e+1};
           int xTexelC${2*e+1}Ready;
           vec4 xC${e};`;h+=`
     for (int r = 0; r < ${l}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let e=0;e<u;e++)h+=`
           xTexelC${2*e} = vec4(0.0);
           xTexelC${2*e}Ready = 0;
           xTexelC${2*e+1} = vec4(0.0);
           xTexelC${2*e+1}Ready = 0;
           xC${e} = vec4(0.0);`;h+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let t=0;t<(u+1)/2;t++){let n=2*t;if(h+=`
           xC = xCCorner + ${n*o};
           `,1===i){if(n<u&&(s%2==1?(h+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {
                   xTexelC${n} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${n}.zw = vec2(0.0);
                   }
                   xTexelC${n}Ready = 1;
                 }
               `,1===o&&n>0?h+=`
                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);
                 `:h+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);
                   } else {
                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);
                   }
                   `):h+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {
                   xTexelC${n} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${n}.zw = vec2(0.0);
                   }
                   xTexelC${n}Ready = 1;
                 }

                 xC${n} = xTexelC${n};
                 `,n+1<u)){let e=s%2==0?rg.nearestLargerEven(o):o;o%2==0&&s%2==1||o%2!=0&&s%2!=1?(h+=`
                   xCOffset = xC + imod(pads[1], 2) + ${e};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {
                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${n+1}.zw = vec2(0.0);
                     }
                     xTexelC${n+1}Ready = 1;
                   }
                   `,o>1?h+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);
                     } else {
                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);
                     }
                     `:h+=`
                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);
                     `):1===e?h+=`
                     xC${n+1} = xTexelC${n};
                     `:h+=`
                     xCOffset = xC + ${e};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {
                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${n+1}.zw = vec2(0.0);
                       }
                       xTexelC${n+1}Ready = 1;
                     }

                     xC${n+1} = xTexelC${n+1};
                     `}}else n<u&&(s%2==1?(h+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {
                   xTexelC${n} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${n}.zw = vec2(0.0);
                   }
                   xTexelC${n}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {
                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${n+1}.zw = vec2(0.0);
                   }
                   xTexelC${n+1}Ready = 1;
                 }

                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);
               `,n+1<u&&(h+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);
                 `)):(h+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {
                   xTexelC${n} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${n}.zw = vec2(0.0);
                   }
                   xTexelC${n}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {
                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${n+1}.zw = vec2(0.);
                   }
                   xTexelC${n+1}Ready = 1;
                 }

                 xC${n} = vec4(
                   xTexelC${n}.xy, xTexelC${n+1}.xy);
               `,n+1<u&&(h+=`
                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);
                 `)));n<u&&(h+=`
             wTexel = getW(r, ${n}, d1, d2);
             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,n+1<u&&(h+=`
               wTexel = getW(r, ${n+1}, d1, d2);
               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}h+=`
     }
   
     }
   
     }
   `;let p="",d="";n&&(p=r?`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${n}
         }`:a?`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${n}
         }`:`vec4 activation(vec4 x) {
           ${n}
         }`,d="result = activation(result);"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${h}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${t?"result += getBiasAtOutCoords();":""}
         ${d}
         setOutput(result);
       }
     `}}class Nz{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=Id(this.outputShape.length);let{dataFormat:n}=t,r=w2(),a="channelsLast"===n,s=a?1:2,i=a?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`
          blockIndex = rc.z + ${t};
          pos = rc.y + ${e};

          ${o}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${s}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${a}) {
                  innerDims = vec2(d1, ch);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${l}

        ${r.output} = result;
      }
    `}}function NP(e,t){let n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function NB({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:o=null}){let l,u=e.shape,h=r.texData.get(e.dataId),p=n.inChannels,d=u[0]*u[1]*u[2],c=n.outChannels,f="channelsLast"===n.dataFormat,m=[];if(null!=s){let e=NP(s.shape,f);null!=e&&(s=SZ({inputs:{x:s},backend:r,attrs:{shape:e}}),m.push(s))}if(null!=a){let e=NP(a.shape,f);null!=e&&(a=SZ({inputs:{x:a},backend:r,attrs:{shape:e}}),m.push(a))}if(!((1===d||1===c)&&p>1e3)&&h.isPacked&&f&&null!=h.texture&&u[2]%2!=0&&rg.arraysEqual(h.shape.slice(-3),u.slice(-3))){let p=u[0]*u[1]*(u[2]+1),d={dataId:e.dataId,shape:[1,p,n.inChannels],dtype:e.dtype},c=h.shape;h.shape=h.shape.slice(),h.shape[h.shape.length-2]++,rg.assert(wY(h.shape,d.shape),()=>`packed reshape ${h.shape} to ${d.shape} isn't free`);let f=SZ({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(f);let g=S5({a:d,b:f,backend:r,transposeA:!1,transposeB:!1,bias:a,activation:o,preluActivationWeights:s,leakyreluAlpha:i}),y=r.texData.get(g.dataId);rg.assert(y.isPacked,()=>"batchMatMul result is expected to be packed"),h.shape=c,y.shape=n.outShape,(l=SM({inputs:{x:g},backend:r})).shape=n.outShape,m.push(g)}else{let u=n.outHeight*n.outWidth,h=SZ({inputs:{x:e},backend:r,attrs:{shape:f?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),p=SZ({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),d=S5({a:f?h:p,b:f?p:h,transposeA:!f,transposeB:!1,backend:r,bias:a,activation:o,preluActivationWeights:s,leakyreluAlpha:i});l=SZ({inputs:{x:d},backend:r,attrs:{shape:n.outShape}}),m.push(h),m.push(p),m.push(d)}for(let e of m)r.disposeIntermediateTensorInfo(e);return l}function NW({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:o=null}){let{filterWidth:l,filterHeight:u,inChannels:h,outWidth:p,outHeight:d,dataFormat:c}=n,f="channelsLast"===c,m=l*u*h,g=d*p,y=[n.batchSize,m,g],b=[];if(null!=s){let e=NP(s.shape,f);null!=e&&(s=SZ({inputs:{x:s},backend:r,attrs:{shape:e}}),b.push(s))}if(null!=a){let e=NP(a.shape,f);null!=e&&(a=SZ({inputs:{x:a},backend:r,attrs:{shape:e}}),b.push(a))}let x=SZ({inputs:{x:t},backend:r,attrs:{shape:[1,m,rg.sizeFromShape(t.shape)/m]}});b.push(x);let v=new Nz(y,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],w=r.runWebGLProgram(v,[e],"float32",k),I=SZ({inputs:{x:w},backend:r,attrs:{shape:y}});b.push(w),b.push(I);let S=null!=a,N=null!=s,T="leakyrelu"===o,C=o?SH(o,!0):null,$=new Sq(f?I.shape:x.shape,f?x.shape:I.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,S,C,N,T),E=f?[I,x]:[x,I];if(a&&E.push(a),N&&E.push(s),T){let e=r.makeTensorInfo([],"float32",rg.createScalarValue(i,"float32"));E.push(e),b.push(e)}let A=r.runWebGLProgram($,E,"float32"),R=SZ({inputs:{x:A},backend:r,attrs:{shape:n.outShape}});for(let e of(b.push(A),b))r.disposeIntermediateTensorInfo(e);return R}class NU{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${s}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class NV{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${s?3:1}];

        ivec2 dyCorner = ivec2(coords[${s?1:2}], coords[${s?2:3}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${s}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class NG{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.padInfo.front,s=e.padInfo.top,i=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${a};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${n} - ${s};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${r} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class NH{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=r-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${o}, ${l}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${a}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${n}; wR++) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${n} - 1 - wR;

            for (int wC = 0; wC < ${r}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${r} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}let Nq=SV({opSnippet:SU+`
  return cos(x);
`}),Nj=SV({opSnippet:`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`});class NK{constructor(e,t,n,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[s,i,o,l]=e,[u]=t,[h,p]=n;this.outputShape=[u,h,p,l];let[d,c]=[`${i-1}.0`,`${o-1}.0`],[f,m,g]=h>1?[`${(i-1)/(h-1)}`,"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[y,b,x]=p>1?[`${(o-1)/(p-1)}`,"(x2-x1) * width_ratio",`x1*${c} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${c}`];this.userCode=`
      const float height_ratio = float(${f});
      const float width_ratio = float(${y});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${s}) {
          return;
        }

        float height_scale = ${m};
        float width_scale = ${b};

        float in_y = ${g};
        if( in_y < 0.0 || in_y > ${d} ) {
          setOutput(float(${a}));
          return;
        }
        float in_x = ${x};
        if( in_x < 0.0 || in_x > ${c} ) {
          setOutput(float(${a}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${+("bilinear"===r)} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}}!function(e){e.Prod="*",e.Sum="+"}(E||(E={}));class NX{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let a=this.outputShape.length,s=this.op===E.Prod?"1.0":"0.0",i=n?s:`getX(${NY(a,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1],l="",u="";n?(l=r?`end != ${o-1}`:"end != 0",u=r?"end + 1":"end - 1"):(l=r?`end + pow2 < ${o}`:"end >= pow2",u=r?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${Ii(a)} coords = getOutputCoords();
        int end = ${NZ(a,"coords",this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${l}) {
          int idx = ${u};
          ${NZ(a,"coords",this.op)} = idx;
          val ${this.op}= getX(${NY(a,"coords",this.op)});
        }
        setOutput(val);
      }
    `}}function NY(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function NZ(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function NJ(e,t,n,r,a,s){let i=t.shape.length,o=iI.getAxesPermutation([r],i),l=t;null!=o&&(l=S6({inputs:{x:t},backend:n,attrs:{perm:o}}));let u=iI.getInnerMostAxes(1,i)[0];if(u!==i-1)throw Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);let h=l.shape[u],p=SM({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(h))-1;t++){let r=new NX(e,l.shape,!1,s),a=[[t]],i=p;p=n.runWebGLProgram(r,[p],p.dtype,a),n.disposeIntermediateTensorInfo(i)}if(a){let t=new NX(e,l.shape,a,s),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=o){let e=S6({inputs:{x:p},backend:n,attrs:{perm:iI.getUndoAxesPermutation(o)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(l),e}return p}class NQ{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class N0{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Id(this.outputShape.length);let s=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels,l="",u="";n&&(l=r?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`:`
          float activation(float x) {
            ${n}
          }
        `,u="result = activation(result);"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${l}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${s}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${u}
        setOutput(result);
      }
    `}}class N1{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Id(this.outputShape.length);let s=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,h=e.filterWidth,p=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<h;e++)p+=`
          vec4 xTexelC${2*e};
          int xTexelC${2*e}Ready;
          vec4 xTexelC${2*e+1};
          int xTexelC${2*e+1}Ready;
          vec4 xC${e};`;p+=`
    for (int r = 0; r < ${u}; r++) {
      `;for(let e=0;e<h;e++)p+=`
          xTexelC${2*e} = vec4(0.0);
          xTexelC${2*e}Ready = 0;
          xTexelC${2*e+1} = vec4(0.0);
          xTexelC${2*e+1}Ready = 0;
          xC${e} = vec4(0.0);`;p+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let e=0;e<(h+1)/2;e++){let t=2*e;if(p+=`
          xC = xCCorner + ${t*l};
          `,1===o){if(t<h&&(i%2==1?(p+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }
              `,1===l&&t>0?p+=`
                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);
                `:p+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);
                  } else {
                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);
                  }
                  `):p+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xC${t} = xTexelC${t};
                `,t+1<h)){let e=i%2==0?rg.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`
                  xCOffset = xC + imod(pads[1], 2) + ${e};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${t+1}.zw = vec2(0.0);
                    }
                    xTexelC${t+1}Ready = 1;
                  }
                  `,l>1?p+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);
                    } else {
                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);
                    }
                    `:p+=`
                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);
                    `):1===e?p+=`
                    xC${t+1} = xTexelC${t};
                    `:p+=`
                    xCOffset = xC + ${e};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${t+1}.zw = vec2(0.0);
                      }
                      xTexelC${t+1}Ready = 1;
                    }

                    xC${t+1} = xTexelC${t+1};
                    `}}else t<h&&(i%2==1?(p+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.0);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
              `,t+1<h&&(p+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);
                `)):(p+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(
                  xTexelC${t}.xy, xTexelC${t+1}.xy);
              `,t+1<h&&(p+=`
                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
                `)));t<h&&(p+=`
            wTexel = getW(r, ${t}, d1, q);
            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);
          `,t+1<h&&(p+=`
              wTexel = getW(r, ${t+1}, d1, q);
              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);
            `))}p+=`
    }
  
      }
    `;let d="",c="";n&&(d=r?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`:a?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`:`vec4 activation(vec4 x) {
          ${n}
        }`,c="result = activation(result);"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${d}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${s};
        int q = d2 - d1 * ${s};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${t?"result += getBiasAtOutCoords();":""}
        ${c}
        setOutput(result);
      }
    `}}class N2{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${s} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class N3{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${s}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${o}; dm++) {
              int d2 = d1 * ${o} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class N4{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}}class N6{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:n,padInfo:r,strideHeight:a,strideWidth:s,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:h,left:p}=r;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${s});
      const ivec2 pads = ivec2(${h}, ${p});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${l};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${o}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${n}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}}let N5=SV({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`}),N8=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,N7=SG({opSnippet:"return float(a == b);",packedOpSnippet:`
  return vec4(equal(a, b));
`,dtype:"bool",cpuKernelImpl:ID}),N9=SV({opSnippet:`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${iI.ERF_P};
  float a1 = ${iI.ERF_A1};
  float a2 = ${iI.ERF_A2};
  float a3 = ${iI.ERF_A3};
  float a4 = ${iI.ERF_A4};
  float a5 = ${iI.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`}),Te=SV({opSnippet:SU+`
  return exp(x);
`,packedOpSnippet:`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,cpuKernelImpl:I_,dtype:"float32"});function Tt(e){let{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:s}=t,i=s.shape.length,o=s.shape.slice(),l=a;return a<0&&(rg.assert(-(i+1)<=a,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+a+1),o.splice(l,0,1),SZ({inputs:{x:s},backend:r,attrs:{shape:o}})}let Tn="return exp(x) - 1.0;",Tr=SV({opSnippet:Tn,packedOpSnippet:Tn,cpuKernelImpl:IO});class Ta{constructor(e,t,n){let r;this.variableNames=["real","imag"];let a=t[1];this.outputShape=t;let s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=n?`${a}.0`:"1.0";if("real"===e)r="return real * expR - imag * expI;";else if("imag"===e)r="return real * expI + imag * expR;";else throw Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${r}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${a});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${a}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}}function Ts(e,t,n){let r=n.texData.get(e.dataId),a=rg.sizeFromShape(e.shape),s=e.shape[e.shape.length-1],i=SZ({inputs:{x:e},backend:n,attrs:{shape:[a/s,s]}}),o=i.shape,l=new Ta("real",o,t),u=new Ta("imag",o,t),h=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:o},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:o}],p=n.runWebGLProgram(l,h,"float32"),d=n.runWebGLProgram(u,h,"float32"),c=SL({inputs:{real:p,imag:d},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d);let f=SZ({inputs:{x:c},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(c),f}class Ti{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}}function To(e){let{backend:t,attrs:n}=e,{shape:r,value:a}=n,{dtype:s}=n;if("string"===(s=s||rg.inferDtype(a))){let e=rg.getArrayFromDType(s,rg.sizeFromShape(r));return e.fill(a),t.makeTensorInfo(r,s,e)}{let e=new Ti(r,a),n=[[a]];return t.runWebGLProgram(e,[],s,n)}}class Tl{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}}let Tu="return floor(x);",Th=SV({opSnippet:Tu,packedOpSnippet:Tu,cpuKernelImpl:IM}),Tp=SG({opSnippet:`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,packedOpSnippet:`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,dtype:"int32"});class Td{constructor(e){this.variableNames=["A"];let t=w2(),[n,r]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}}class Tc{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=w2(),[n,r]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${r}.0, ${n}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}}let Tf=eM.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class Tm{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;let a=Ii(n.length),s=`
    int index;`;for(let e=0;e<this.sliceDim;e++)s+=`
          index = round(getIndices(coords[0], ${e}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};
          flattenIndex += index * ${this.strides[e]};`;this.userCode=`
         void main() {
          ${a} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${s}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}}class Tg{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let n=Ii(this.rank),r=function(e,t){let n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e,0);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${r}));
      }
    `}}function Ty(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,indices:s}=t,{axis:i,batchDims:o}=r,l=rg.parseAxisParam(i,a.shape)[0];if(eM.get("DEBUG")){let e=n.readSync(s.dataId),t=a.shape[l];for(let n=0;n<e.length;++n){let r=e[n];rg.assert(r<=t-1&&r>=0,()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`)}}let u=iI.segment_util.collectGatherOpShapeInfo(a,s,l,o),h=rg.sizeFromShape(s.shape),p=[],d=SZ({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),c=SZ({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,h/u.batchSize]}});p.push(d),p.push(c);let f=[u.batchSize,u.outerSize,h/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([a,s])||"string"===a.dtype){let e=n.bufferSync(c),t=Iz(n.bufferSync(d),e,f);return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(u.outputShape,t.dtype,t.values)}let m=new Tg(d.shape,f),g=n.runWebGLProgram(m,[d,c],d.dtype);p.push(g);let y=SZ({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}let Tb=SG({opSnippet:"return float(a > b);",packedOpSnippet:`
  return vec4(greaterThan(a, b));
`,cpuKernelImpl:IP,dtype:"bool"}),Tx=SG({opSnippet:"return float(a >= b);",packedOpSnippet:`
  return vec4(greaterThanEqual(a, b));
`,dtype:"bool",cpuKernelImpl:IB}),Tv=SV({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),Tk=SV({opSnippet:"return float(isinf(x));",dtype:"bool"}),Tw=SV({opSnippet:"return float(isnan(x));",dtype:"bool"}),TI=SG({opSnippet:"return float(a < b);",packedOpSnippet:`
  return vec4(lessThan(a, b));
`,cpuKernelImpl:IW,dtype:"bool"}),TS=SG({opSnippet:"return float(a <= b);",packedOpSnippet:`
  return vec4(lessThanEqual(a, b));
`,cpuKernelImpl:IU,dtype:"bool"}),TN=SV({opSnippet:SU+`
  return x < 0.0 ? 0./0. : log(x);
`,packedOpSnippet:`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,cpuKernelImpl:IG}),TT=SV({opSnippet:SU+`
  return log(1.0 + x);
`}),TC=SG({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,dtype:"bool"}),T$=SV({opSnippet:"return float(!(x >= 1.0));"}),TE=SG({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,dtype:"bool"});class TA{constructor(e,t,n,r,a){let s;this.variableNames=["x"],this.outputShape=[];let i=e[3]-1;this.outputShape=e;let o=`float(${n}) + float(${r}) * sum`;s=.5===a?`inversesqrt(${o})`:1===a?`1.0/(${o})`:`exp(log(${o}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${t}; j <= ${t}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${s};
        setOutput(val);
      }
    `}}class TR{constructor(e,t,n,r,a){let s;this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=e[3]-1;this.outputShape=e;let o=`float(${n}) + float(${r}) * sum`;s=.5===a?`inversesqrt(${o})`:1===a?`1.0/(${o})`:`exp(log(${o}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${t};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${t}; j <= ${t}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${s};
        setOutput(result);
      }
    `}}class TF{constructor(e,t,n,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=a,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${r}) * norm + float(${n});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${r})
                * float(${a})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${a});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}}function TD(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{reductionIndices:i,keepDims:o}=a,l=s.shape.length,u=rg.parseAxisParam(i,s.shape),h=u,p=iI.getAxesPermutation(h,l),d=null!=p,c=r.shouldExecuteOnCPU([s]),f=s;if(d){if(c){let e=r.texData.get(f.dataId).values,t=Array(l);for(let e=0;e<t.length;e++)t[e]=s.shape[p[e]];let n=So(e,s.shape,s.dtype,p,t);f=r.makeTensorInfo(t,s.dtype),r.texData.get(f.dataId).values=n}else f=S3(s,p,r);h=iI.getInnerMostAxes(h.length,l)}iI.assertAxesAreInnerMostDims("max",h,l);let[m,g]=iI.computeOutAndReduceShapes(f.shape,h),y=m;if(o&&(y=iI.expandShapeToKeepDim(m,u)),c){let e=IH(r.texData.get(f.dataId).values,rg.sizeFromShape(g),y,s.dtype);t=r.makeTensorInfo(y,s.dtype),r.texData.get(t.dataId).values=e}else t=function(e,t,n,r){let a=rg.sizeFromShape(t),s=rg.sizeFromShape(e.shape),i=SZ({inputs:{x:e},attrs:{shape:[s/a,a]},backend:r}),o=S0(i,e.dtype,"max",r),l=SZ({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),l}(f,g,y,r);return d&&r.disposeIntermediateTensorInfo(f),t}let T_=SG({opSnippet:SF+`
  return max(a, b);
`,packedOpSnippet:`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+S_+`
  return result;
`,cpuKernelImpl:Iq});class TO{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,a=e.effectiveFilterHeight,s=e.effectiveFilterWidth,i=a-1-e.padInfo.top,o=s-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${a};
          wR += ${r}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${a*s-1} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${s} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}}class TM{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,h=o-1-e.padInfo.front,p=l-1-e.padInfo.top,d=u-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${h}, ${p}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${o};
           wD += ${a}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${l};
              wR += ${s}) {
            float dyR = float(dyRCorner + wR) / ${n}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${r}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${o*l*u-1} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${l} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}let TL=SG({opSnippet:SF+`
  return min(a, b);
`,packedOpSnippet:`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+S_+`
  return result;
`,cpuKernelImpl:Ij});class Tz{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);let r=e.length,a=Ii(r),s=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),l=+("reflect"!==n);if(1===r){this.userCode=`
        int start = ${s};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${l};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${l};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${s});
      ${a} end = ${a}(${i});

      void main() {
        ${a} outC = getOutputCoords();
        for (int i = 0; i < ${r}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${l};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};
          }
        }
        ${a} coords = outC - start;
        setOutput(getX(${o}));
      }
    `}}class TP{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);let r=e.length,a=Ii(r),s=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Sh("rc",r),l=Sh("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${l.slice(-2).join()})`,p=+("reflect"!==n),d="";if(1===r){let e=`
        ${a} source = rc;
        if (source < start) {
          source = start * 2 - source - ${p};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${p};
        }
        source -= start;
      `;d=`
        ${a} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${l.join()}), ${h});
        ${o[r-1]} += 1;
        if(${u}) {
          ${e}
          result[1] = getChannel(getX(${l.join()}), ${h});
        }
      `}else{let e=`
        ${a} source = rc;
        ${a} lt = ${a}(lessThan(source, start));
        ${a} gte = ${a}(greaterThanEqual(source, end));
        ${a} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${p}) +
                gte * ((end - 1) * 2 - source + ${p});
        source -= start;
      `;d=`
        ${a} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${l.join()}), ${h});
        ${o[r-1]} += 1;
        if(${u}) {
          ${e}
          result[1] = getChannel(getX(${l.join()}), ${h});
        }
        rc = outputLoc;
        ${o[r-2]} += 1;
        if(${o[r-2]} < ${this.outputShape[r-2]}) {
          ${e}
          result[2] = getChannel(getX(${l.join()}), ${h});
          ${o[r-1]} += 1;
          if(${u}) {
            ${e}
            result[3] = getChannel(getX(${l.join()}), ${h});
          }
        }
      `}this.userCode=`
      const ${a} start = ${a}(${s});
      const ${a} end = ${a}(${i});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `}}let TB=SG({opSnippet:`if (b == 0.0) return NAN;
  return mod(a, b);`,packedOpSnippet:`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+S_+`
  return result;
`});class TW{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}}let TU=SG({opSnippet:`
if (a == b) {
  return 1.0;
};
return a / b;`,packedOpSnippet:`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,checkOutOfBounds:!0}),TV="return a - b;",TG=SG({opSnippet:TV,packedOpSnippet:TV,supportsComplex:!0,cpuKernelImpl:Sa});function TH(e){let{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:s}=r,i=rg.parseAxisParam([s],a.shape),o=TD({inputs:{x:a},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=iI.expandShapeToKeepDim(o.shape,i),u=SZ({inputs:{x:o},backend:n,attrs:{shape:l}}),h=TG({inputs:{a:a,b:u},backend:n}),p=Te({inputs:{x:h},backend:n}),d=S4({inputs:{x:p},backend:n,attrs:{axis:i,keepDims:!1}}),c=SZ({inputs:{x:d},backend:n,attrs:{shape:l}}),f=TU({inputs:{a:p,b:c},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),f}let Tq=Sb+`
  return -x;
`,Tj=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,TK=dZ.nonMaxSuppressionV3Impl,TX=dZ.nonMaxSuppressionV4Impl,TY=dZ.nonMaxSuppressionV5Impl;class TZ{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${r}), float(${n}),
                      float(index == coords.y)));
      }
    `}}function TJ(e){let{inputs:t,backend:n}=e,{x:r}=t;if("complex64"!==r.dtype)return To({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n});{let e=NI({inputs:{input:r},backend:n}),t=TJ({inputs:{x:e},backend:n}),a=ND({inputs:{input:r},backend:n}),s=TJ({inputs:{x:a},backend:n}),i=SL({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),i}}class TQ{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);let r=e.length,a=Ii(r),s=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);if(1===r){this.userCode=`
        int start = ${s};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${s});
      ${a} end = ${a}(${i});

      void main() {
        ${a} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${a} coords = outC - start;
          setOutput(getX(${o}));
        }
      }
    `}}class T0{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);let r=e.length,a=Ii(r),s=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Sh("rc",r),l=Sh("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${l.slice(-2).join()})`,p=[`${a} rc = outputLoc;`,`${o[r-1]} += 1;
       if(${u}) {
      `,1===r?"":`}
       rc = outputLoc;
       ${o[r-2]} += 1;
       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;
         if(${u}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",c="";for(let e=0,t=1===r?2:4;e<t;e++)c+=`
        ${p[e]}
        if (${d}) {
          result[${e}] = float(value);
        } else {
          ${a} source = rc - start;
          result[${e}] = getChannel(getX(${l.join()}), ${h});
        }
      `;c+=1===r?"} ":"}}",this.userCode=`
      const ${a} start = ${a}(${s});
      const ${a} end = ${a}(${i});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${c}
        setOutput(result);
      }
    `}}let T1=e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:i}=r;if(0===rg.sizeFromShape(a.shape))return To({backend:n,attrs:{shape:s.map((e,t)=>e[0]+a.shape[t]+e[1]),value:i,dtype:a.dtype}});let o=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new T0(a.shape,s,i):new TQ(a.shape,s,i),l=[[i]];return n.runWebGLProgram(o,[a],a.dtype,l)},T2=SG({opSnippet:`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,packedOpSnippet:`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+S_+`
  return result;
`}),T3=e=>{let{backend:t,attrs:n}=e,{start:r,stop:a,step:s,dtype:i}=n,o=I0(r,a,s,i);return t.makeTensorInfo([o.length],i,o)},T4=SV({opSnippet:"return 1.0 / x;"}),T6=SV({opSnippet:Sb+`
  return (x < 0.0) ? 0.0 : x;
`,packedOpSnippet:`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`}),T5=SV({opSnippet:Sb+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,packedOpSnippet:`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`});class T8{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];let[s,i,o,l]=e;this.outputShape=[s,t,n,l];let u=[r&&t>1?i-1:i,r&&n>1?o-1:o],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/h[0]},
          ${u[1]/h[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}}class T7{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[s,i,o,l]=e;this.outputShape=[s,t,n,l];let u=[r&&t>1?i-1:i,r&&n>1?o-1:o],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/h[0]},
          ${u[1]/h[1]},
          ${u[1]/h[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${n-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}class T9{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,r,a]=t,[,s,i]=e,o=[n&&s>1?r-1:r,n&&i>1?a-1:a],l=[n&&s>1?s-1:s,n&&i>1?i-1:i],u=o[0]/l[0],h=o[1]/l[1],p=1/u,d=1/h,c=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${p});
        const float invWidthScale = float(${d});

        const int winHeight = int(${c});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${s}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}class Ce{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];let[s,i,o,l]=e;this.outputShape=[s,t,n,l];let u=[r&&t>1?i-1:i,r&&n>1?o-1:o],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/h[0]},
          ${u[1]/h[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}}class Ct{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[s,i,o,l]=e;this.outputShape=[s,t,n,l];let u=[r&&t>1?i-1:i,r&&n>1?o-1:o],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/h[0]},
          ${u[1]/h[1]},
          ${u[1]/h[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${n-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}class Cn{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,r,a]=t,[,s,i]=e,o=[n&&s>1?r-1:r,n&&i>1?a-1:a],l=[n&&s>1?s-1:s,n&&i>1?i-1:i],u=o[0]/l[0],h=o[1]/l[1],p=1/u,d=1/h,c=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${p});
        const float invWidthScale = float(${d});

        const int winHeight = int(${c});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${s}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${o[0]}) *
                (float(dyR) / float(${l[0]}));

            float sourceFracCol =
                float(${o[1]}) *
                  (float(dyC) / float(${l[1]}));

            int sourceNearestRow = int(min(
                float(int(${r}) - 1),
                ${n} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${a}) - 1),
                ${n} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}class Cr{constructor(e,t){this.variableNames=["x"];let n=e.length;if(n>4)throw Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}let r=n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`,a=e.map((e,t)=>r(t)).join(","),s=Ii(n);this.userCode=`
      void main() {
        ${s} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}}class Ca{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let n=e.length;if(n>4)throw Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;let r=Sh("rc",n),a=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Ii(n);function o(n){let r=e.map((r,a)=>{var s,i;return s=a,i=n,-1!==t.indexOf(s)&&1!==e[s]?`${e[s]} - ${i[s]} - 1`:`${i[s]}`}),a=r.join(","),s=r.slice(-2).join(",");return`getChannel(getX(${a}), vec2(${s}))`}1===n?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${a}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${o(r.slice())};
          if(${a}){
            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};
          }
          if(${s}) {
            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};
            if(${a}) {
              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};
            }
          }
          setOutput(result);
        }
    `}}class Cs{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let n=e[1],r=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${a}
          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}}let Ci=SV({opSnippet:`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`}),Co=SV({opSnippet:"return inversesqrt(x);",cpuKernelImpl:I1});class Cl{constructor(e,t,n,r,a,s,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;let o=Ii(a.length),l=Ii(s.length),u="";1===n?u="i":2===n&&(u="i, j");let h=`getIndices(${u})`,p="";1===r?p="i":2===r&&(p="i, coords[1]");let d=`getUpdates(${p})`;this.userCode=`
        ${o} strides = ${o}(${a});

        void main() {
          ${l} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${t>1?"strides[j]":"strides"};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${d};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}}class Cu{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];let a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,s=2===eM.getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${s}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}}class Ch{constructor(e,t,n){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",r="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],i=[];for(let r=0;r<t.length;r++)i.push(`${n[r]}`),r<e&&s.push(`${n[r]}`);r=s.join(),a=i.join()}let s=Ii(n);this.userCode=`
      void main() {
        ${s} resRC = getOutputCoords();
        float cVal = getC(${r});
        if (cVal >= 1.0) {
          setOutput(getA(${a}));
        } else {
          setOutput(getB(${a}));
        }
      }
    `}}let Cp=SV({opSnippet:`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${iI.SELU_SCALEALPHA};
  float scale = ${iI.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`}),Cd=SV({opSnippet:SU+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,packedOpSnippet:`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,cpuKernelImpl:I3}),Cc=SV({opSnippet:`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`}),Cf=SV({opSnippet:SU+`
  return sin(x);
`}),Cm=SV({opSnippet:`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`}),Cg=SV({opSnippet:`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`}),Cy="return sqrt(x);",Cb=SV({opSnippet:Cy,packedOpSnippet:Cy,cpuKernelImpl:I9}),Cx=SV({opSnippet:"return x * x;"}),Cv="return (a - b) * (a - b);",Ck=SG({opSnippet:Cv,packedOpSnippet:Cv});class Cw{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;let r=n.length,a=Ii(n.length),s=Ii(n.length),i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`
      ${a} begin = ${a}(${e});
      ${a} strides = ${a}(${t});

      void main() {
        ${s} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `}}let CI=SV({opSnippet:"return tan(x);"}),CS=SV({opSnippet:`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`});class CN{constructor(e,t){this.variableNames=["A"];let n=Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;let r=Ii(this.rank),a=function(e){let t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;let n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`
      void main() {
        ${r} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `}}function CT(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:s}=r;if("string"===a.dtype||a.shape.length>5){let e=n.readSync(a.dataId),t="string"===a.dtype?e.map(e=>rg.decodeString(e)):e,r=Ss(sQ(a.shape,a.dtype,t),s);return n.makeTensorInfo(r.shape,r.dtype,r.values)}let i=new CN(a.shape,s);return n.runWebGLProgram(i,[a],a.dtype)}class CC{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}}class C${constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}}function CE(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function CA(e){let t=1;for(;t<e;)t*=2;return t}class CR{constructor(e,t,n,r,a,s){let i;switch(this.variableNames=["Image","Transforms"],this.outputShape=s,r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${i} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${i} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${i} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${a});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${a});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${"nearest"===n?1:2} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}}class CF{constructor(e,t){this.variableNames=["x","segmentIds"];let n=e.windowSize,r=e.batchSize,a=e.inSize,s=e.numSegments,i=s*Math.ceil(a/n);this.outputShape=[r,i];let o=4*Math.floor(n/4),l=n%4,u=`
        sumValue += dot(values, segFilter);
    `,h="";a%n>0&&(h=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `);let p="";a%n>0&&(p=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = 0.0;

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${p}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${s})) * float(${n}));
        int currentSeg = int(mod(float(outIdx), float(${s})));

        float sumValue = 0.0;

        for (int i = 0; i < ${o}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${u}
        }

        int inIdx = inOffset + ${o};
        if (${1===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${u}
        } else if (${2===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${u}
        } else if (${3===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${u}
        }
        setOutput(sumValue);
      }
    `}}for(let e of[{kernelName:ra,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{a:a,b:s,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:h,leakyreluAlpha:p}=r;return S5({a:a,b:s,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:p,activation:h})}},{kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r}=e,{x:a}=n;if(r.shouldExecuteOnCPU([a])&&"complex64"!==a.dtype){let e=I4(r.texData.get(a.dataId).values);return r.makeTensorInfo(a.shape,a.dtype,e)}return t=eM.getBool("WEBGL_PACK_UNARY_OPERATIONS")?new ST(a.shape,S8):new Sy(a.shape,S8),r.runWebGLProgram(t,[a],a.dtype)}},{kernelName:eZ,backendName:"webgl",kernelFunc:S7},{kernelName:eJ,backendName:"webgl",kernelFunc:S9},{kernelName:"Add",backendName:"webgl",kernelFunc:Nt},{kernelName:eQ,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:r}=t;if(1===n.length)return SM({inputs:{x:n[0]},backend:r});if(n.length>eM.get("WEBGL_MAX_TEXTURES_IN_SHADER")){let t=Math.floor(n.length/2),a=e({inputs:n.slice(0,t),backend:r}),s=e({inputs:n.slice(t),backend:r});return e({inputs:[a,s],backend:r})}let a=n.map(e=>e.dtype).reduce((e,t)=>ah(e,t)),s=n.map(e=>e.shape),i=eM.getBool("WEBGL_PACK")?new Nr(n[0].shape,s):new Nn(n[0].shape,s);return r.runWebGLProgram(i,n,a)}},{kernelName:"All",backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a,l=s.shape.length,u=rg.parseAxisParam(i,s.shape),h=u,p=iI.getAxesPermutation(h,l),d=s;null!=p&&(d=S6({inputs:{x:s},backend:r,attrs:{perm:p}}),h=iI.getInnerMostAxes(h.length,l)),iI.assertAxesAreInnerMostDims("all",h,l);let[c,f]=iI.computeOutAndReduceShapes(d.shape,h),m=SZ({inputs:{x:d},backend:r,attrs:{shape:[-1,rg.sizeFromShape(f)]}}),g=S0(m,m.dtype,"all",r);return t=o?SZ({inputs:{x:g},backend:r,attrs:{shape:iI.expandShapeToKeepDim(c,u)}}):SZ({inputs:{x:g},backend:r,attrs:{shape:c}}),r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),null!=p&&r.disposeIntermediateTensorInfo(d),t}},{kernelName:"Any",backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a,l=s.shape.length,u=rg.parseAxisParam(i,s.shape),h=u,p=iI.getAxesPermutation(h,l),d=s;null!=p&&(d=S6({inputs:{x:s},backend:r,attrs:{perm:p}}),h=iI.getInnerMostAxes(h.length,l)),iI.assertAxesAreInnerMostDims("any",h,l);let[c,f]=iI.computeOutAndReduceShapes(d.shape,h),m=SZ({inputs:{x:d},backend:r,attrs:{shape:[-1,rg.sizeFromShape(f)]}}),g=S0(m,m.dtype,"any",r);return t=o?SZ({inputs:{x:g},backend:r,attrs:{shape:iI.expandShapeToKeepDim(c,u)}}):SZ({inputs:{x:g},backend:r,attrs:{shape:c}}),r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),null!=p&&r.disposeIntermediateTensorInfo(d),t}},{kernelName:e0,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r,i=rg.parseAxisParam(s,a.shape),o=iI.getAxesPermutation(i,a.shape.length),l=a,u=[];null!=o&&(u.push(l=S6({inputs:{x:a},backend:n,attrs:{perm:o}})),i=iI.getInnerMostAxes(i.length,l.shape.length)),iI.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let h=Ni(n,l,i[0],"max");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},{kernelName:e1,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r,i=rg.parseAxisParam(s,a.shape),o=iI.getAxesPermutation(i,a.shape.length),l=a,u=[];null!=o&&(u.push(l=S6({inputs:{x:a},backend:n,attrs:{perm:o}})),i=iI.getInnerMostAxes(i.length,l.shape.length)),iI.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let h=Ni(n,l,i[0],"min");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},{kernelName:e2,backendName:"webgl",kernelFunc:No},{kernelName:e3,backendName:"webgl",kernelFunc:Nl},{kernelName:e4,backendName:"webgl",kernelFunc:Nu},{kernelName:e5,backendName:"webgl",kernelFunc:Nh},{kernelName:e6,backendName:"webgl",kernelFunc:Np},{kernelName:e8,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t;w0(a,"avgPool");let{filterSize:s,strides:i,pad:o,dimRoundingMode:l}=r;rg.assert(iI.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);let u=iI.computePool2DInfo(a.shape,s,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&rg.arraysEqual(u.inShape,u.outShape))return SM({inputs:{x:a},backend:n});let h=new Nd(u,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},{kernelName:e9,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=r,h=new Nc(iI.computePool3DInfo(a.shape,s,i,[1,1,1],o,l,u),"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},{kernelName:te,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r,h=new Nm(iI.computePool3DInfo(s.shape,i,o,[1,1,1],l,u));return n.runWebGLProgram(h,[a],s.dtype)}},{kernelName:e7,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t;w0([a,s],"avgPoolGrad");let{filterSize:i,strides:o,pad:l}=r,u=new Nf(iI.computePool2DInfo(s.shape,i,o,1,l));return n.runWebGLProgram(u,[a],s.dtype)}},{kernelName:tt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{a:a,b:s}=t,{transposeA:i,transposeB:o}=r;return S5({a:a,b:s,transposeA:i,transposeB:o,backend:n})}},{kernelName:tB,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r,mean:a,variance:s,offset:i,scale:o}=e;rg.assert(a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),rg.assert(null==i||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),rg.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=n;null==l&&(l=.001);let u=[r,a,s],h=null;null!=i&&(h=i.shape,u.push(i));let p=null;null!=o&&(p=o.shape,u.push(o));let d=eM.getBool("WEBGL_PACK_NORMALIZATION")?new Ny(r.shape,a.shape,s.shape,h,p,l):new Ng(r.shape,a.shape,s.shape,h,p,l);return t.runWebGLProgram(d,u,u[0].dtype)}},{kernelName:tn,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,crops:i}=r;rg.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let o=s.reduce((e,t)=>e*t),l=iI.getReshaped(a.shape,s,o),u=iI.getPermuted(l.length,s.length),h=iI.getReshapedPermuted(a.shape,s,o),p=iI.getSliceBeginCoords(i,s.length),d=iI.getSliceSize(h,i,s.length),c=[],f=SZ({inputs:{x:a},backend:n,attrs:{shape:l}}),m=S6({inputs:{x:f},backend:n,attrs:{perm:u}}),g=SZ({inputs:{x:m},backend:n,attrs:{shape:h}}),y=Nk({inputs:{x:g},backend:n,attrs:{begin:p,size:d}});return c.push(f),c.push(m),c.push(g),c.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}},{kernelName:tr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:i}=r,o=I$(n.readSync(a.dataId),n.readSync(s.dataId),s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,o)}},{kernelName:ta,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{s0:r,s1:a}=t,s=n.readSync(r.dataId),i=n.readSync(a.dataId),o=iI.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},{kernelName:ts,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:r,attrs:a}=t,{x:s}=n,{dtype:i}=a;if("complex64"===i){if("complex64"===s.dtype)return SM({inputs:{x:s},backend:r});let t=hg(s.shape),n=e({inputs:{x:s},backend:r,attrs:{dtype:"float32"}}),a=SL({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),a}if("complex64"===s.dtype){let t=NI({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!rg.hasEncodingLoss(s.dtype,i)){let e=SM({inputs:{x:s},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(r.shouldExecuteOnCPU([s])){let[e,t,n]=IA(r.texData.get(s.dataId).values,s.shape,s.dtype,i);return r.makeTensorInfo(e,t,n)}if("int32"===i){let e=new Sy(s.shape,"return float(int(x));"),t=r.runWebGLProgram(e,[s],"int32");return{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}if("bool"===i){let e=r.makeTensorInfo([],"bool",rg.getTypedArrayFromDType("bool",1)),t=Nw({inputs:{a:s,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw Error(`Error in Cast: failed to cast ${s.dtype} to ${i}`)}},{kernelName:ti,backendName:"webgl",kernelFunc:NN},{kernelName:to,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{clipValueMin:i,clipValueMax:o}=a;return t=eM.getBool("WEBGL_PACK_CLIP")?new NC(s.shape):new NT(s.shape),r.runWebGLProgram(t,[s],s.dtype,[[i],[o]])}},{kernelName:tl,backendName:"webgl",kernelFunc:SL},{kernelName:tu,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r}=t,a=n.texData.get(r.dataId),s=new N$(r.shape),i=[NE(r,a.complexTensorInfos.real),NE(r,a.complexTensorInfos.imag)];return n.runWebGLProgram(s,i,i[0].dtype)}},{kernelName:th,backendName:"webgl",kernelFunc:N_},{kernelName:tp,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i}=n,{strides:o,pad:l,dataFormat:u,dilations:h,dimRoundingMode:p}=a,d=iI.convertConv2DDataFormat(u),c=iI.computeConv2DInfo(s.shape,i.shape,o,h,l,p,!1,d);if(1===c.filterHeight&&1===c.filterWidth&&1===c.dilationHeight&&1===c.dilationWidth&&1===c.strideHeight&&1===c.strideWidth&&("SAME"===c.padInfo.type||"VALID"===c.padInfo.type))t=NB({x:s,filter:i,convInfo:c,backend:r});else if(c.strideWidth<=2&&"channelsLast"===d&&eM.getBool("WEBGL_EXP_CONV")){let e=new NL(c),n=[[c.padInfo.top,c.padInfo.left],[c.strideHeight,c.strideWidth],[c.dilationHeight,c.dilationWidth],[c.inHeight,c.inWidth]];t=r.runWebGLProgram(e,[s,i],"float32",n)}else if(eM.getBool("WEBGL_CONV_IM2COL"))t=NW({x:s,filter:i,convInfo:c,backend:r});else{let e=new NO(c);t=r.runWebGLProgram(e,[s,i],"float32")}let f=SZ({inputs:{x:t},backend:r,attrs:{shape:c.outShape}});return r.disposeIntermediateTensorInfo(t),f}},{kernelName:td,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:h}=r,p=iI.convertConv2DDataFormat(l),d=new NU(iI.computeConv2DInfo(a.shape,h,i,1,o,u,!1,p));return n.runWebGLProgram(d,[a,s],"float32")}},{kernelName:tc,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:h}=r,p=iI.convertConv2DDataFormat(u),d=new NV(iI.computeConv2DInfo(i,s.shape,o,1,l,h,!1,p));return n.runWebGLProgram(d,[a,s],"float32")}},{kernelName:tf,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:o,dilations:l}=r,u=new NM(iI.computeConv3DInfo(a.shape,s.shape,i,l,o));return n.runWebGLProgram(u,[a,s],"float32")}},{kernelName:tm,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:o,filterShape:l}=r,u=new NG(iI.computeConv3DInfo(a.shape,l,i,1,o));return n.runWebGLProgram(u,[a,s],"float32")}},{kernelName:tg,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{pad:i,strides:o,inputShape:l}=r,u=new NH(iI.computeConv3DInfo(l,s.shape,o,1,i));return n.runWebGLProgram(u,[a,s],"float32")}},{kernelName:"Cos",backendName:"webgl",kernelFunc:Nq},{kernelName:ty,backendName:"webgl",kernelFunc:Nj},{kernelName:tv,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=r,h=new NK(a.shape,s.shape,o,l,u);return n.runWebGLProgram(h,[a,s,i],"float32")}},{kernelName:tb,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:i,reverse:o}=r;return NJ(E.Prod,a,n,s,i,o)}},{kernelName:tx,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:i,reverse:o}=r;return NJ(E.Sum,a,n,s,i,o)}},{kernelName:tk,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:i,binaryOutput:o}=r;if(1===a.shape.length){let e=I$(n.readSync(a.dataId),n.readSync(s.dataId),s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,e)}if(2===a.shape.length){let e=IE(n.bufferSync(a),n.bufferSync(s),i,o);return n.makeTensorInfo(e.shape,s.dtype,e.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},{kernelName:tw,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:i}=r,o=a.shape[0],l="NHWC"===i?a.shape[1]:a.shape[2],u="NHWC"===i?a.shape[2]:a.shape[3],h="NHWC"===i?a.shape[3]:a.shape[1],p=l*s,d=u*s,c=h/(s*s),f=new NQ("NHWC"===i?[o,p,d,c]:[o,c,p,d],s,i);return n.runWebGLProgram(f,[a],a.dtype)}},{kernelName:tI,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i}=n,{strides:o,pad:l,dilations:u,dimRoundingMode:h}=a,p=u;null==p&&(p=[1,1]),rg.assert(iI.eitherStridesOrDilationsAreOne(o,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${p}'`);let d=iI.computeConv2DInfo(s.shape,i.shape,o,p,l,h,!0);t=eM.getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new N1(d):new N0(d);let c=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];return r.runWebGLProgram(t,[s,i],"float32",c)}},{kernelName:tS,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:h}=r,p=new N2(iI.computeConv2DInfo(a.shape,h,i,o,l,u,!0));return n.runWebGLProgram(p,[a,s],"float32")}},{kernelName:tN,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:h}=r,p=new N3(iI.computeConv2DInfo(h,s.shape,i,o,l,u,!0));return n.runWebGLProgram(p,[a,s],"float32")}},{kernelName:tT,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r}=t,a=[...r.shape,...r.shape],s=rg.sizeFromShape(r.shape),i=SZ({inputs:{x:r},backend:n,attrs:{shape:[s]}}),o=new N4(s),l=n.runWebGLProgram(o,[i],i.dtype),u=SZ({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}},{kernelName:tC,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i}=n,{strides:o,pad:l,dilations:u}=a,h=iI.computeDilation2DInfo(s.shape,i.shape,o,l,"NHWC",u),p=new N6(h),d=SZ({inputs:{x:t=r.runWebGLProgram(p,[s,i],"float32")},backend:r,attrs:{shape:h.outShape}});return r.disposeIntermediateTensorInfo(t),d}},{kernelName:tR,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,{allDims:s,summedDims:i,idDims:o}=iI.decodeEinsumEquation(a,t.length);iI.checkEinsumDimSizes(s.length,o,t);let{path:l,steps:u}=iI.getEinsumComputePath(i,o),h=u.length,p=null,d=s.length,c=[];for(let e=0;e<h;++e){for(let r of u[e]){let e,{permutationIndices:a,expandDims:s}=iI.getEinsumPermutation(d,o[r]);iI.isIdentityPermutation(a)?e=t[r]:(e=S6({inputs:{x:t[r]},backend:n,attrs:{perm:a}}),c.push(e));let i=e.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);rg.arraysEqual(e.shape,i)||(e=SZ({inputs:{x:e},backend:n,attrs:{shape:i}}),c.push(e)),null===p?p=e:(p=SY({inputs:{a:e,b:p},backend:n}),c.push(p))}e<h-1&&(l[e]>=0&&(p=S4({inputs:{x:p},backend:n,attrs:{axis:l[e]-(s.length-d),keepDims:!1}}),c.push(p)),d--)}for(let e of c)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},{kernelName:"Elu",backendName:"webgl",kernelFunc:N5},{kernelName:tF,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n}=e,{dy:r,y:a}=t,s=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new SO(N8,r.shape,a.shape):new SD("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,a.shape);return n.runWebGLProgram(s,[r,a],r.dtype)}},{kernelName:tD,backendName:"webgl",kernelFunc:N7},{kernelName:"Erf",backendName:"webgl",kernelFunc:N9},{kernelName:"Exp",backendName:"webgl",kernelFunc:Te},{kernelName:t_,backendName:"webgl",kernelFunc:Tt},{kernelName:tO,backendName:"webgl",kernelFunc:Tr},{kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:r}=t;return Ts(r,!1,n)}},{kernelName:tM,backendName:"webgl",kernelFunc:To},{kernelName:tL,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{let{image:n}=e,r=new Tl(n.shape);return t.runWebGLProgram(r,[n],n.dtype)}},{kernelName:tz,backendName:"webgl",kernelFunc:Th},{kernelName:tP,backendName:"webgl",kernelFunc:Tp},{kernelName:rn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{pixels:a}=t,{numChannels:s}=r,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,h]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],p=[h,u],d=[h,u,s];if(l||i){let e=eM.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==o||e!==Tf)&&(Tf=e,o=document.createElement("canvas").getContext("2d",{willReadFrequently:Tf})),o.canvas.width=u,o.canvas.height=h,o.drawImage(a,0,0,u,h),a=o.canvas}let c=n.makeTensorInfo(p,"int32");n.texData.get(c.dataId).usage=C.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(c.dataId),a);let f=eM.getBool("WEBGL_PACK")?new Tc(d):new Td(d),m=n.runWebGLProgram(f,[c],"int32");return n.disposeData(c.dataId),m}},{kernelName:rs,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i,bias:o,preluActivationWeights:l}=n,{strides:u,pad:h,dataFormat:p,dilations:d,dimRoundingMode:c,activation:f,leakyreluAlpha:m}=a,g=iI.convertConv2DDataFormat(p),y=iI.computeConv2DInfo(s.shape,i.shape,u,d,h,c,!1,g),b=[],x=null!=o,v=null!=l,k="leakyrelu"===f,w=()=>{let e=[s,i],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){let t=SZ({inputs:{x:e},backend:r,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(o,p)),v&&e.push(t(l,p)),k){let t=r.makeTensorInfo([],"float32",rg.createScalarValue(m,"float32"));e.push(t),b.push(t)}return e};if(1===y.filterHeight&&1===y.filterWidth&&1===y.dilationHeight&&1===y.dilationWidth&&1===y.strideHeight&&1===y.strideWidth&&("SAME"===y.padInfo.type||"VALID"===y.padInfo.type))t=NB({x:s,filter:i,convInfo:y,backend:r,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else if(y.strideWidth<=2&&"channelsLast"===g&&eM.getBool("WEBGL_EXP_CONV")){let e=new NL(y,x,f?SH(f,!0):null,v,k),n=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],a=w();t=r.runWebGLProgram(e,a,"float32",n)}else if(eM.getBool("WEBGL_CONV_IM2COL"))t=NW({x:s,filter:i,convInfo:y,backend:r,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else{let e=new NO(y,x,f?SH(f,!1):null,v,k),n=w();t=r.runWebGLProgram(e,n,"float32")}let I=SZ({inputs:{x:t},backend:r,attrs:{shape:y.outShape}});return b.push(t),b.forEach(e=>r.disposeIntermediateTensorInfo(e)),I}},{kernelName:ri,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i,bias:o,preluActivationWeights:l}=n,{strides:u,pad:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=a,m=[],g=p;null==g&&(g=[1,1]),rg.assert(iI.eitherStridesOrDilationsAreOne(u,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`);let y=iI.computeConv2DInfo(s.shape,i.shape,u,g,h,d,!0),b=eM.getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=c?SH(c,b):null,v=[s,i],k=null!=o,w=null!=l,I="leakyrelu"===c;if(k&&v.push(o),w&&v.push(l),I){let e=r.makeTensorInfo([],"float32",rg.createScalarValue(f,"float32"));v.push(e),m.push(e)}t=b?new N1(y,k,x,w,I):new N0(y,k,x,w,I);let S=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],N=r.runWebGLProgram(t,v,"float32",S);return m.forEach(e=>r.disposeIntermediateTensorInfo(e)),N}},{kernelName:tU,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{params:r,indices:a}=t,s=a.shape,i=s[s.length-1],o=rg.sizeFromShape(r.shape),[l,u,h,p]=iI.prepareAndValidate(r,a),d=SZ({inputs:{x:a},backend:n,attrs:{shape:[u,i]}}),c=SZ({inputs:{x:r},backend:n,attrs:{shape:[rg.sizeFromShape(r.shape)/h,h]}});if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){let e=IL(n.readSync(a.dataId),n.bufferSync(r),r.dtype,u,i,h,p,r.shape,o);return n.makeTensorInfo(l,r.dtype,e.values)}let f=new Tm(i,p,[u,h],r.shape),m=n.runWebGLProgram(f,[c,d],c.dtype),g=SZ({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(m),g}},{kernelName:tW,backendName:"webgl",kernelFunc:Ty},{kernelName:tV,backendName:"webgl",kernelFunc:Tb},{kernelName:tG,backendName:"webgl",kernelFunc:Tx},{kernelName:tH,backendName:"webgl",kernelFunc:SM},{kernelName:tq,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:r}=t;return Ts(r,!0,n)}},{kernelName:tj,backendName:"webgl",kernelFunc:ND},{kernelName:tK,backendName:"webgl",kernelFunc:Tv},{kernelName:tX,backendName:"webgl",kernelFunc:Tk},{kernelName:tY,backendName:"webgl",kernelFunc:Tw},{kernelName:tZ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r,i=n.makeTensorInfo([],"float32",rg.createScalarValue(s,"float32")),o=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new SO(SP,a.shape,i.shape):new SD(Sz,a.shape,i.shape),l=n.runWebGLProgram(o,[a,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},{kernelName:tJ,backendName:"webgl",kernelFunc:TI},{kernelName:tQ,backendName:"webgl",kernelFunc:TS},{kernelName:t0,backendName:"webgl",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,i=IV(r,a,s);return t.makeTensorInfo([i.length],"float32",i)}},{kernelName:"Log",backendName:"webgl",kernelFunc:TN},{kernelName:t1,backendName:"webgl",kernelFunc:TT},{kernelName:t2,backendName:"webgl",kernelFunc:TC},{kernelName:t3,backendName:"webgl",kernelFunc:T$},{kernelName:t4,backendName:"webgl",kernelFunc:TE},{kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:s,bias:i,alpha:o,beta:l}=r,u=eM.getBool("WEBGL_PACK_NORMALIZATION")?new TR(a.shape,s,i,o,l):new TA(a.shape,s,i,o,l);return n.runWebGLProgram(u,[a],a.dtype)}},{kernelName:t6,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:h}=r,p=new TF(a.shape,o,l,u,h);return n.runWebGLProgram(p,[a,s,i],a.dtype)}},{kernelName:"Max",backendName:"webgl",kernelFunc:TD},{kernelName:t5,backendName:"webgl",kernelFunc:T_},{kernelName:t8,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t;w0(a,"maxPool");let{filterSize:s,strides:i,pad:o,dimRoundingMode:l}=r;rg.assert(iI.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);let u=iI.computePool2DInfo(a.shape,s,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&rg.arraysEqual(u.inShape,u.outShape))return SM({inputs:{x:a},backend:n});let h=new Nd(u,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},{kernelName:t9,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=r,h=new Nc(iI.computePool3DInfo(a.shape,s,i,[1,1,1],o,u,l),"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},{kernelName:ne,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r,h=iI.computePool3DInfo(s.shape,i,o,[1,1,1],l,u),p=new Nc(h,"max",!0),d=n.runWebGLProgram(p,[s],s.dtype),c=new TM(h),f=n.runWebGLProgram(c,[a,d],s.dtype);return n.disposeIntermediateTensorInfo(d),f}},{kernelName:t7,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s,output:i}=t;w0([s,i],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:h}=r,p=iI.computePool2DInfo(s.shape,o,l,1,u,h),d=new Nd(p,"max",!0),c=n.runWebGLProgram(d,[s],s.dtype),f=new TO(p),m=n.runWebGLProgram(f,[a,c],s.dtype);return n.disposeIntermediateTensorInfo(c),m}},{kernelName:nt,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:r}=e,{filterSize:a,strides:s,pad:i,includeBatchInIndex:o}=t;rg.assert(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);let l=[1,1];rg.assert(iI.eitherStridesOrDilationsAreOne(s,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${l}'`);let u=iI.computePool2DInfo(r.shape,a,s,l,i),[h,p]=function(e,t,n,r){let a=new Nd(n,"max",!1),s=r.runWebGLProgram(a,[e],"float32");return a=new Nd(n,"max",!0,!0,t),[s,r.runWebGLProgram(a,[e],"float32")]}(r,o,u,n);return[h,p]}},{kernelName:nn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:r}=e,{keepDims:a,axis:s}=t,i=r.shape.length,o=rg.parseAxisParam(s,r.shape),l=o,u=iI.getAxesPermutation(l,i),h=null!=u,p=n.shouldExecuteOnCPU([r]),d=[],c=r;if(h){if(p){let e=n.texData.get(c.dataId).values,t=Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[u[e]];let a=So(e,r.shape,r.dtype,u,t);c=n.makeTensorInfo(t,r.dtype),n.texData.get(c.dataId).values=a}else c=S3(r,u,n);d.push(c),l=iI.getInnerMostAxes(l.length,i)}iI.assertAxesAreInnerMostDims("sum",l,i);let[f,m]=iI.computeOutAndReduceShapes(c.shape,l),g=f;a&&(g=iI.expandShapeToKeepDim(f,o));let y=function(e,t,n,r){let a=rg.sizeFromShape(t),s=rg.sizeFromShape(e.shape),i=SZ({inputs:{x:e},attrs:{shape:[s/a,a]},backend:r}),o=S0(i,"float32","mean",r),l=SZ({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),l}(c,m,g,n);for(let e of d)n.disposeIntermediateTensorInfo(e);return y}},{kernelName:"Min",backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a,l=s.shape.length,u=rg.parseAxisParam(i,s.shape),h=u,p=iI.getAxesPermutation(h,l),d=s;null!=p&&(d=S6({inputs:{x:s},backend:r,attrs:{perm:p}}),h=iI.getInnerMostAxes(h.length,s.shape.length)),iI.assertAxesAreInnerMostDims("min",h,l);let[c,f]=iI.computeOutAndReduceShapes(d.shape,h),m=SZ({inputs:{x:d},backend:r,attrs:{shape:[-1,rg.sizeFromShape(f)]}}),g=S0(m,m.dtype,"min",r);return t=o?SZ({inputs:{x:g},backend:r,attrs:{shape:iI.expandShapeToKeepDim(c,u)}}):SZ({inputs:{x:g},backend:r,attrs:{shape:c}}),r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),null!=p&&r.disposeIntermediateTensorInfo(d),t}},{kernelName:nr,backendName:"webgl",kernelFunc:TL},{kernelName:na,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r}=e,{paddings:a,mode:s}=n,i=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TP(r.shape,a,s):new Tz(r.shape,a,s);return t.runWebGLProgram(i,[r],r.dtype)}},{kernelName:"Mod",backendName:"webgl",kernelFunc:TB},{kernelName:ns,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:i,normalized:o}=r,l=o?a:TH({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=new TW(l.shape[0],l.shape[1],s),h=n.runWebGLProgram(u,[l],"int32",[[i]]);return o||n.disposeIntermediateTensorInfo(l),h}},{kernelName:ni,backendName:"webgl",kernelFunc:SY},{kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r}=e,{x:a}=n;if(r.shouldExecuteOnCPU([a])){let[e,t]=IX(r.texData.get(a.dataId).values,a.shape,a.dtype);return r.makeTensorInfo(t,a.dtype,e)}return t=eM.getBool("WEBGL_PACK_UNARY_OPERATIONS")?new ST(a.shape,Tj):new Sy(a.shape,Tq),r.runWebGLProgram(t,[a],a.dtype)}},{kernelName:nl,backendName:"webgl",kernelFunc:function(e){iI.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=r,{selectedIndices:u}=TK(n.readSync(a.dataId),n.readSync(s.dataId),i,o,l);return n.makeTensorInfo([u.length],"int32",new Int32Array(u))}},{kernelName:nu,backendName:"webgl",kernelFunc:function(e){iI.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=r,{selectedIndices:h,validOutputs:p}=TX(n.readSync(a.dataId),n.readSync(s.dataId),i,o,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},{kernelName:nh,backendName:"webgl",kernelFunc:function(e){iI.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=r,h=n.readSync(a.dataId),{selectedIndices:p,selectedScores:d}=TY(h,n.readSync(s.dataId),i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([d.length],"float32",new Float32Array(d))]}},{kernelName:no,backendName:"webgl",kernelFunc:Nw},{kernelName:nd,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{dtype:s,depth:i,onValue:o,offValue:l}=r,u=rg.sizeFromShape(a.shape),h=new TZ(u,i,o,l),p=SZ({inputs:{x:a},backend:n,attrs:{shape:[u]}}),d=n.runWebGLProgram(h,[p],s);n.disposeIntermediateTensorInfo(p);let c=SZ({inputs:{x:d},backend:n,attrs:{shape:[...a.shape,i]}});return n.disposeIntermediateTensorInfo(d),c}},{kernelName:np,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw Error("onesLike is not supported under string dtype");if("complex64"!==a.dtype)return To({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:r});{let t=NI({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=ND({inputs:{input:a},backend:r}),i=TJ({inputs:{x:s},backend:r}),o=SL({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(i),o}}},{kernelName:nc,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return Tt({inputs:{input:t[0]},backend:n,attrs:{dim:a}});let s=t[0].shape,i=t[0].dtype;t.forEach(e=>{rg.assertShapesMatch(s,e.shape,"All tensors passed to stack must have matching shapes"),rg.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=N_({inputs:t.map(e=>{let t=Tt({inputs:{input:e},backend:n,attrs:{dim:a}});return o.push(t),t}),backend:n,attrs:{axis:a}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}},{kernelName:nf,backendName:"webgl",kernelFunc:T1},{kernelName:"Pow",backendName:"webgl",kernelFunc:T2},{kernelName:nm,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r,alpha:a}=t,s=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new SO(SW,r.shape,a.shape):new SD(SB,r.shape,a.shape);return n.runWebGLProgram(s,[r,a],"float32")}},{kernelName:ng,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a,l=s.shape.length,u=[],h=rg.parseAxisParam(i,s.shape),p=h,d=iI.getAxesPermutation(p,l),c=s;if(null!=d&&(c=S6({inputs:{x:s},backend:r,attrs:{perm:d}}),p=iI.getInnerMostAxes(p.length,l),u.push(c)),iI.assertAxesAreInnerMostDims("prod",p,l),r.shouldExecuteOnCPU([c])){let e=r.texData.get(c.dataId).values,{outVals:n,outShape:a,outDtype:s}=IZ(c.shape,c.dtype,e,p);t=r.makeTensorInfo(a,s,n)}else{let[e,n]=iI.computeOutAndReduceShapes(c.shape,p),a=SZ({inputs:{x:c},backend:r,attrs:{shape:[-1,rg.sizeFromShape(n)]}}),i=S0(a,ap(s.dtype),"prod",r);t=SZ({inputs:{x:i},backend:r,attrs:{shape:e}}),u.push(a),u.push(i)}if(o){u.push(t);let e=iI.expandShapeToKeepDim(t.shape,h);t=SZ({inputs:{x:t},backend:r,attrs:{shape:e}})}return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),t}},{kernelName:ny,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:a,paramsDenseValues:s,indices:i}=t,{outputRaggedRank:o}=r,l=a.map(e=>n.readSync(e.dataId)),u=a.map(e=>e.shape),h=n.readSync(s.dataId),p=n.readSync(i.dataId),[d,c,f]=IJ(l,u,h,s.shape,s.dtype,p,i.shape,o),m=d.map(e=>n.makeTensorInfo([e.length],"int32",e)),g=n.makeTensorInfo(f,s.dtype,c);return m.concat([g])}},{kernelName:nb,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{shape:a,values:s,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=r,u=n.readSync(a.dataId),h=n.readSync(s.dataId),p=n.readSync(i.dataId),d=o.map(e=>n.readSync(e.dataId)),c=o.map(e=>e.shape),[f,m]=IQ(u,a.shape,h,s.shape,s.dtype,p,i.shape,d,c,l);return n.makeTensorInfo(f,s.dtype,m)}},{kernelName:nx,backendName:"webgl",kernelFunc:T3},{kernelName:nv,backendName:"webgl",kernelFunc:NI},{kernelName:tA,backendName:"webgl",kernelFunc:TU},{kernelName:nk,backendName:"webgl",kernelFunc:T4},{kernelName:nw,backendName:"webgl",kernelFunc:T6},{kernelName:n$,backendName:"webgl",kernelFunc:T5},{kernelName:nI,backendName:"webgl",kernelFunc:SZ},{kernelName:nT,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:o}=r,[l,u]=o,h=eM.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new T7(a.shape,l,u,s,i):new T8(a.shape,l,u,s,i);return n.runWebGLProgram(h,[a],"float32")}},{kernelName:nC,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:i}=r,o=new T9(s.shape,a.shape,i);return n.runWebGLProgram(o,[s],s.dtype)}},{kernelName:nS,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:o}=r,[l,u]=o,h=eM.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Ct(a.shape,l,u,s,i):new Ce(a.shape,l,u,s,i);return n.runWebGLProgram(h,[a],a.dtype)}},{kernelName:nN,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:i}=r,o=new Cn(s.shape,a.shape,i);return n.runWebGLProgram(o,[s],s.dtype)}},{kernelName:nE,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:s}=r,i=a.shape.length,o=rg.parseAxisParam(s,a.shape);if(0===i)return SM({inputs:{x:a},backend:n});let l=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ca(a.shape,o):new Cr(a.shape,o);return n.runWebGLProgram(l,[a],a.dtype)}},{kernelName:rr,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:r}=e,{radians:a,fillValue:s,center:i}=t,o=new Cs(r.shape,s),[l,u]=iI.getImageCenter(i,r.shape[1],r.shape[2]),h=[[l,u,Math.sin(a),Math.cos(a)]];return n.runWebGLProgram(o,[r],r.dtype,h)}},{kernelName:nA,backendName:"webgl",kernelFunc:Ci},{kernelName:nR,backendName:"webgl",kernelFunc:Co},{kernelName:nF,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:s}=t,{shape:i}=r,{sliceRank:o,numUpdates:l,sliceSize:u,strides:h,outputSize:p}=iI.calculateShapes(s,a,i),d=[p/u,u];if(0===p)return n.makeTensorInfo(i,a.dtype);let c=SZ({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=SZ({inputs:{x:s},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new Cl(l,o,c.shape.length,f.shape.length,h,d),y=n.runWebGLProgram(g,[f,c,m],f.dtype),b=SZ({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}},{kernelName:nD,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{sortedSequence:a,values:s}=t,{side:i}=r,o=new Cu(a.shape[0],a.shape[1],s.shape[1],i),l=[[a.shape[1]]];return n.runWebGLProgram(o,[a,s],"int32",l)}},{kernelName:n_,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{condition:r,t:a,e:s}=t,i=new Ch(r.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(i,[r,a,s],ah(a.dtype,s.dtype))}},{kernelName:nO,backendName:"webgl",kernelFunc:Cp},{kernelName:nP,backendName:"webgl",kernelFunc:Cd},{kernelName:nz,backendName:"webgl",kernelFunc:Cc},{kernelName:"Sin",backendName:"webgl",kernelFunc:Cf},{kernelName:nL,backendName:"webgl",kernelFunc:Cm},{kernelName:nM,backendName:"webgl",kernelFunc:Nk},{kernelName:nG,backendName:"webgl",kernelFunc:TH},{kernelName:nB,backendName:"webgl",kernelFunc:Cg},{kernelName:nU,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,paddings:i}=r;rg.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let o=s.reduce((e,t)=>e*t),l=[[0,0]];l.push(...i);for(let e=1+s.length;e<a.shape.length;++e)l.push([0,0]);let u=[],h=T1({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),p=iI.getReshaped(h.shape,s,o,!1),d=iI.getPermuted(p.length,s.length,!1),c=iI.getReshapedPermuted(h.shape,s,o,!1),f=SZ({inputs:{x:h},backend:n,attrs:{shape:p}}),m=S6({inputs:{x:f},backend:n,attrs:{perm:d}}),g=SZ({inputs:{x:m},backend:n,attrs:{shape:c}});return u.push(h),u.push(f),u.push(m),u.forEach(e=>n.disposeIntermediateTensorInfo(e)),g}},{kernelName:nH,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:i}=t;if(1!==s.shape.length)throw Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(2!==r.shape.length)throw Error(`Indices must be a matrix, saw:
         ${r.shape}`);if(1!==a.shape.length)throw Error(`Values must be a vector, saw:
         ${a.shape}`);if(0!==i.shape.length)throw Error(`Default value must be a scalar, saw:
        ${i.shape}`);let o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=n.readSync(s.dataId),h=n.readSync(i.dataId)[0],[p,d,c,f,m]=I5(o,r.shape,r.dtype,l,a.dtype,u,h);return[n.makeTensorInfo(d,r.dtype,p),n.makeTensorInfo([d[0]],a.dtype,c),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},{kernelName:nq,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==a.shape.length)throw Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==s.shape.length)throw Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(n.readSync(a.dataId)),o=n.readSync(r.dataId),l=Array.from(n.readSync(s.dataId)),[u,h,p]=I8(o,r.shape,r.dtype,i,l);return[n.makeTensorInfo(h,r.dtype,u),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}},{kernelName:nj,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
              ${a.shape}`);if(1!==s.shape.length)throw Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=n.readSync(r.dataId),o=n.readSync(a.dataId),l=n.readSync(s.dataId),[u,h]=I7(i,r.shape,r.dtype,o,l,!0);return n.makeTensorInfo(h,r.dtype,u)}},{kernelName:nK,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
             ${a.shape}`);if(1!==s.shape.length)throw Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=n.readSync(r.dataId),o=n.readSync(a.dataId),l=n.readSync(s.dataId),[u,h]=I7(i,r.shape,r.dtype,o,l);return n.makeTensorInfo(h,r.dtype,u)}},{kernelName:nX,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:s,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:l,numUpdates:u,sliceSize:h,strides:p,outputSize:d}=iI.calculateShapes(s,a,o);if("string"===s.dtype){let e=n.bufferSync(a),t=I2(e,n.bufferSync(s),o,d,h,u,l,p,rg.decodeString(n.readSync(i.dataId)[0]),!1);return n.makeTensorInfo(o,t.dtype,t.values)}let c=new Cl(u,l,a.shape.length,s.shape.length,p,[d,1],!1),f=n.runWebGLProgram(c,[s,a,i],s.dtype),m=SZ({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}},{kernelName:nV,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:s,axis:i}=r,o=rg.parseAxisParam(i,a.shape)[0],l=iI.prepareSplitSize(a,s,o),u=Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{let t=[...h];t[o]=e;let r=Nk({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,r})}},{kernelName:nW,backendName:"webgl",kernelFunc:Cb},{kernelName:nZ,backendName:"webgl",kernelFunc:Cx},{kernelName:nY,backendName:"webgl",kernelFunc:Ck},{kernelName:rt,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){let{x:r}=e,a=Sb+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,s=new Sy(r.shape,a);return n.runWebGLProgram(s,[r],r.dtype)}},{kernelName:nJ,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{begin:i,end:o,strides:l,beginMask:u,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:c}=a,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:k}=i7.sliceInfo(s.shape,i,o,l,u,h,p,d,c);if(g)t=SZ({inputs:{x:s},backend:r,attrs:{shape:m}});else if(y||b){rg.assert(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);let e=i7.computeOutShape(x,v,k),n=Nk({inputs:{x:s},backend:r,attrs:{begin:x,size:e}});t=SZ({inputs:{x:n},backend:r,attrs:{shape:m}}),r.disposeIntermediateTensorInfo(n)}else if(r.shouldExecuteOnCPU([s])){let e=r.readSync(s.dataId),n=Se(f,sQ(s.shape,s.dtype,e),k,x);t=r.makeTensorInfo(m,s.dtype,n.values)}else{let e=new Cw(x,k,f);t=r.runWebGLProgram(e,[s],s.dtype)}let w=SZ({inputs:{x:t},backend:r,attrs:{shape:m}});return r.disposeIntermediateTensorInfo(t),w}},{kernelName:nQ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=r,{data:h,dataSplits:p}=t,[d,c]=St(n.readSync(h.dataId),n.readSync(p.dataId),a,s,i,o,l,u);return[n.makeTensorInfo([d.length],"string",d),n.makeTensorInfo(p.shape,"int32",c)]}},{kernelName:n0,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:i}=t;if("string"!==s.dtype)throw Error("Input must be of datatype string");if(1!==s.shape.length)throw Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==i.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let[o,l,u]=Sn(n.readSync(s.dataId),n.readSync(i.dataId)[0],a),h=l.length;return[n.makeTensorInfo([h,2],"int32",o),n.makeTensorInfo([h],"string",l),n.makeTensorInfo([2],"int32",new Int32Array(u))]}},{kernelName:n1,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw Error("Input must be of datatype string");if(a<=0)throw Error("Number of buckets must be at least 1");let i=Sr(n.readSync(s.dataId),a);return n.makeTensorInfo(s.shape,"int32",i)}},{kernelName:"Sub",backendName:"webgl",kernelFunc:TG},{kernelName:"Sum",backendName:"webgl",kernelFunc:S4},{kernelName:"Tan",backendName:"webgl",kernelFunc:CI},{kernelName:n2,backendName:"webgl",kernelFunc:CS},{kernelName:n3,backendName:"webgl",kernelFunc:CT},{kernelName:n4,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:i}=r,o=eM.getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=eM.getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,h=u[u.length-1];if(n.shouldExecuteOnCPU([a])||h<o||s>l){let[e,t]=Si(n.readSync(a.dataId),u,a.dtype,s,i);return[n.makeTensorInfo(e.shape,e.dtype,e.values),n.makeTensorInfo(t.shape,t.dtype,t.values)]}if(0===s)return u[u.length-1]=0,[n.makeTensorInfo(u,a.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===h)return[a,To({attrs:{shape:u,dtype:"int32",value:0},backend:n})];let p=n.texData.get(a.dataId),d=null!==p&&p.isPacked,c=d?n.unpackTensor(a):a,f=rg.sizeFromShape(u)/h,m=SZ({inputs:{x:c},attrs:{shape:[f,h]},backend:n});d&&CE(n,c);let g=CA(s),y=CA(h),b=null,x=()=>null===b?[m,m]:[m,b],v=(e,t,r)=>{let a=x(),s=new CC(r),i=[[h],[+(null===b)],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(s,a,"int32",i),CE(n,o)};for(let e=1;e<g;e*=2){let t=2*e;for(let n=e;n>=1;n/=2)v(t,n,[f,y])}for(let e=y;e>g;e/=2){let t=x(),r=new C$([f,e/2]),a=[[h],[+(null===b)],[g]],s=b;b=n.runWebGLProgram(r,t,"int32",a),CE(n,s);let i=g/2,o=2*i;for(let e=i;e>=1;e/=2)v(o,e,b.shape)}let k=b;b=Nk({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,s]}}),CE(n,k);let w=Ty({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});CE(n,m);let I=u.slice(0,-1);I.push(s),k=b,b=SZ({inputs:{x:b},attrs:{shape:I},backend:n}),CE(n,k);let S=w;return w=SZ({inputs:{x:w},attrs:{shape:I},backend:n}),CE(n,S),[w,b]}},{kernelName:n6,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{image:a,transforms:s}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=r,[h,p,d,c]=a.shape,[f,m]=null!=u?u:[p,d],g=new CR(p,d,i,o,l,[h,f,m,c]);return n.runWebGLProgram(g,[a,s],"float32")}},{kernelName:n5,backendName:"webgl",kernelFunc:S6},{kernelName:n8,backendName:"webgl",kernelFunc:function(e){let{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;w0(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let{outputValues:i,outputShape:o,indices:l}=Sl(r.readSync(s.dataId),a,s.shape,s.dtype);return[r.makeTensorInfo(o,s.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:n7,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{value:a}=t,{axis:s}=r;s<0&&(s+=a.shape.length);let i=a.shape.length,o=a.shape[s],l=Array(i-1),u=0;for(let e=0;e<i;e++)e!==s&&(l[u++]=a.shape[e]);let h=[],p=Array(i).fill(0),d=a.shape.slice();d[s]=1;let c=Array(o);for(let e=0;e<c.length;e++){p[s]=e;let t=Nk({inputs:{x:a},backend:n,attrs:{begin:p,size:d}}),r=SZ({inputs:{x:t},backend:n,attrs:{shape:l}});c[e]=r,h.push(t)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},{kernelName:n9,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:s}=t,{numSegments:i}=r,o=a.shape.length,l=[],u=0,h=iI.getAxesPermutation([u],o),p=a;null!=h&&(p=S6({inputs:{x:a},backend:n,attrs:{perm:h}}),l.push(p),u=iI.getInnerMostAxes(1,o)[0]);let d=iI.segment_util.computeOutShape(p.shape,u,i),c=rg.sizeFromShape([p.shape[u]]),f=SZ({inputs:{x:p},backend:n,attrs:{shape:[-1,c]}});l.push(f);let m=ap(a.dtype),g=(e,t,r,a,s)=>{let i=e.shape[0],o=e.shape[1],u=iI.segment_util.segOpComputeOptimalWindowSize(o,s),h=new CF({windowSize:u,inSize:o,batchSize:i,numSegments:s},t),p=n.compileAndRun(h,[e,r],a);if(l.push(p),p.shape[1]===s)return p;let d=T3({backend:n,attrs:{start:0,stop:s,step:1,dtype:"float32"}}),c=CT({inputs:{x:d},backend:n,attrs:{reps:[o/u]}});return l.push(d),l.push(c),g(p,t,c,a,s)},y=SZ({inputs:{x:g(f,"unsortedSegmentSum",s,m,i)},backend:n,attrs:{shape:d}}),b=y;return null!=h&&(l.push(y),b=S6({inputs:{x:b},backend:n,attrs:{perm:iI.getUndoAxesPermutation(h)}})),l.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},{kernelName:re,backendName:"webgl",kernelFunc:TJ}])rf(e);let CD=new class{constructor(){this.loadModel()}async loadModel(){console.log("Loading model...");let e=performance.now(),t=chrome.runtime.getURL("model/model.json");try{var n;this.model=await (null==n&&(n={}),m1(t,n)),ix(()=>{this.model.predict(hg([1,50,80,1]))});let r=Math.floor(performance.now()-e);console.log(`Model loaded and initialized in ${r} ms`)}catch(e){console.error("Unable to load model",e)}}async analyzeImage(e,t){if(!t)return void console.error("No tab. No prediction.");if(!this.model){console.log("Waiting for model to load..."),setTimeout(()=>{this.analyzeImage(imageData,t)},1e3);return}console.log("Predicting...");let n=Object.values(e);console.log(n);let r=pd(n,[1,50,80,1],"float32"),a=this.model.predict(r),s="";a.forEach(e=>{let t=e.dataSync(),n=t.indexOf(Math.max(...t));s+="abcdefghijklmnopqrstuvwxyz"[n]}),console.log("辨識結果 Captcha：",s);let i={action:"result",result:s};chrome.tabs.sendMessage(t,i)}};chrome.runtime.onMessage.addListener((e,t)=>{"analyze"===e.action&&CD.analyzeImage(e.data,t.tab.id)})})();
//# sourceMappingURL=service_worker.js.map
